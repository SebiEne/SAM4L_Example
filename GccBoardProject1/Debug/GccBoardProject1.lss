
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bb0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004bb0  00004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e0  20000000  00004bb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000ac  200009e0  00005598  000209e0  2**2
                  ALLOC
  4 .stack        00001004  20000a8c  00005644  000209e0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020a0a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015bb6  00000000  00000000  00020a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e5b  00000000  00000000  00036619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007d8  00000000  00000000  00039474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00030c70  00000000  00000000  00039c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f102  00000000  00000000  0006a8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000e6b68  00000000  00000000  000799be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004785  00000000  00000000  00160526  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000738  00000000  00000000  00164cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001df8  00000000  00000000  001653e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
       0:	90 1a 00 20 2d 16 00 00 29 16 00 00 29 16 00 00     ... -...)...)...
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      10:	29 16 00 00 29 16 00 00 29 16 00 00 00 00 00 00     )...)...).......
	...
			cpu_irq_prev_interrupt_state = true;
      2c:	29 16 00 00 29 16 00 00 00 00 00 00 29 16 00 00     )...).......)...
      3c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      4c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      5c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      6c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      7c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      8c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      9c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      ac:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      bc:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      cc:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      dc:	29 16 00 00 51 04 00 00 29 16 00 00 29 16 00 00     )...Q...)...)...
      ec:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
      fc:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
     10c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
     11c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
     12c:	15 17 00 00 29 16 00 00 29 16 00 00 29 16 00 00     ....)...)...)...
     13c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
     14c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
     15c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
     16c:	29 16 00 00 29 16 00 00 29 16 00 00 29 16 00 00     )...)...)...)...
     17c:	29 16 00 00                                         )...

00000180 <__do_global_dtors_aux>:
     180:	b510      	push	{r4, lr}
     182:	4c05      	ldr	r4, [pc, #20]	; (198 <__do_global_dtors_aux+0x18>)
     184:	7823      	ldrb	r3, [r4, #0]
     186:	b933      	cbnz	r3, 196 <__do_global_dtors_aux+0x16>
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <__do_global_dtors_aux+0x1c>)
     18a:	b113      	cbz	r3, 192 <__do_global_dtors_aux+0x12>
     18c:	4804      	ldr	r0, [pc, #16]	; (1a0 <__do_global_dtors_aux+0x20>)
     18e:	f3af 8000 	nop.w
     192:	2301      	movs	r3, #1
     194:	7023      	strb	r3, [r4, #0]
     196:	bd10      	pop	{r4, pc}
     198:	200009e0 	.word	0x200009e0
     19c:	00000000 	.word	0x00000000
     1a0:	00004bb8 	.word	0x00004bb8

000001a4 <frame_dummy>:
     1a4:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <frame_dummy+0x34>)
     1a6:	b143      	cbz	r3, 1ba <frame_dummy+0x16>
     1a8:	480c      	ldr	r0, [pc, #48]	; (1dc <frame_dummy+0x38>)
     1aa:	490d      	ldr	r1, [pc, #52]	; (1e0 <frame_dummy+0x3c>)
     1ac:	b510      	push	{r4, lr}
     1ae:	f3af 8000 	nop.w
     1b2:	480c      	ldr	r0, [pc, #48]	; (1e4 <frame_dummy+0x40>)
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b923      	cbnz	r3, 1c2 <frame_dummy+0x1e>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	480a      	ldr	r0, [pc, #40]	; (1e4 <frame_dummy+0x40>)
     1bc:	6803      	ldr	r3, [r0, #0]
     1be:	b933      	cbnz	r3, 1ce <frame_dummy+0x2a>
     1c0:	4770      	bx	lr
     1c2:	4b09      	ldr	r3, [pc, #36]	; (1e8 <frame_dummy+0x44>)
     1c4:	2b00      	cmp	r3, #0
     1c6:	d0f7      	beq.n	1b8 <frame_dummy+0x14>
     1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     1cc:	4718      	bx	r3
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <frame_dummy+0x44>)
     1d0:	2b00      	cmp	r3, #0
     1d2:	d0f5      	beq.n	1c0 <frame_dummy+0x1c>
     1d4:	4718      	bx	r3
     1d6:	bf00      	nop
     1d8:	00000000 	.word	0x00000000
     1dc:	00004bb8 	.word	0x00004bb8
     1e0:	200009e4 	.word	0x200009e4
     1e4:	00004bb8 	.word	0x00004bb8
     1e8:	00000000 	.word	0x00000000

000001ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
     1f0:	b980      	cbnz	r0, 214 <_read+0x28>
     1f2:	460c      	mov	r4, r1
     1f4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
     1f6:	2a00      	cmp	r2, #0
     1f8:	dd0f      	ble.n	21a <_read+0x2e>
     1fa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     1fc:	4e08      	ldr	r6, [pc, #32]	; (220 <_read+0x34>)
     1fe:	4d09      	ldr	r5, [pc, #36]	; (224 <_read+0x38>)
     200:	6830      	ldr	r0, [r6, #0]
     202:	4621      	mov	r1, r4
     204:	682b      	ldr	r3, [r5, #0]
     206:	4798      	blx	r3
		ptr++;
     208:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     20a:	42bc      	cmp	r4, r7
     20c:	d1f8      	bne.n	200 <_read+0x14>
		nChars++;
	}
	return nChars;
}
     20e:	4640      	mov	r0, r8
     210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
     214:	f04f 38ff 	mov.w	r8, #4294967295
     218:	e7f9      	b.n	20e <_read+0x22>
	for (; len > 0; --len) {
     21a:	4680      	mov	r8, r0
     21c:	e7f7      	b.n	20e <_read+0x22>
     21e:	bf00      	nop
     220:	20000a60 	.word	0x20000a60
     224:	20000a44 	.word	0x20000a44

00000228 <ast_enable>:
 *
 * \param[in] ast Module hardware register base address pointer
 */
void ast_enable(
		Ast *ast)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
	sysclk_enable_peripheral_clock(ast);
     22c:	4b10      	ldr	r3, [pc, #64]	; (270 <ast_enable+0x48>)
     22e:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     230:	4b10      	ldr	r3, [pc, #64]	; (274 <ast_enable+0x4c>)
     232:	79db      	ldrb	r3, [r3, #7]
     234:	2bff      	cmp	r3, #255	; 0xff
     236:	d01a      	beq.n	26e <ast_enable+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     238:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     23c:	fab3 f383 	clz	r3, r3
     240:	095b      	lsrs	r3, r3, #5
     242:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     244:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     246:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     24a:	2200      	movs	r2, #0
     24c:	4b0a      	ldr	r3, [pc, #40]	; (278 <ast_enable+0x50>)
     24e:	701a      	strb	r2, [r3, #0]
	return flags;
     250:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     252:	4a08      	ldr	r2, [pc, #32]	; (274 <ast_enable+0x4c>)
     254:	79d3      	ldrb	r3, [r2, #7]
     256:	3301      	adds	r3, #1
     258:	71d3      	strb	r3, [r2, #7]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     25a:	b129      	cbz	r1, 268 <ast_enable+0x40>
		cpu_irq_enable();
     25c:	2201      	movs	r2, #1
     25e:	4b06      	ldr	r3, [pc, #24]	; (278 <ast_enable+0x50>)
     260:	701a      	strb	r2, [r3, #0]
     262:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     266:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_BACKUP);
}
     268:	b003      	add	sp, #12
     26a:	f85d fb04 	ldr.w	pc, [sp], #4
     26e:	e7fe      	b.n	26e <ast_enable+0x46>
     270:	00000bc9 	.word	0x00000bc9
     274:	20000a3c 	.word	0x20000a3c
     278:	2000002c 	.word	0x2000002c

0000027c <ast_write_calendar_value>:
 * \retval true AST is busy
 */
static inline bool ast_is_busy(
		Ast *ast)
{
	return (ast->AST_SR & AST_SR_BUSY) != 0;
     27c:	6883      	ldr	r3, [r0, #8]
void ast_write_calendar_value(
		Ast *ast,
		struct ast_calendar calendar)
{
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
     27e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     282:	d1fb      	bne.n	27c <ast_write_calendar_value>
	}
	/* Set the new value */
	ast->AST_CALV = calendar.field;
     284:	6541      	str	r1, [r0, #84]	; 0x54
     286:	6883      	ldr	r3, [r0, #8]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     288:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     28c:	d1fb      	bne.n	286 <ast_write_calendar_value+0xa>
	}
}
     28e:	4770      	bx	lr

00000290 <ast_write_counter_value>:
     290:	6883      	ldr	r3, [r0, #8]
void ast_write_counter_value(
		Ast *ast,
		uint32_t ast_counter)
{
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
     292:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     296:	d1fb      	bne.n	290 <ast_write_counter_value>
	}
	/* Set the new val value */
	ast->AST_CV = ast_counter;
     298:	6041      	str	r1, [r0, #4]
     29a:	6883      	ldr	r3, [r0, #8]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     29c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     2a0:	d1fb      	bne.n	29a <ast_write_counter_value+0xa>
	}
}
     2a2:	4770      	bx	lr

000002a4 <ast_set_config>:
{
     2a4:	b538      	push	{r3, r4, r5, lr}
	while (ast_is_clkbusy(ast)) {
     2a6:	f242 7310 	movw	r3, #10000	; 0x2710
	return (ast->AST_SR & AST_SR_CLKBUSY) != 0;
     2aa:	6882      	ldr	r2, [r0, #8]
     2ac:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
     2b0:	d003      	beq.n	2ba <ast_set_config+0x16>
		if (--time_out == 0) {
     2b2:	3b01      	subs	r3, #1
     2b4:	d1f9      	bne.n	2aa <ast_set_config+0x6>
			return 0;
     2b6:	2000      	movs	r0, #0
     2b8:	bd38      	pop	{r3, r4, r5, pc}
	ast->AST_CLOCK = ast_conf->osc_type << AST_CLOCK_CSSEL_Pos;
     2ba:	784b      	ldrb	r3, [r1, #1]
     2bc:	021b      	lsls	r3, r3, #8
     2be:	6403      	str	r3, [r0, #64]	; 0x40
	while (ast_is_clkbusy(ast)) {
     2c0:	f242 7310 	movw	r3, #10000	; 0x2710
     2c4:	6882      	ldr	r2, [r0, #8]
     2c6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
     2ca:	d003      	beq.n	2d4 <ast_set_config+0x30>
		if (--time_out == 0) {
     2cc:	3b01      	subs	r3, #1
     2ce:	d1f9      	bne.n	2c4 <ast_set_config+0x20>
			return 0;
     2d0:	2000      	movs	r0, #0
     2d2:	bd38      	pop	{r3, r4, r5, pc}
	ast->AST_CLOCK |= AST_CLOCK_CEN;
     2d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
     2d6:	f043 0301 	orr.w	r3, r3, #1
     2da:	6403      	str	r3, [r0, #64]	; 0x40
	while (ast_is_clkbusy(ast)) {
     2dc:	f242 7310 	movw	r3, #10000	; 0x2710
     2e0:	6882      	ldr	r2, [r0, #8]
     2e2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
     2e6:	d003      	beq.n	2f0 <ast_set_config+0x4c>
		if (--time_out == 0) {
     2e8:	3b01      	subs	r3, #1
     2ea:	d1f9      	bne.n	2e0 <ast_set_config+0x3c>
			return 0;
     2ec:	2000      	movs	r0, #0
}
     2ee:	bd38      	pop	{r3, r4, r5, pc}
	if (ast_conf->mode == AST_CALENDAR_MODE) {
     2f0:	780b      	ldrb	r3, [r1, #0]
     2f2:	2b01      	cmp	r3, #1
     2f4:	d01d      	beq.n	332 <ast_set_config+0x8e>
	if (ast_conf->mode == AST_COUNTER_MODE) {
     2f6:	780b      	ldrb	r3, [r1, #0]
     2f8:	b913      	cbnz	r3, 300 <ast_set_config+0x5c>
		ast->AST_CR = ast_conf->psel << AST_CR_PSEL_Pos;
     2fa:	788b      	ldrb	r3, [r1, #2]
     2fc:	041b      	lsls	r3, r3, #16
     2fe:	6003      	str	r3, [r0, #0]
	return (ast->AST_SR & AST_SR_BUSY) != 0;
     300:	6883      	ldr	r3, [r0, #8]
	while (ast_is_busy(ast)) {
     302:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     306:	d1fb      	bne.n	300 <ast_set_config+0x5c>
     308:	460d      	mov	r5, r1
     30a:	4604      	mov	r4, r0
	if (ast_conf->mode == AST_CALENDAR_MODE) {
     30c:	780b      	ldrb	r3, [r1, #0]
     30e:	2b01      	cmp	r3, #1
     310:	d015      	beq.n	33e <ast_set_config+0x9a>
	if (ast_conf->mode == AST_COUNTER_MODE) {
     312:	782b      	ldrb	r3, [r5, #0]
     314:	b1bb      	cbz	r3, 346 <ast_set_config+0xa2>
     316:	68a3      	ldr	r3, [r4, #8]
	while (ast_is_busy(ast)) {
     318:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     31c:	d1fb      	bne.n	316 <ast_set_config+0x72>
	ast->AST_CR |= AST_CR_EN;
     31e:	6823      	ldr	r3, [r4, #0]
     320:	f043 0301 	orr.w	r3, r3, #1
     324:	6023      	str	r3, [r4, #0]
     326:	68a3      	ldr	r3, [r4, #8]
	while (ast_is_busy(ast)) {
     328:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     32c:	d1fb      	bne.n	326 <ast_set_config+0x82>
	return 1;
     32e:	2001      	movs	r0, #1
     330:	bd38      	pop	{r3, r4, r5, pc}
		ast->AST_CR = AST_CR_CAL | ast_conf->psel << AST_CR_PSEL_Pos;
     332:	788b      	ldrb	r3, [r1, #2]
     334:	041b      	lsls	r3, r3, #16
     336:	f043 0304 	orr.w	r3, r3, #4
     33a:	6003      	str	r3, [r0, #0]
     33c:	e7db      	b.n	2f6 <ast_set_config+0x52>
		ast_write_calendar_value(ast, ast_conf->calendar);
     33e:	6889      	ldr	r1, [r1, #8]
     340:	4b03      	ldr	r3, [pc, #12]	; (350 <ast_set_config+0xac>)
     342:	4798      	blx	r3
     344:	e7e5      	b.n	312 <ast_set_config+0x6e>
		ast_write_counter_value(ast, ast_conf->counter);
     346:	6869      	ldr	r1, [r5, #4]
     348:	4620      	mov	r0, r4
     34a:	4b02      	ldr	r3, [pc, #8]	; (354 <ast_set_config+0xb0>)
     34c:	4798      	blx	r3
     34e:	e7e2      	b.n	316 <ast_set_config+0x72>
     350:	0000027d 	.word	0x0000027d
     354:	00000291 	.word	0x00000291

00000358 <ast_write_periodic0_value>:
     358:	6883      	ldr	r3, [r0, #8]
void ast_write_periodic0_value(
		Ast *ast,
		uint32_t pir)
{
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     35a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     35e:	d1fb      	bne.n	358 <ast_write_periodic0_value>
	}
	/* Set the periodic prescaler value */
	ast->AST_PIR0 = pir;
     360:	6301      	str	r1, [r0, #48]	; 0x30
     362:	6883      	ldr	r3, [r0, #8]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     364:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     368:	d1fb      	bne.n	362 <ast_write_periodic0_value+0xa>
	}
}
     36a:	4770      	bx	lr

0000036c <ast_enable_interrupt>:
     36c:	6883      	ldr	r3, [r0, #8]
void ast_enable_interrupt(
		Ast *ast,
		ast_interrupt_source_t source)
{
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     36e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     372:	d1fb      	bne.n	36c <ast_enable_interrupt>
	}

	switch (source) {
     374:	2904      	cmp	r1, #4
     376:	d807      	bhi.n	388 <ast_enable_interrupt+0x1c>
     378:	e8df f001 	tbb	[pc, r1]
     37c:	120f0b03 	.word	0x120f0b03
     380:	16          	.byte	0x16
     381:	00          	.byte	0x00
	case AST_INTERRUPT_ALARM:
		ast->AST_IER = AST_IER_ALARM0_1;
     382:	f44f 7380 	mov.w	r3, #256	; 0x100
     386:	6103      	str	r3, [r0, #16]
     388:	6883      	ldr	r3, [r0, #8]
	default:
		break;
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     38a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     38e:	d1fb      	bne.n	388 <ast_enable_interrupt+0x1c>
	}
}
     390:	4770      	bx	lr
		ast->AST_IER = AST_IER_PER0_1;
     392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     396:	6103      	str	r3, [r0, #16]
		break;
     398:	e7f6      	b.n	388 <ast_enable_interrupt+0x1c>
		ast->AST_IER = AST_IER_OVF_1;
     39a:	2301      	movs	r3, #1
     39c:	6103      	str	r3, [r0, #16]
		break;
     39e:	e7f3      	b.n	388 <ast_enable_interrupt+0x1c>
		ast->AST_IER = AST_IER_READY_1;
     3a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     3a4:	6103      	str	r3, [r0, #16]
		break;
     3a6:	e7ef      	b.n	388 <ast_enable_interrupt+0x1c>
		ast->AST_IER = AST_IER_CLKRDY_1;
     3a8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     3ac:	6103      	str	r3, [r0, #16]
		break;
     3ae:	e7eb      	b.n	388 <ast_enable_interrupt+0x1c>

000003b0 <ast_clear_interrupt_flag>:
     3b0:	6883      	ldr	r3, [r0, #8]
void ast_clear_interrupt_flag(
		Ast *ast,
		ast_interrupt_source_t source)
{
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
     3b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     3b6:	d1fb      	bne.n	3b0 <ast_clear_interrupt_flag>
	}

	switch (source) {
     3b8:	2904      	cmp	r1, #4
     3ba:	d807      	bhi.n	3cc <ast_clear_interrupt_flag+0x1c>
     3bc:	e8df f001 	tbb	[pc, r1]
     3c0:	120f0b03 	.word	0x120f0b03
     3c4:	16          	.byte	0x16
     3c5:	00          	.byte	0x00
	case AST_INTERRUPT_ALARM:
		ast->AST_SCR = AST_SCR_ALARM0;
     3c6:	f44f 7380 	mov.w	r3, #256	; 0x100
     3ca:	60c3      	str	r3, [r0, #12]
     3cc:	6883      	ldr	r3, [r0, #8]
	default:
		break;
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
     3ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
     3d2:	d1fb      	bne.n	3cc <ast_clear_interrupt_flag+0x1c>
	}
}
     3d4:	4770      	bx	lr
		ast->AST_SCR = AST_SCR_PER0;
     3d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     3da:	60c3      	str	r3, [r0, #12]
		break;
     3dc:	e7f6      	b.n	3cc <ast_clear_interrupt_flag+0x1c>
		ast->AST_SCR = AST_SCR_OVF;
     3de:	2301      	movs	r3, #1
     3e0:	60c3      	str	r3, [r0, #12]
		break;
     3e2:	e7f3      	b.n	3cc <ast_clear_interrupt_flag+0x1c>
		ast->AST_SCR = AST_SCR_READY;
     3e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     3e8:	60c3      	str	r3, [r0, #12]
		break;
     3ea:	e7ef      	b.n	3cc <ast_clear_interrupt_flag+0x1c>
		ast->AST_SCR = AST_SCR_CLKRDY;
     3ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     3f0:	60c3      	str	r3, [r0, #12]
		break;
     3f2:	e7eb      	b.n	3cc <ast_clear_interrupt_flag+0x1c>

000003f4 <ast_set_callback>:
		Ast *ast,
		ast_interrupt_source_t source,
		ast_callback_t callback,
		uint8_t irq_line,
		uint8_t irq_level)
{
     3f4:	b570      	push	{r4, r5, r6, lr}
     3f6:	f89d 5010 	ldrb.w	r5, [sp, #16]
	ast_callback_pointer[source] = callback;
     3fa:	4c12      	ldr	r4, [pc, #72]	; (444 <ast_set_callback+0x50>)
     3fc:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
     400:	b25c      	sxtb	r4, r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     402:	f003 021f 	and.w	r2, r3, #31
     406:	2601      	movs	r6, #1
     408:	4096      	lsls	r6, r2
     40a:	0962      	lsrs	r2, r4, #5
     40c:	0092      	lsls	r2, r2, #2
     40e:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
     412:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
     416:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
     41a:	2c00      	cmp	r4, #0
     41c:	db0b      	blt.n	436 <ast_set_callback+0x42>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     41e:	012d      	lsls	r5, r5, #4
     420:	b2ed      	uxtb	r5, r5
     422:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
     426:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
     42a:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     42e:	6016      	str	r6, [r2, #0]
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	ast_enable_interrupt(ast, source);
     430:	4b05      	ldr	r3, [pc, #20]	; (448 <ast_set_callback+0x54>)
     432:	4798      	blx	r3
     434:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     436:	f003 030f 	and.w	r3, r3, #15
     43a:	012d      	lsls	r5, r5, #4
     43c:	b2ed      	uxtb	r5, r5
     43e:	4c03      	ldr	r4, [pc, #12]	; (44c <ast_set_callback+0x58>)
     440:	54e5      	strb	r5, [r4, r3]
     442:	e7f4      	b.n	42e <ast_set_callback+0x3a>
     444:	20000a48 	.word	0x20000a48
     448:	0000036d 	.word	0x0000036d
     44c:	e000ed14 	.word	0xe000ed14

00000450 <AST_PER_Handler>:
/**
 * \brief Interrupt handler for AST periodic.
 */
#if defined(AST_PER_ENABLE) || defined(__DOXYGEN__)
void AST_PER_Handler(void)
{
     450:	b508      	push	{r3, lr}
	ast_callback_pointer[AST_INTERRUPT_PER]();
     452:	4b02      	ldr	r3, [pc, #8]	; (45c <AST_PER_Handler+0xc>)
     454:	685b      	ldr	r3, [r3, #4]
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	bf00      	nop
     45c:	20000a48 	.word	0x20000a48

00000460 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
     460:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
     462:	010b      	lsls	r3, r1, #4
     464:	4293      	cmp	r3, r2
     466:	d914      	bls.n	492 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     468:	00c9      	lsls	r1, r1, #3
     46a:	084b      	lsrs	r3, r1, #1
     46c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
     470:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
     474:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     476:	1e5c      	subs	r4, r3, #1
     478:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     47c:	428c      	cmp	r4, r1
     47e:	d901      	bls.n	484 <usart_set_async_baudrate+0x24>
		return 1;
     480:	2001      	movs	r0, #1
     482:	e017      	b.n	4b4 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
     484:	6841      	ldr	r1, [r0, #4]
     486:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
     48a:	6041      	str	r1, [r0, #4]
     48c:	e00c      	b.n	4a8 <usart_set_async_baudrate+0x48>
		return 1;
     48e:	2001      	movs	r0, #1
     490:	e010      	b.n	4b4 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     492:	0859      	lsrs	r1, r3, #1
     494:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
     498:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
     49c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     49e:	1e5c      	subs	r4, r3, #1
     4a0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     4a4:	428c      	cmp	r4, r1
     4a6:	d8f2      	bhi.n	48e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
     4a8:	0412      	lsls	r2, r2, #16
     4aa:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
     4ae:	431a      	orrs	r2, r3
     4b0:	6202      	str	r2, [r0, #32]

	return 0;
     4b2:	2000      	movs	r0, #0
}
     4b4:	bc10      	pop	{r4}
     4b6:	4770      	bx	lr

000004b8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
     4b8:	4b0a      	ldr	r3, [pc, #40]	; (4e4 <usart_reset+0x2c>)
     4ba:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
     4be:	2300      	movs	r3, #0
     4c0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
     4c2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
     4c4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
     4c6:	2388      	movs	r3, #136	; 0x88
     4c8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
     4ca:	2324      	movs	r3, #36	; 0x24
     4cc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
     4ce:	f44f 7380 	mov.w	r3, #256	; 0x100
     4d2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
     4d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     4d8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
     4da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     4de:	6003      	str	r3, [r0, #0]
     4e0:	4770      	bx	lr
     4e2:	bf00      	nop
     4e4:	55534100 	.word	0x55534100

000004e8 <usart_init_rs232>:
{
     4e8:	b570      	push	{r4, r5, r6, lr}
     4ea:	4605      	mov	r5, r0
     4ec:	460c      	mov	r4, r1
     4ee:	4616      	mov	r6, r2
	usart_reset(p_usart);
     4f0:	4b0f      	ldr	r3, [pc, #60]	; (530 <usart_init_rs232+0x48>)
     4f2:	4798      	blx	r3
	ul_reg_val = 0;
     4f4:	2200      	movs	r2, #0
     4f6:	4b0f      	ldr	r3, [pc, #60]	; (534 <usart_init_rs232+0x4c>)
     4f8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
     4fa:	b1a4      	cbz	r4, 526 <usart_init_rs232+0x3e>
     4fc:	4632      	mov	r2, r6
     4fe:	6821      	ldr	r1, [r4, #0]
     500:	4628      	mov	r0, r5
     502:	4b0d      	ldr	r3, [pc, #52]	; (538 <usart_init_rs232+0x50>)
     504:	4798      	blx	r3
     506:	4602      	mov	r2, r0
     508:	b978      	cbnz	r0, 52a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
     50a:	6863      	ldr	r3, [r4, #4]
     50c:	68a1      	ldr	r1, [r4, #8]
     50e:	430b      	orrs	r3, r1
     510:	6921      	ldr	r1, [r4, #16]
     512:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
     514:	68e1      	ldr	r1, [r4, #12]
     516:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
     518:	4906      	ldr	r1, [pc, #24]	; (534 <usart_init_rs232+0x4c>)
     51a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
     51c:	6869      	ldr	r1, [r5, #4]
     51e:	430b      	orrs	r3, r1
     520:	606b      	str	r3, [r5, #4]
}
     522:	4610      	mov	r0, r2
     524:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
     526:	2201      	movs	r2, #1
     528:	e7fb      	b.n	522 <usart_init_rs232+0x3a>
     52a:	2201      	movs	r2, #1
     52c:	e7f9      	b.n	522 <usart_init_rs232+0x3a>
     52e:	bf00      	nop
     530:	000004b9 	.word	0x000004b9
     534:	200009fc 	.word	0x200009fc
     538:	00000461 	.word	0x00000461

0000053c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
     53c:	2340      	movs	r3, #64	; 0x40
     53e:	6003      	str	r3, [r0, #0]
     540:	4770      	bx	lr

00000542 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
     542:	2310      	movs	r3, #16
     544:	6003      	str	r3, [r0, #0]
     546:	4770      	bx	lr

00000548 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
     548:	6943      	ldr	r3, [r0, #20]
     54a:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
     54e:	bf1d      	ittte	ne
     550:	f3c1 0108 	ubfxne	r1, r1, #0, #9
     554:	61c1      	strne	r1, [r0, #28]
	return 0;
     556:	2000      	movne	r0, #0
		return 1;
     558:	2001      	moveq	r0, #1
}
     55a:	4770      	bx	lr

0000055c <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
     55c:	6943      	ldr	r3, [r0, #20]
     55e:	f013 0f01 	tst.w	r3, #1
     562:	d005      	beq.n	570 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
     564:	6983      	ldr	r3, [r0, #24]
     566:	f3c3 0308 	ubfx	r3, r3, #0, #9
     56a:	600b      	str	r3, [r1, #0]
	return 0;
     56c:	2000      	movs	r0, #0
     56e:	4770      	bx	lr
		return 1;
     570:	2001      	movs	r0, #1
}
     572:	4770      	bx	lr

00000574 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     574:	3801      	subs	r0, #1
     576:	2802      	cmp	r0, #2
     578:	d815      	bhi.n	5a6 <_write+0x32>
{
     57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     57e:	460e      	mov	r6, r1
     580:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
     582:	b19a      	cbz	r2, 5ac <_write+0x38>
     584:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
     586:	f8df 8038 	ldr.w	r8, [pc, #56]	; 5c0 <_write+0x4c>
     58a:	4f0c      	ldr	r7, [pc, #48]	; (5bc <_write+0x48>)
     58c:	f8d8 0000 	ldr.w	r0, [r8]
     590:	f815 1b01 	ldrb.w	r1, [r5], #1
     594:	683b      	ldr	r3, [r7, #0]
     596:	4798      	blx	r3
     598:	2800      	cmp	r0, #0
     59a:	db0a      	blt.n	5b2 <_write+0x3e>
     59c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
     59e:	3c01      	subs	r4, #1
     5a0:	d1f4      	bne.n	58c <_write+0x18>
     5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
     5a6:	f04f 30ff 	mov.w	r0, #4294967295
     5aa:	4770      	bx	lr
	for (; len != 0; --len) {
     5ac:	4610      	mov	r0, r2
     5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
     5b2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5ba:	bf00      	nop
     5bc:	20000a5c 	.word	0x20000a5c
     5c0:	20000a60 	.word	0x20000a60

000005c4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
     5c4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     5c6:	0189      	lsls	r1, r1, #6
     5c8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
     5ca:	2402      	movs	r4, #2
     5cc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
     5ce:	f04f 31ff 	mov.w	r1, #4294967295
     5d2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
     5d4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
     5d6:	605a      	str	r2, [r3, #4]
}
     5d8:	bc10      	pop	{r4}
     5da:	4770      	bx	lr

000005dc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
     5dc:	0189      	lsls	r1, r1, #6
     5de:	2305      	movs	r3, #5
     5e0:	5043      	str	r3, [r0, r1]
     5e2:	4770      	bx	lr

000005e4 <tc_read_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RA;
     5e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     5e8:	6948      	ldr	r0, [r1, #20]
}
     5ea:	4770      	bx	lr

000005ec <tc_read_rb>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RB;
     5ec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     5f0:	6988      	ldr	r0, [r1, #24]
}
     5f2:	4770      	bx	lr

000005f4 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
     5f4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     5f8:	614a      	str	r2, [r1, #20]
     5fa:	4770      	bx	lr

000005fc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
     5fc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
     600:	61ca      	str	r2, [r1, #28]
     602:	4770      	bx	lr

00000604 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     604:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
     608:	624a      	str	r2, [r1, #36]	; 0x24
     60a:	4770      	bx	lr

0000060c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
     60c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
     610:	6a08      	ldr	r0, [r1, #32]
}
     612:	4770      	bx	lr

00000614 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
     614:	b5f0      	push	{r4, r5, r6, r7, lr}
     616:	b083      	sub	sp, #12
     618:	4604      	mov	r4, r0
     61a:	460e      	mov	r6, r1
	uint32_t val = 0;
     61c:	2300      	movs	r3, #0
     61e:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
     620:	4b1a      	ldr	r3, [pc, #104]	; (68c <usart_serial_getchar+0x78>)
     622:	4298      	cmp	r0, r3
     624:	d00a      	beq.n	63c <usart_serial_getchar+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
     626:	4b1a      	ldr	r3, [pc, #104]	; (690 <usart_serial_getchar+0x7c>)
     628:	4298      	cmp	r0, r3
     62a:	d011      	beq.n	650 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
     62c:	4b19      	ldr	r3, [pc, #100]	; (694 <usart_serial_getchar+0x80>)
     62e:	4298      	cmp	r0, r3
     630:	d018      	beq.n	664 <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
     632:	4b19      	ldr	r3, [pc, #100]	; (698 <usart_serial_getchar+0x84>)
     634:	429c      	cmp	r4, r3
     636:	d01f      	beq.n	678 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
     638:	b003      	add	sp, #12
     63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (usart_read(p_usart, &val));
     63c:	461f      	mov	r7, r3
     63e:	4d17      	ldr	r5, [pc, #92]	; (69c <usart_serial_getchar+0x88>)
     640:	a901      	add	r1, sp, #4
     642:	4638      	mov	r0, r7
     644:	47a8      	blx	r5
     646:	2800      	cmp	r0, #0
     648:	d1fa      	bne.n	640 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
     64a:	9b01      	ldr	r3, [sp, #4]
     64c:	7033      	strb	r3, [r6, #0]
     64e:	e7f0      	b.n	632 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
     650:	461d      	mov	r5, r3
     652:	4c12      	ldr	r4, [pc, #72]	; (69c <usart_serial_getchar+0x88>)
     654:	a901      	add	r1, sp, #4
     656:	4628      	mov	r0, r5
     658:	47a0      	blx	r4
     65a:	2800      	cmp	r0, #0
     65c:	d1fa      	bne.n	654 <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
     65e:	9b01      	ldr	r3, [sp, #4]
     660:	7033      	strb	r3, [r6, #0]
     662:	e7e9      	b.n	638 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
     664:	461d      	mov	r5, r3
     666:	4c0d      	ldr	r4, [pc, #52]	; (69c <usart_serial_getchar+0x88>)
     668:	a901      	add	r1, sp, #4
     66a:	4628      	mov	r0, r5
     66c:	47a0      	blx	r4
     66e:	2800      	cmp	r0, #0
     670:	d1fa      	bne.n	668 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
     672:	9b01      	ldr	r3, [sp, #4]
     674:	7033      	strb	r3, [r6, #0]
     676:	e7df      	b.n	638 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
     678:	461d      	mov	r5, r3
     67a:	4c08      	ldr	r4, [pc, #32]	; (69c <usart_serial_getchar+0x88>)
     67c:	a901      	add	r1, sp, #4
     67e:	4628      	mov	r0, r5
     680:	47a0      	blx	r4
     682:	2800      	cmp	r0, #0
     684:	d1fa      	bne.n	67c <usart_serial_getchar+0x68>
		*data = (uint8_t)(val & 0xFF);
     686:	9b01      	ldr	r3, [sp, #4]
     688:	7033      	strb	r3, [r6, #0]
}
     68a:	e7d5      	b.n	638 <usart_serial_getchar+0x24>
     68c:	40024000 	.word	0x40024000
     690:	40028000 	.word	0x40028000
     694:	4002c000 	.word	0x4002c000
     698:	40030000 	.word	0x40030000
     69c:	0000055d 	.word	0x0000055d

000006a0 <usart_serial_putchar>:
{
     6a0:	b570      	push	{r4, r5, r6, lr}
     6a2:	460c      	mov	r4, r1
	if (USART0 == p_usart) {
     6a4:	4b18      	ldr	r3, [pc, #96]	; (708 <usart_serial_putchar+0x68>)
     6a6:	4298      	cmp	r0, r3
     6a8:	d00a      	beq.n	6c0 <usart_serial_putchar+0x20>
	if (USART1 == p_usart) {
     6aa:	4b18      	ldr	r3, [pc, #96]	; (70c <usart_serial_putchar+0x6c>)
     6ac:	4298      	cmp	r0, r3
     6ae:	d010      	beq.n	6d2 <usart_serial_putchar+0x32>
	if (USART2 == p_usart) {
     6b0:	4b17      	ldr	r3, [pc, #92]	; (710 <usart_serial_putchar+0x70>)
     6b2:	4298      	cmp	r0, r3
     6b4:	d016      	beq.n	6e4 <usart_serial_putchar+0x44>
	if (USART3 == p_usart) {
     6b6:	4b17      	ldr	r3, [pc, #92]	; (714 <usart_serial_putchar+0x74>)
     6b8:	4298      	cmp	r0, r3
     6ba:	d01c      	beq.n	6f6 <usart_serial_putchar+0x56>
	return 0;
     6bc:	2000      	movs	r0, #0
}
     6be:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
     6c0:	461e      	mov	r6, r3
     6c2:	4d15      	ldr	r5, [pc, #84]	; (718 <usart_serial_putchar+0x78>)
     6c4:	4621      	mov	r1, r4
     6c6:	4630      	mov	r0, r6
     6c8:	47a8      	blx	r5
     6ca:	2800      	cmp	r0, #0
     6cc:	d1fa      	bne.n	6c4 <usart_serial_putchar+0x24>
		return 1;
     6ce:	2001      	movs	r0, #1
     6d0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
     6d2:	461e      	mov	r6, r3
     6d4:	4d10      	ldr	r5, [pc, #64]	; (718 <usart_serial_putchar+0x78>)
     6d6:	4621      	mov	r1, r4
     6d8:	4630      	mov	r0, r6
     6da:	47a8      	blx	r5
     6dc:	2800      	cmp	r0, #0
     6de:	d1fa      	bne.n	6d6 <usart_serial_putchar+0x36>
		return 1;
     6e0:	2001      	movs	r0, #1
     6e2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
     6e4:	461e      	mov	r6, r3
     6e6:	4d0c      	ldr	r5, [pc, #48]	; (718 <usart_serial_putchar+0x78>)
     6e8:	4621      	mov	r1, r4
     6ea:	4630      	mov	r0, r6
     6ec:	47a8      	blx	r5
     6ee:	2800      	cmp	r0, #0
     6f0:	d1fa      	bne.n	6e8 <usart_serial_putchar+0x48>
		return 1;
     6f2:	2001      	movs	r0, #1
     6f4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
     6f6:	461e      	mov	r6, r3
     6f8:	4d07      	ldr	r5, [pc, #28]	; (718 <usart_serial_putchar+0x78>)
     6fa:	4621      	mov	r1, r4
     6fc:	4630      	mov	r0, r6
     6fe:	47a8      	blx	r5
     700:	2800      	cmp	r0, #0
     702:	d1fa      	bne.n	6fa <usart_serial_putchar+0x5a>
		return 1;
     704:	2001      	movs	r0, #1
     706:	bd70      	pop	{r4, r5, r6, pc}
     708:	40024000 	.word	0x40024000
     70c:	40028000 	.word	0x40028000
     710:	4002c000 	.word	0x4002c000
     714:	40030000 	.word	0x40030000
     718:	00000549 	.word	0x00000549

0000071c <uart_init>:
 *  Author: Sebastian
 */ 
 #include "asf.h"

 void uart_init(void)
 {
     71c:	b570      	push	{r4, r5, r6, lr}
     71e:	b086      	sub	sp, #24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     720:	4c18      	ldr	r4, [pc, #96]	; (784 <uart_init+0x68>)
     722:	4b19      	ldr	r3, [pc, #100]	; (788 <uart_init+0x6c>)
     724:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     726:	4a19      	ldr	r2, [pc, #100]	; (78c <uart_init+0x70>)
     728:	4b19      	ldr	r3, [pc, #100]	; (790 <uart_init+0x74>)
     72a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     72c:	4a19      	ldr	r2, [pc, #100]	; (794 <uart_init+0x78>)
     72e:	4b1a      	ldr	r3, [pc, #104]	; (798 <uart_init+0x7c>)
     730:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
     732:	f44f 5316 	mov.w	r3, #9600	; 0x2580
     736:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
     738:	23c0      	movs	r3, #192	; 0xc0
     73a:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
     73c:	f44f 6300 	mov.w	r3, #2048	; 0x800
     740:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
     742:	2500      	movs	r5, #0
     744:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
     746:	9504      	str	r5, [sp, #16]
		sysclk_enable_peripheral_clock(p_usart);
     748:	4620      	mov	r0, r4
     74a:	4b14      	ldr	r3, [pc, #80]	; (79c <uart_init+0x80>)
     74c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
     74e:	4620      	mov	r0, r4
     750:	4b13      	ldr	r3, [pc, #76]	; (7a0 <uart_init+0x84>)
     752:	4798      	blx	r3
     754:	4602      	mov	r2, r0
     756:	4669      	mov	r1, sp
     758:	4620      	mov	r0, r4
     75a:	4b12      	ldr	r3, [pc, #72]	; (7a4 <uart_init+0x88>)
     75c:	4798      	blx	r3
		usart_enable_tx(p_usart);
     75e:	4620      	mov	r0, r4
     760:	4b11      	ldr	r3, [pc, #68]	; (7a8 <uart_init+0x8c>)
     762:	4798      	blx	r3
		usart_enable_rx(p_usart);
     764:	4620      	mov	r0, r4
     766:	4b11      	ldr	r3, [pc, #68]	; (7ac <uart_init+0x90>)
     768:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     76a:	4e11      	ldr	r6, [pc, #68]	; (7b0 <uart_init+0x94>)
     76c:	6833      	ldr	r3, [r6, #0]
     76e:	4629      	mov	r1, r5
     770:	6898      	ldr	r0, [r3, #8]
     772:	4c10      	ldr	r4, [pc, #64]	; (7b4 <uart_init+0x98>)
     774:	47a0      	blx	r4
	setbuf(stdin, NULL);
     776:	6833      	ldr	r3, [r6, #0]
     778:	4629      	mov	r1, r5
     77a:	6858      	ldr	r0, [r3, #4]
     77c:	47a0      	blx	r4
	//usart_enable_tx(USART_SERIAL);
	//usart_enable_rx(USART_SERIAL);

	/* Configure console UART. */
	stdio_serial_init(USART_SERIAL, &usart_console_settings);
     77e:	b006      	add	sp, #24
     780:	bd70      	pop	{r4, r5, r6, pc}
     782:	bf00      	nop
     784:	40028000 	.word	0x40028000
     788:	20000a60 	.word	0x20000a60
     78c:	000006a1 	.word	0x000006a1
     790:	20000a5c 	.word	0x20000a5c
     794:	00000615 	.word	0x00000615
     798:	20000a44 	.word	0x20000a44
     79c:	00000bc9 	.word	0x00000bc9
     7a0:	00000a19 	.word	0x00000a19
     7a4:	000004e9 	.word	0x000004e9
     7a8:	0000053d 	.word	0x0000053d
     7ac:	00000543 	.word	0x00000543
     7b0:	20000030 	.word	0x20000030
     7b4:	00001a51 	.word	0x00001a51

000007b8 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
     7b8:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7ba:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     7be:	fab3 f383 	clz	r3, r3
     7c2:	095b      	lsrs	r3, r3, #5
     7c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     7c6:	b672      	cpsid	i
     7c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     7cc:	2200      	movs	r2, #0
     7ce:	4b08      	ldr	r3, [pc, #32]	; (7f0 <osc_priv_enable_osc32+0x38>)
     7d0:	701a      	strb	r2, [r3, #0]
	return flags;
     7d2:	9a01      	ldr	r2, [sp, #4]
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
     7d4:	4b07      	ldr	r3, [pc, #28]	; (7f4 <osc_priv_enable_osc32+0x3c>)
     7d6:	4908      	ldr	r1, [pc, #32]	; (7f8 <osc_priv_enable_osc32+0x40>)
     7d8:	6199      	str	r1, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
     7da:	4908      	ldr	r1, [pc, #32]	; (7fc <osc_priv_enable_osc32+0x44>)
     7dc:	6219      	str	r1, [r3, #32]
	if (cpu_irq_is_enabled_flags(flags))
     7de:	b12a      	cbz	r2, 7ec <osc_priv_enable_osc32+0x34>
		cpu_irq_enable();
     7e0:	2201      	movs	r2, #1
     7e2:	4b03      	ldr	r3, [pc, #12]	; (7f0 <osc_priv_enable_osc32+0x38>)
     7e4:	701a      	strb	r2, [r3, #0]
     7e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     7ea:	b662      	cpsie	i
			| OSC32_MODE_VALUE
			| BSCIF_OSCCTRL32_EN1K
			| BSCIF_OSCCTRL32_EN32K
			| BSCIF_OSCCTRL32_OSC32EN;
	cpu_irq_restore(flags);
}
     7ec:	b002      	add	sp, #8
     7ee:	4770      	bx	lr
     7f0:	2000002c 	.word	0x2000002c
     7f4:	400f0400 	.word	0x400f0400
     7f8:	aa000020 	.word	0xaa000020
     7fc:	0005a10d 	.word	0x0005a10d

00000800 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
     800:	b470      	push	{r4, r5, r6}
     802:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     804:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     808:	fab3 f383 	clz	r3, r3
     80c:	095b      	lsrs	r3, r3, #5
     80e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     810:	b672      	cpsid	i
     812:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     816:	2200      	movs	r2, #0
     818:	4b0e      	ldr	r3, [pc, #56]	; (854 <sysclk_priv_enable_module+0x54>)
     81a:	701a      	strb	r2, [r3, #0]
	return flags;
     81c:	9d01      	ldr	r5, [sp, #4]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     81e:	0083      	lsls	r3, r0, #2
     820:	4c0d      	ldr	r4, [pc, #52]	; (858 <sysclk_priv_enable_module+0x58>)
     822:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
	mask |= 1U << module_index;
     826:	2201      	movs	r2, #1
     828:	fa02 f101 	lsl.w	r1, r2, r1
     82c:	4331      	orrs	r1, r6
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
     82e:	3320      	adds	r3, #32
     830:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     834:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     838:	4a08      	ldr	r2, [pc, #32]	; (85c <sysclk_priv_enable_module+0x5c>)
     83a:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
     83c:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
     840:	b12d      	cbz	r5, 84e <sysclk_priv_enable_module+0x4e>
		cpu_irq_enable();
     842:	2201      	movs	r2, #1
     844:	4b03      	ldr	r3, [pc, #12]	; (854 <sysclk_priv_enable_module+0x54>)
     846:	701a      	strb	r2, [r3, #0]
     848:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     84c:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     84e:	b003      	add	sp, #12
     850:	bc70      	pop	{r4, r5, r6}
     852:	4770      	bx	lr
     854:	2000002c 	.word	0x2000002c
     858:	400e0020 	.word	0x400e0020
     85c:	400e0000 	.word	0x400e0000

00000860 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
     860:	b470      	push	{r4, r5, r6}
     862:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     864:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     868:	fab3 f383 	clz	r3, r3
     86c:	095b      	lsrs	r3, r3, #5
     86e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     870:	b672      	cpsid	i
     872:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     876:	2200      	movs	r2, #0
     878:	4b0e      	ldr	r3, [pc, #56]	; (8b4 <sysclk_priv_disable_module+0x54>)
     87a:	701a      	strb	r2, [r3, #0]
	return flags;
     87c:	9e01      	ldr	r6, [sp, #4]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     87e:	0083      	lsls	r3, r0, #2
     880:	4d0d      	ldr	r5, [pc, #52]	; (8b8 <sysclk_priv_disable_module+0x58>)
     882:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
	mask &= ~(1U << module_index);
     886:	2401      	movs	r4, #1
     888:	fa04 f101 	lsl.w	r1, r4, r1
     88c:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
     890:	3320      	adds	r3, #32
     892:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     896:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     89a:	4a08      	ldr	r2, [pc, #32]	; (8bc <sysclk_priv_disable_module+0x5c>)
     89c:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
     89e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
     8a2:	b126      	cbz	r6, 8ae <sysclk_priv_disable_module+0x4e>
		cpu_irq_enable();
     8a4:	4b03      	ldr	r3, [pc, #12]	; (8b4 <sysclk_priv_disable_module+0x54>)
     8a6:	701c      	strb	r4, [r3, #0]
     8a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     8ac:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     8ae:	b003      	add	sp, #12
     8b0:	bc70      	pop	{r4, r5, r6}
     8b2:	4770      	bx	lr
     8b4:	2000002c 	.word	0x2000002c
     8b8:	400e0020 	.word	0x400e0020
     8bc:	400e0000 	.word	0x400e0000

000008c0 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
     8c0:	b530      	push	{r4, r5, lr}
     8c2:	b083      	sub	sp, #12
     8c4:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8c6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     8ca:	fab3 f383 	clz	r3, r3
     8ce:	095b      	lsrs	r3, r3, #5
     8d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     8d2:	b672      	cpsid	i
     8d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     8d8:	2200      	movs	r2, #0
     8da:	4b0c      	ldr	r3, [pc, #48]	; (90c <sysclk_enable_pba_module+0x4c>)
     8dc:	701a      	strb	r2, [r3, #0]
	return flags;
     8de:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     8e0:	4b0b      	ldr	r3, [pc, #44]	; (910 <sysclk_enable_pba_module+0x50>)
     8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     8e4:	b163      	cbz	r3, 900 <sysclk_enable_pba_module+0x40>
	if (cpu_irq_is_enabled_flags(flags))
     8e6:	b12d      	cbz	r5, 8f4 <sysclk_enable_pba_module+0x34>
		cpu_irq_enable();
     8e8:	2201      	movs	r2, #1
     8ea:	4b08      	ldr	r3, [pc, #32]	; (90c <sysclk_enable_pba_module+0x4c>)
     8ec:	701a      	strb	r2, [r3, #0]
     8ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     8f2:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
     8f4:	4621      	mov	r1, r4
     8f6:	2002      	movs	r0, #2
     8f8:	4b06      	ldr	r3, [pc, #24]	; (914 <sysclk_enable_pba_module+0x54>)
     8fa:	4798      	blx	r3
}
     8fc:	b003      	add	sp, #12
     8fe:	bd30      	pop	{r4, r5, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     900:	2105      	movs	r1, #5
     902:	2001      	movs	r0, #1
     904:	4b03      	ldr	r3, [pc, #12]	; (914 <sysclk_enable_pba_module+0x54>)
     906:	4798      	blx	r3
     908:	e7ed      	b.n	8e6 <sysclk_enable_pba_module+0x26>
     90a:	bf00      	nop
     90c:	2000002c 	.word	0x2000002c
     910:	400e0000 	.word	0x400e0000
     914:	00000801 	.word	0x00000801

00000918 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
     918:	b510      	push	{r4, lr}
     91a:	b082      	sub	sp, #8
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
     91c:	4601      	mov	r1, r0
     91e:	2002      	movs	r0, #2
     920:	4b0f      	ldr	r3, [pc, #60]	; (960 <sysclk_disable_pba_module+0x48>)
     922:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     924:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     928:	fab3 f383 	clz	r3, r3
     92c:	095b      	lsrs	r3, r3, #5
     92e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     930:	b672      	cpsid	i
     932:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     936:	2200      	movs	r2, #0
     938:	4b0a      	ldr	r3, [pc, #40]	; (964 <sysclk_disable_pba_module+0x4c>)
     93a:	701a      	strb	r2, [r3, #0]
	return flags;
     93c:	9c01      	ldr	r4, [sp, #4]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     93e:	4b0a      	ldr	r3, [pc, #40]	; (968 <sysclk_disable_pba_module+0x50>)
     940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     942:	b143      	cbz	r3, 956 <sysclk_disable_pba_module+0x3e>
	if (cpu_irq_is_enabled_flags(flags))
     944:	b12c      	cbz	r4, 952 <sysclk_disable_pba_module+0x3a>
		cpu_irq_enable();
     946:	2201      	movs	r2, #1
     948:	4b06      	ldr	r3, [pc, #24]	; (964 <sysclk_disable_pba_module+0x4c>)
     94a:	701a      	strb	r2, [r3, #0]
     94c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     950:	b662      	cpsie	i
		sysclk_disable_hsb_module(SYSCLK_PBA_BRIDGE);
	}

	cpu_irq_restore(flags);
}
     952:	b002      	add	sp, #8
     954:	bd10      	pop	{r4, pc}
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     956:	2105      	movs	r1, #5
     958:	2001      	movs	r0, #1
     95a:	4b01      	ldr	r3, [pc, #4]	; (960 <sysclk_disable_pba_module+0x48>)
     95c:	4798      	blx	r3
     95e:	e7f1      	b.n	944 <sysclk_disable_pba_module+0x2c>
     960:	00000861 	.word	0x00000861
     964:	2000002c 	.word	0x2000002c
     968:	400e0000 	.word	0x400e0000

0000096c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
     96c:	b530      	push	{r4, r5, lr}
     96e:	b083      	sub	sp, #12
     970:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     972:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     976:	fab3 f383 	clz	r3, r3
     97a:	095b      	lsrs	r3, r3, #5
     97c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     97e:	b672      	cpsid	i
     980:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     984:	2200      	movs	r2, #0
     986:	4b0c      	ldr	r3, [pc, #48]	; (9b8 <sysclk_enable_pbb_module+0x4c>)
     988:	701a      	strb	r2, [r3, #0]
	return flags;
     98a:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     98c:	4b0b      	ldr	r3, [pc, #44]	; (9bc <sysclk_enable_pbb_module+0x50>)
     98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     990:	b163      	cbz	r3, 9ac <sysclk_enable_pbb_module+0x40>
	if (cpu_irq_is_enabled_flags(flags))
     992:	b12d      	cbz	r5, 9a0 <sysclk_enable_pbb_module+0x34>
		cpu_irq_enable();
     994:	2201      	movs	r2, #1
     996:	4b08      	ldr	r3, [pc, #32]	; (9b8 <sysclk_enable_pbb_module+0x4c>)
     998:	701a      	strb	r2, [r3, #0]
     99a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     99e:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
     9a0:	4621      	mov	r1, r4
     9a2:	2003      	movs	r0, #3
     9a4:	4b06      	ldr	r3, [pc, #24]	; (9c0 <sysclk_enable_pbb_module+0x54>)
     9a6:	4798      	blx	r3
}
     9a8:	b003      	add	sp, #12
     9aa:	bd30      	pop	{r4, r5, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     9ac:	2106      	movs	r1, #6
     9ae:	2001      	movs	r0, #1
     9b0:	4b03      	ldr	r3, [pc, #12]	; (9c0 <sysclk_enable_pbb_module+0x54>)
     9b2:	4798      	blx	r3
     9b4:	e7ed      	b.n	992 <sysclk_enable_pbb_module+0x26>
     9b6:	bf00      	nop
     9b8:	2000002c 	.word	0x2000002c
     9bc:	400e0000 	.word	0x400e0000
     9c0:	00000801 	.word	0x00000801

000009c4 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
     9c4:	b510      	push	{r4, lr}
     9c6:	b082      	sub	sp, #8
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
     9c8:	4601      	mov	r1, r0
     9ca:	2003      	movs	r0, #3
     9cc:	4b0f      	ldr	r3, [pc, #60]	; (a0c <sysclk_disable_pbb_module+0x48>)
     9ce:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9d0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     9d4:	fab3 f383 	clz	r3, r3
     9d8:	095b      	lsrs	r3, r3, #5
     9da:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     9dc:	b672      	cpsid	i
     9de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     9e2:	2200      	movs	r2, #0
     9e4:	4b0a      	ldr	r3, [pc, #40]	; (a10 <sysclk_disable_pbb_module+0x4c>)
     9e6:	701a      	strb	r2, [r3, #0]
	return flags;
     9e8:	9c01      	ldr	r4, [sp, #4]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     9ea:	4b0a      	ldr	r3, [pc, #40]	; (a14 <sysclk_disable_pbb_module+0x50>)
     9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     9ee:	b143      	cbz	r3, a02 <sysclk_disable_pbb_module+0x3e>
	if (cpu_irq_is_enabled_flags(flags))
     9f0:	b12c      	cbz	r4, 9fe <sysclk_disable_pbb_module+0x3a>
		cpu_irq_enable();
     9f2:	2201      	movs	r2, #1
     9f4:	4b06      	ldr	r3, [pc, #24]	; (a10 <sysclk_disable_pbb_module+0x4c>)
     9f6:	701a      	strb	r2, [r3, #0]
     9f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9fc:	b662      	cpsie	i
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);
	}

	cpu_irq_restore(flags);
}
     9fe:	b002      	add	sp, #8
     a00:	bd10      	pop	{r4, pc}
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     a02:	2106      	movs	r1, #6
     a04:	2001      	movs	r0, #1
     a06:	4b01      	ldr	r3, [pc, #4]	; (a0c <sysclk_disable_pbb_module+0x48>)
     a08:	4798      	blx	r3
     a0a:	e7f1      	b.n	9f0 <sysclk_disable_pbb_module+0x2c>
     a0c:	00000861 	.word	0x00000861
     a10:	2000002c 	.word	0x2000002c
     a14:	400e0000 	.word	0x400e0000

00000a18 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
     a18:	4b5a      	ldr	r3, [pc, #360]	; (b84 <sysclk_get_peripheral_bus_hz+0x16c>)
     a1a:	4298      	cmp	r0, r3
     a1c:	d027      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a1e:	d858      	bhi.n	ad2 <sysclk_get_peripheral_bus_hz+0xba>
     a20:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     a24:	4298      	cmp	r0, r3
     a26:	d022      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a28:	d910      	bls.n	a4c <sysclk_get_peripheral_bus_hz+0x34>
     a2a:	4b57      	ldr	r3, [pc, #348]	; (b88 <sysclk_get_peripheral_bus_hz+0x170>)
     a2c:	4298      	cmp	r0, r3
     a2e:	d01e      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a30:	d935      	bls.n	a9e <sysclk_get_peripheral_bus_hz+0x86>
     a32:	4b56      	ldr	r3, [pc, #344]	; (b8c <sysclk_get_peripheral_bus_hz+0x174>)
     a34:	4298      	cmp	r0, r3
     a36:	d01a      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a38:	d843      	bhi.n	ac2 <sysclk_get_peripheral_bus_hz+0xaa>
     a3a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     a3e:	4298      	cmp	r0, r3
     a40:	d015      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     a46:	4298      	cmp	r0, r3
     a48:	d116      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     a4a:	e010      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a4c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     a50:	4298      	cmp	r0, r3
     a52:	d00c      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a54:	d812      	bhi.n	a7c <sysclk_get_peripheral_bus_hz+0x64>
     a56:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     a5a:	4298      	cmp	r0, r3
     a5c:	d007      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a5e:	d908      	bls.n	a72 <sysclk_get_peripheral_bus_hz+0x5a>
     a60:	4b4b      	ldr	r3, [pc, #300]	; (b90 <sysclk_get_peripheral_bus_hz+0x178>)
     a62:	4298      	cmp	r0, r3
     a64:	d003      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     a6a:	4298      	cmp	r0, r3
     a6c:	d104      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	#if !SAM4LS
	case LCDCA_ADDR:
	#endif
		return sysclk_get_pba_hz();
     a6e:	4849      	ldr	r0, [pc, #292]	; (b94 <sysclk_get_peripheral_bus_hz+0x17c>)

	default:
		Assert(false);
		return 0;
	}
}
     a70:	4770      	bx	lr
	switch ((uintptr_t)module) {
     a72:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     a76:	d0fa      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
		return 0;
     a78:	2000      	movs	r0, #0
     a7a:	4770      	bx	lr
	switch ((uintptr_t)module) {
     a7c:	4b46      	ldr	r3, [pc, #280]	; (b98 <sysclk_get_peripheral_bus_hz+0x180>)
     a7e:	4298      	cmp	r0, r3
     a80:	d0f5      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a82:	d907      	bls.n	a94 <sysclk_get_peripheral_bus_hz+0x7c>
     a84:	4b45      	ldr	r3, [pc, #276]	; (b9c <sysclk_get_peripheral_bus_hz+0x184>)
     a86:	4298      	cmp	r0, r3
     a88:	d0f1      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a8a:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     a8e:	4298      	cmp	r0, r3
     a90:	d1f2      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     a92:	e7ec      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a94:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     a98:	4298      	cmp	r0, r3
     a9a:	d1ed      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     a9c:	e7e7      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     a9e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     aa2:	4298      	cmp	r0, r3
     aa4:	d0e3      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     aa6:	d907      	bls.n	ab8 <sysclk_get_peripheral_bus_hz+0xa0>
     aa8:	4b3d      	ldr	r3, [pc, #244]	; (ba0 <sysclk_get_peripheral_bus_hz+0x188>)
     aaa:	4298      	cmp	r0, r3
     aac:	d0df      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     aae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     ab2:	4298      	cmp	r0, r3
     ab4:	d1e0      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     ab6:	e7da      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     ab8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     abc:	4298      	cmp	r0, r3
     abe:	d1db      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     ac0:	e7d5      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     ac2:	4b38      	ldr	r3, [pc, #224]	; (ba4 <sysclk_get_peripheral_bus_hz+0x18c>)
     ac4:	4298      	cmp	r0, r3
     ac6:	d0d2      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     ac8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     acc:	4298      	cmp	r0, r3
     ace:	d1d3      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     ad0:	e7cd      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     ad2:	4b35      	ldr	r3, [pc, #212]	; (ba8 <sysclk_get_peripheral_bus_hz+0x190>)
     ad4:	4298      	cmp	r0, r3
     ad6:	d0ca      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     ad8:	d910      	bls.n	afc <sysclk_get_peripheral_bus_hz+0xe4>
     ada:	4b34      	ldr	r3, [pc, #208]	; (bac <sysclk_get_peripheral_bus_hz+0x194>)
     adc:	4298      	cmp	r0, r3
     ade:	d0c6      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     ae0:	d934      	bls.n	b4c <sysclk_get_peripheral_bus_hz+0x134>
     ae2:	4b33      	ldr	r3, [pc, #204]	; (bb0 <sysclk_get_peripheral_bus_hz+0x198>)
     ae4:	4298      	cmp	r0, r3
     ae6:	d0c2      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     ae8:	d842      	bhi.n	b70 <sysclk_get_peripheral_bus_hz+0x158>
     aea:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     aee:	4298      	cmp	r0, r3
     af0:	d0bd      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     af6:	4298      	cmp	r0, r3
     af8:	d1be      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     afa:	e7b8      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     afc:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     b00:	4298      	cmp	r0, r3
     b02:	d0b4      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b04:	d811      	bhi.n	b2a <sysclk_get_peripheral_bus_hz+0x112>
     b06:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     b0a:	4298      	cmp	r0, r3
     b0c:	d0af      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b0e:	d907      	bls.n	b20 <sysclk_get_peripheral_bus_hz+0x108>
     b10:	4b28      	ldr	r3, [pc, #160]	; (bb4 <sysclk_get_peripheral_bus_hz+0x19c>)
     b12:	4298      	cmp	r0, r3
     b14:	d0ab      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     b1a:	4298      	cmp	r0, r3
     b1c:	d1ac      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     b1e:	e7a6      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b20:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     b24:	4298      	cmp	r0, r3
     b26:	d1a7      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     b28:	e7a1      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b2a:	4b23      	ldr	r3, [pc, #140]	; (bb8 <sysclk_get_peripheral_bus_hz+0x1a0>)
     b2c:	4298      	cmp	r0, r3
     b2e:	d09e      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b30:	d907      	bls.n	b42 <sysclk_get_peripheral_bus_hz+0x12a>
     b32:	4b22      	ldr	r3, [pc, #136]	; (bbc <sysclk_get_peripheral_bus_hz+0x1a4>)
     b34:	4298      	cmp	r0, r3
     b36:	d09a      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     b3c:	4298      	cmp	r0, r3
     b3e:	d19b      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     b40:	e795      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b42:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     b46:	4298      	cmp	r0, r3
     b48:	d196      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     b4a:	e790      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b4c:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     b50:	4298      	cmp	r0, r3
     b52:	d08c      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b54:	d907      	bls.n	b66 <sysclk_get_peripheral_bus_hz+0x14e>
     b56:	4b1a      	ldr	r3, [pc, #104]	; (bc0 <sysclk_get_peripheral_bus_hz+0x1a8>)
     b58:	4298      	cmp	r0, r3
     b5a:	d088      	beq.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     b60:	4298      	cmp	r0, r3
     b62:	d189      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     b64:	e783      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b66:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     b6a:	4298      	cmp	r0, r3
     b6c:	d184      	bne.n	a78 <sysclk_get_peripheral_bus_hz+0x60>
     b6e:	e77e      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b70:	4b14      	ldr	r3, [pc, #80]	; (bc4 <sysclk_get_peripheral_bus_hz+0x1ac>)
     b72:	4298      	cmp	r0, r3
     b74:	f43f af7b 	beq.w	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     b7c:	4298      	cmp	r0, r3
     b7e:	f47f af7b 	bne.w	a78 <sysclk_get_peripheral_bus_hz+0x60>
     b82:	e774      	b.n	a6e <sysclk_get_peripheral_bus_hz+0x56>
     b84:	40078000 	.word	0x40078000
     b88:	40040000 	.word	0x40040000
     b8c:	40068000 	.word	0x40068000
     b90:	40010000 	.word	0x40010000
     b94:	0001c138 	.word	0x0001c138
     b98:	4001c000 	.word	0x4001c000
     b9c:	4001c400 	.word	0x4001c400
     ba0:	40038000 	.word	0x40038000
     ba4:	4006c000 	.word	0x4006c000
     ba8:	400e0000 	.word	0x400e0000
     bac:	400f0000 	.word	0x400f0000
     bb0:	400f0c00 	.word	0x400f0c00
     bb4:	400a0000 	.word	0x400a0000
     bb8:	400a4000 	.word	0x400a4000
     bbc:	400a5000 	.word	0x400a5000
     bc0:	400e0c00 	.word	0x400e0c00
     bc4:	400f1000 	.word	0x400f1000

00000bc8 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
     bc8:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     bca:	4bae      	ldr	r3, [pc, #696]	; (e84 <sysclk_enable_peripheral_clock+0x2bc>)
     bcc:	4298      	cmp	r0, r3
     bce:	f000 81a0 	beq.w	f12 <sysclk_enable_peripheral_clock+0x34a>
     bd2:	d924      	bls.n	c1e <sysclk_enable_peripheral_clock+0x56>
     bd4:	4bac      	ldr	r3, [pc, #688]	; (e88 <sysclk_enable_peripheral_clock+0x2c0>)
     bd6:	4298      	cmp	r0, r3
     bd8:	f000 81c3 	beq.w	f62 <sysclk_enable_peripheral_clock+0x39a>
     bdc:	f200 80e6 	bhi.w	dac <sysclk_enable_peripheral_clock+0x1e4>
     be0:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     be4:	4298      	cmp	r0, r3
     be6:	f000 81a4 	beq.w	f32 <sysclk_enable_peripheral_clock+0x36a>
     bea:	f240 80b0 	bls.w	d4e <sysclk_enable_peripheral_clock+0x186>
     bee:	4ba7      	ldr	r3, [pc, #668]	; (e8c <sysclk_enable_peripheral_clock+0x2c4>)
     bf0:	4298      	cmp	r0, r3
     bf2:	f000 81aa 	beq.w	f4a <sysclk_enable_peripheral_clock+0x382>
     bf6:	f200 80cb 	bhi.w	d90 <sysclk_enable_peripheral_clock+0x1c8>
     bfa:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
     bfe:	4298      	cmp	r0, r3
     c00:	f000 819b 	beq.w	f3a <sysclk_enable_peripheral_clock+0x372>
     c04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     c08:	4298      	cmp	r0, r3
     c0a:	f040 80c0 	bne.w	d8e <sysclk_enable_peripheral_clock+0x1c6>
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     c0e:	2104      	movs	r1, #4
     c10:	2001      	movs	r0, #1
     c12:	4b9f      	ldr	r3, [pc, #636]	; (e90 <sysclk_enable_peripheral_clock+0x2c8>)
     c14:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
		break;

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
     c16:	2004      	movs	r0, #4
     c18:	4b9e      	ldr	r3, [pc, #632]	; (e94 <sysclk_enable_peripheral_clock+0x2cc>)
     c1a:	4798      	blx	r3
		break;
     c1c:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     c1e:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     c22:	4298      	cmp	r0, r3
     c24:	f000 8122 	beq.w	e6c <sysclk_enable_peripheral_clock+0x2a4>
     c28:	d916      	bls.n	c58 <sysclk_enable_peripheral_clock+0x90>
     c2a:	4b9b      	ldr	r3, [pc, #620]	; (e98 <sysclk_enable_peripheral_clock+0x2d0>)
     c2c:	4298      	cmp	r0, r3
     c2e:	f000 8160 	beq.w	ef2 <sysclk_enable_peripheral_clock+0x32a>
     c32:	d95b      	bls.n	cec <sysclk_enable_peripheral_clock+0x124>
     c34:	4b99      	ldr	r3, [pc, #612]	; (e9c <sysclk_enable_peripheral_clock+0x2d4>)
     c36:	4298      	cmp	r0, r3
     c38:	f000 8163 	beq.w	f02 <sysclk_enable_peripheral_clock+0x33a>
     c3c:	d87a      	bhi.n	d34 <sysclk_enable_peripheral_clock+0x16c>
     c3e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     c42:	4298      	cmp	r0, r3
     c44:	f000 8159 	beq.w	efa <sysclk_enable_peripheral_clock+0x332>
     c48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     c4c:	4298      	cmp	r0, r3
     c4e:	d170      	bne.n	d32 <sysclk_enable_peripheral_clock+0x16a>
		sysclk_enable_pba_module(SYSCLK_ABDACB);
     c50:	2010      	movs	r0, #16
     c52:	4b93      	ldr	r3, [pc, #588]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     c54:	4798      	blx	r3
		break;
     c56:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     c58:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     c5c:	4298      	cmp	r0, r3
     c5e:	f000 80f9 	beq.w	e54 <sysclk_enable_peripheral_clock+0x28c>
     c62:	d821      	bhi.n	ca8 <sysclk_enable_peripheral_clock+0xe0>
     c64:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     c68:	4298      	cmp	r0, r3
     c6a:	f000 80e4 	beq.w	e36 <sysclk_enable_peripheral_clock+0x26e>
     c6e:	d912      	bls.n	c96 <sysclk_enable_peripheral_clock+0xce>
     c70:	4b8c      	ldr	r3, [pc, #560]	; (ea4 <sysclk_enable_peripheral_clock+0x2dc>)
     c72:	4298      	cmp	r0, r3
     c74:	f000 80e3 	beq.w	e3e <sysclk_enable_peripheral_clock+0x276>
     c78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     c7c:	4298      	cmp	r0, r3
     c7e:	d112      	bne.n	ca6 <sysclk_enable_peripheral_clock+0xde>
		sysclk_enable_pba_module(SYSCLK_TC1);
     c80:	2003      	movs	r0, #3
     c82:	4b87      	ldr	r3, [pc, #540]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     c84:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     c86:	4b80      	ldr	r3, [pc, #512]	; (e88 <sysclk_enable_peripheral_clock+0x2c0>)
     c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     c8a:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     c8e:	4986      	ldr	r1, [pc, #536]	; (ea8 <sysclk_enable_peripheral_clock+0x2e0>)
     c90:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     c92:	641a      	str	r2, [r3, #64]	; 0x40
     c94:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     c96:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     c9a:	d103      	bne.n	ca4 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_pba_module(SYSCLK_IISC);
     c9c:	2000      	movs	r0, #0
     c9e:	4b80      	ldr	r3, [pc, #512]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     ca0:	4798      	blx	r3
		break;
     ca2:	bd08      	pop	{r3, pc}
     ca4:	bd08      	pop	{r3, pc}
     ca6:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     ca8:	4b80      	ldr	r3, [pc, #512]	; (eac <sysclk_enable_peripheral_clock+0x2e4>)
     caa:	4298      	cmp	r0, r3
     cac:	f000 80d6 	beq.w	e5c <sysclk_enable_peripheral_clock+0x294>
     cb0:	d912      	bls.n	cd8 <sysclk_enable_peripheral_clock+0x110>
     cb2:	4b7f      	ldr	r3, [pc, #508]	; (eb0 <sysclk_enable_peripheral_clock+0x2e8>)
     cb4:	4298      	cmp	r0, r3
     cb6:	f000 80d5 	beq.w	e64 <sysclk_enable_peripheral_clock+0x29c>
     cba:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     cbe:	4298      	cmp	r0, r3
     cc0:	d113      	bne.n	cea <sysclk_enable_peripheral_clock+0x122>
		sysclk_enable_pba_module(SYSCLK_USART0);
     cc2:	2008      	movs	r0, #8
     cc4:	4b76      	ldr	r3, [pc, #472]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     cc6:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
     cc8:	4b6f      	ldr	r3, [pc, #444]	; (e88 <sysclk_enable_peripheral_clock+0x2c0>)
     cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     ccc:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     cd0:	4975      	ldr	r1, [pc, #468]	; (ea8 <sysclk_enable_peripheral_clock+0x2e0>)
     cd2:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
     cd4:	641a      	str	r2, [r3, #64]	; 0x40
     cd6:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     cd8:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     cdc:	4298      	cmp	r0, r3
     cde:	d103      	bne.n	ce8 <sysclk_enable_peripheral_clock+0x120>
		sysclk_enable_pba_module(SYSCLK_TWIS0);
     ce0:	2005      	movs	r0, #5
     ce2:	4b6f      	ldr	r3, [pc, #444]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     ce4:	4798      	blx	r3
		break;
     ce6:	bd08      	pop	{r3, pc}
     ce8:	bd08      	pop	{r3, pc}
     cea:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     cec:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     cf0:	4298      	cmp	r0, r3
     cf2:	f000 80ef 	beq.w	ed4 <sysclk_enable_peripheral_clock+0x30c>
     cf6:	d90b      	bls.n	d10 <sysclk_enable_peripheral_clock+0x148>
     cf8:	4b6e      	ldr	r3, [pc, #440]	; (eb4 <sysclk_enable_peripheral_clock+0x2ec>)
     cfa:	4298      	cmp	r0, r3
     cfc:	f000 80f5 	beq.w	eea <sysclk_enable_peripheral_clock+0x322>
     d00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     d04:	4298      	cmp	r0, r3
     d06:	d113      	bne.n	d30 <sysclk_enable_peripheral_clock+0x168>
		sysclk_enable_pba_module(SYSCLK_DACC);
     d08:	200d      	movs	r0, #13
     d0a:	4b65      	ldr	r3, [pc, #404]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     d0c:	4798      	blx	r3
		break;
     d0e:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     d10:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     d14:	4298      	cmp	r0, r3
     d16:	d10a      	bne.n	d2e <sysclk_enable_peripheral_clock+0x166>
		sysclk_enable_pba_module(SYSCLK_USART2);
     d18:	200a      	movs	r0, #10
     d1a:	4b61      	ldr	r3, [pc, #388]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     d1c:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
     d1e:	4b5a      	ldr	r3, [pc, #360]	; (e88 <sysclk_enable_peripheral_clock+0x2c0>)
     d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     d22:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     d26:	4960      	ldr	r1, [pc, #384]	; (ea8 <sysclk_enable_peripheral_clock+0x2e0>)
     d28:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
     d2a:	641a      	str	r2, [r3, #64]	; 0x40
     d2c:	bd08      	pop	{r3, pc}
     d2e:	bd08      	pop	{r3, pc}
     d30:	bd08      	pop	{r3, pc}
     d32:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     d34:	4b60      	ldr	r3, [pc, #384]	; (eb8 <sysclk_enable_peripheral_clock+0x2f0>)
     d36:	4298      	cmp	r0, r3
     d38:	f000 80e7 	beq.w	f0a <sysclk_enable_peripheral_clock+0x342>
     d3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     d40:	4298      	cmp	r0, r3
     d42:	d103      	bne.n	d4c <sysclk_enable_peripheral_clock+0x184>
		sysclk_enable_pba_module(SYSCLK_CATB);
     d44:	2013      	movs	r0, #19
     d46:	4b56      	ldr	r3, [pc, #344]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     d48:	4798      	blx	r3
		break;
     d4a:	bd08      	pop	{r3, pc}
     d4c:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     d4e:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     d52:	4298      	cmp	r0, r3
     d54:	f000 80e1 	beq.w	f1a <sysclk_enable_peripheral_clock+0x352>
     d58:	d90f      	bls.n	d7a <sysclk_enable_peripheral_clock+0x1b2>
     d5a:	4b58      	ldr	r3, [pc, #352]	; (ebc <sysclk_enable_peripheral_clock+0x2f4>)
     d5c:	4298      	cmp	r0, r3
     d5e:	f000 80e0 	beq.w	f22 <sysclk_enable_peripheral_clock+0x35a>
     d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     d66:	4298      	cmp	r0, r3
     d68:	d110      	bne.n	d8c <sysclk_enable_peripheral_clock+0x1c4>
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     d6a:	2102      	movs	r1, #2
     d6c:	2001      	movs	r0, #1
     d6e:	4b48      	ldr	r3, [pc, #288]	; (e90 <sysclk_enable_peripheral_clock+0x2c8>)
     d70:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
     d72:	2001      	movs	r0, #1
     d74:	4b47      	ldr	r3, [pc, #284]	; (e94 <sysclk_enable_peripheral_clock+0x2cc>)
     d76:	4798      	blx	r3
		break;
     d78:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     d7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     d7e:	4298      	cmp	r0, r3
     d80:	d103      	bne.n	d8a <sysclk_enable_peripheral_clock+0x1c2>
		sysclk_enable_pba_module(SYSCLK_TWIM3);
     d82:	2016      	movs	r0, #22
     d84:	4b46      	ldr	r3, [pc, #280]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     d86:	4798      	blx	r3
		break;
     d88:	bd08      	pop	{r3, pc}
     d8a:	bd08      	pop	{r3, pc}
     d8c:	bd08      	pop	{r3, pc}
     d8e:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
     d90:	4b4b      	ldr	r3, [pc, #300]	; (ec0 <sysclk_enable_peripheral_clock+0x2f8>)
     d92:	4298      	cmp	r0, r3
     d94:	f000 80e1 	beq.w	f5a <sysclk_enable_peripheral_clock+0x392>
     d98:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
     d9c:	4298      	cmp	r0, r3
     d9e:	d104      	bne.n	daa <sysclk_enable_peripheral_clock+0x1e2>
     da0:	2109      	movs	r1, #9
     da2:	2001      	movs	r0, #1
     da4:	4b3a      	ldr	r3, [pc, #232]	; (e90 <sysclk_enable_peripheral_clock+0x2c8>)
     da6:	4798      	blx	r3
     da8:	bd08      	pop	{r3, pc}
     daa:	bd08      	pop	{r3, pc}
     dac:	4b45      	ldr	r3, [pc, #276]	; (ec4 <sysclk_enable_peripheral_clock+0x2fc>)
     dae:	4298      	cmp	r0, r3
     db0:	f000 80e6 	beq.w	f80 <sysclk_enable_peripheral_clock+0x3b8>
     db4:	d912      	bls.n	ddc <sysclk_enable_peripheral_clock+0x214>
     db6:	4b44      	ldr	r3, [pc, #272]	; (ec8 <sysclk_enable_peripheral_clock+0x300>)
     db8:	4298      	cmp	r0, r3
     dba:	f000 80eb 	beq.w	f94 <sysclk_enable_peripheral_clock+0x3cc>
     dbe:	d82c      	bhi.n	e1a <sysclk_enable_peripheral_clock+0x252>
     dc0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     dc4:	4298      	cmp	r0, r3
     dc6:	f000 80e0 	beq.w	f8a <sysclk_enable_peripheral_clock+0x3c2>
     dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     dce:	4298      	cmp	r0, r3
     dd0:	d122      	bne.n	e18 <sysclk_enable_peripheral_clock+0x250>
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
     dd2:	2102      	movs	r1, #2
     dd4:	2005      	movs	r0, #5
     dd6:	4b2e      	ldr	r3, [pc, #184]	; (e90 <sysclk_enable_peripheral_clock+0x2c8>)
     dd8:	4798      	blx	r3
     dda:	bd08      	pop	{r3, pc}
     ddc:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     de0:	4298      	cmp	r0, r3
     de2:	f000 80c3 	beq.w	f6c <sysclk_enable_peripheral_clock+0x3a4>
     de6:	d90c      	bls.n	e02 <sysclk_enable_peripheral_clock+0x23a>
     de8:	4b38      	ldr	r3, [pc, #224]	; (ecc <sysclk_enable_peripheral_clock+0x304>)
     dea:	4298      	cmp	r0, r3
     dec:	f000 80c3 	beq.w	f76 <sysclk_enable_peripheral_clock+0x3ae>
     df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     df4:	4298      	cmp	r0, r3
     df6:	d10e      	bne.n	e16 <sysclk_enable_peripheral_clock+0x24e>
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
     df8:	2104      	movs	r1, #4
     dfa:	4608      	mov	r0, r1
     dfc:	4b24      	ldr	r3, [pc, #144]	; (e90 <sysclk_enable_peripheral_clock+0x2c8>)
     dfe:	4798      	blx	r3
     e00:	bd08      	pop	{r3, pc}
     e02:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     e06:	4298      	cmp	r0, r3
     e08:	d104      	bne.n	e14 <sysclk_enable_peripheral_clock+0x24c>
     e0a:	2101      	movs	r1, #1
     e0c:	2004      	movs	r0, #4
     e0e:	4b20      	ldr	r3, [pc, #128]	; (e90 <sysclk_enable_peripheral_clock+0x2c8>)
     e10:	4798      	blx	r3
     e12:	bd08      	pop	{r3, pc}
     e14:	bd08      	pop	{r3, pc}
     e16:	bd08      	pop	{r3, pc}
     e18:	bd08      	pop	{r3, pc}
     e1a:	4b2d      	ldr	r3, [pc, #180]	; (ed0 <sysclk_enable_peripheral_clock+0x308>)
     e1c:	4298      	cmp	r0, r3
     e1e:	f000 80be 	beq.w	f9e <sysclk_enable_peripheral_clock+0x3d6>
     e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     e26:	4298      	cmp	r0, r3
     e28:	d104      	bne.n	e34 <sysclk_enable_peripheral_clock+0x26c>
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
     e2a:	2105      	movs	r1, #5
     e2c:	4608      	mov	r0, r1
     e2e:	4b18      	ldr	r3, [pc, #96]	; (e90 <sysclk_enable_peripheral_clock+0x2c8>)
     e30:	4798      	blx	r3
     e32:	bd08      	pop	{r3, pc}
     e34:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_SPI);
     e36:	2001      	movs	r0, #1
     e38:	4b19      	ldr	r3, [pc, #100]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     e3a:	4798      	blx	r3
		break;
     e3c:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TC0);
     e3e:	2002      	movs	r0, #2
     e40:	4b17      	ldr	r3, [pc, #92]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     e42:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
     e44:	4b10      	ldr	r3, [pc, #64]	; (e88 <sysclk_enable_peripheral_clock+0x2c0>)
     e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     e48:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     e4c:	4916      	ldr	r1, [pc, #88]	; (ea8 <sysclk_enable_peripheral_clock+0x2e0>)
     e4e:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
     e50:	641a      	str	r2, [r3, #64]	; 0x40
     e52:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM0);
     e54:	2004      	movs	r0, #4
     e56:	4b12      	ldr	r3, [pc, #72]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     e58:	4798      	blx	r3
		break;
     e5a:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM1);
     e5c:	2006      	movs	r0, #6
     e5e:	4b10      	ldr	r3, [pc, #64]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     e60:	4798      	blx	r3
		break;
     e62:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIS1);
     e64:	2007      	movs	r0, #7
     e66:	4b0e      	ldr	r3, [pc, #56]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     e68:	4798      	blx	r3
		break;
     e6a:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_USART1);
     e6c:	2009      	movs	r0, #9
     e6e:	4b0c      	ldr	r3, [pc, #48]	; (ea0 <sysclk_enable_peripheral_clock+0x2d8>)
     e70:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
     e72:	4b05      	ldr	r3, [pc, #20]	; (e88 <sysclk_enable_peripheral_clock+0x2c0>)
     e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     e76:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     e7a:	490b      	ldr	r1, [pc, #44]	; (ea8 <sysclk_enable_peripheral_clock+0x2e0>)
     e7c:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
     e7e:	641a      	str	r2, [r3, #64]	; 0x40
     e80:	bd08      	pop	{r3, pc}
     e82:	bf00      	nop
     e84:	40078000 	.word	0x40078000
     e88:	400e0000 	.word	0x400e0000
     e8c:	400a5000 	.word	0x400a5000
     e90:	00000801 	.word	0x00000801
     e94:	0000096d 	.word	0x0000096d
     e98:	40040000 	.word	0x40040000
     e9c:	40068000 	.word	0x40068000
     ea0:	000008c1 	.word	0x000008c1
     ea4:	40010000 	.word	0x40010000
     ea8:	aa000040 	.word	0xaa000040
     eac:	4001c000 	.word	0x4001c000
     eb0:	4001c400 	.word	0x4001c400
     eb4:	40038000 	.word	0x40038000
     eb8:	4006c000 	.word	0x4006c000
     ebc:	400a0000 	.word	0x400a0000
     ec0:	400a6000 	.word	0x400a6000
     ec4:	400f0000 	.word	0x400f0000
     ec8:	400f0c00 	.word	0x400f0c00
     ecc:	400e0c00 	.word	0x400e0c00
     ed0:	400f1000 	.word	0x400f1000
		sysclk_enable_pba_module(SYSCLK_USART3);
     ed4:	200b      	movs	r0, #11
     ed6:	4b34      	ldr	r3, [pc, #208]	; (fa8 <sysclk_enable_peripheral_clock+0x3e0>)
     ed8:	4798      	blx	r3
	temp_mask = PM->PM_PBADIVMASK;
     eda:	4b34      	ldr	r3, [pc, #208]	; (fac <sysclk_enable_peripheral_clock+0x3e4>)
     edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     ede:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     ee2:	4933      	ldr	r1, [pc, #204]	; (fb0 <sysclk_enable_peripheral_clock+0x3e8>)
     ee4:	6599      	str	r1, [r3, #88]	; 0x58
	PM->PM_PBADIVMASK = temp_mask;
     ee6:	641a      	str	r2, [r3, #64]	; 0x40
     ee8:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
     eea:	200c      	movs	r0, #12
     eec:	4b2e      	ldr	r3, [pc, #184]	; (fa8 <sysclk_enable_peripheral_clock+0x3e0>)
     eee:	4798      	blx	r3
		break;
     ef0:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_ACIFC);
     ef2:	200e      	movs	r0, #14
     ef4:	4b2c      	ldr	r3, [pc, #176]	; (fa8 <sysclk_enable_peripheral_clock+0x3e0>)
     ef6:	4798      	blx	r3
		break;
     ef8:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_GLOC);
     efa:	200f      	movs	r0, #15
     efc:	4b2a      	ldr	r3, [pc, #168]	; (fa8 <sysclk_enable_peripheral_clock+0x3e0>)
     efe:	4798      	blx	r3
		break;
     f00:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TRNG);
     f02:	2011      	movs	r0, #17
     f04:	4b28      	ldr	r3, [pc, #160]	; (fa8 <sysclk_enable_peripheral_clock+0x3e0>)
     f06:	4798      	blx	r3
		break;
     f08:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_PARC);
     f0a:	2012      	movs	r0, #18
     f0c:	4b26      	ldr	r3, [pc, #152]	; (fa8 <sysclk_enable_peripheral_clock+0x3e0>)
     f0e:	4798      	blx	r3
		break;
     f10:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_TWIM2);
     f12:	2015      	movs	r0, #21
     f14:	4b24      	ldr	r3, [pc, #144]	; (fa8 <sysclk_enable_peripheral_clock+0x3e0>)
     f16:	4798      	blx	r3
		break;
     f18:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_module(SYSCLK_LCDCA);
     f1a:	2017      	movs	r0, #23
     f1c:	4b22      	ldr	r3, [pc, #136]	; (fa8 <sysclk_enable_peripheral_clock+0x3e0>)
     f1e:	4798      	blx	r3
		break;
     f20:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     f22:	2101      	movs	r1, #1
     f24:	4608      	mov	r0, r1
     f26:	4b23      	ldr	r3, [pc, #140]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f28:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
     f2a:	2000      	movs	r0, #0
     f2c:	4b22      	ldr	r3, [pc, #136]	; (fb8 <sysclk_enable_peripheral_clock+0x3f0>)
     f2e:	4798      	blx	r3
		break;
     f30:	bd08      	pop	{r3, pc}
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
     f32:	2002      	movs	r0, #2
     f34:	4b20      	ldr	r3, [pc, #128]	; (fb8 <sysclk_enable_peripheral_clock+0x3f0>)
     f36:	4798      	blx	r3
		break;
     f38:	bd08      	pop	{r3, pc}
     f3a:	2100      	movs	r1, #0
     f3c:	2001      	movs	r0, #1
     f3e:	4b1d      	ldr	r3, [pc, #116]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f40:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
     f42:	2003      	movs	r0, #3
     f44:	4b1c      	ldr	r3, [pc, #112]	; (fb8 <sysclk_enable_peripheral_clock+0x3f0>)
     f46:	4798      	blx	r3
		break;
     f48:	bd08      	pop	{r3, pc}
     f4a:	2103      	movs	r1, #3
     f4c:	2001      	movs	r0, #1
     f4e:	4b19      	ldr	r3, [pc, #100]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f50:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
     f52:	2005      	movs	r0, #5
     f54:	4b18      	ldr	r3, [pc, #96]	; (fb8 <sysclk_enable_peripheral_clock+0x3f0>)
     f56:	4798      	blx	r3
		break;
     f58:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
     f5a:	2006      	movs	r0, #6
     f5c:	4b16      	ldr	r3, [pc, #88]	; (fb8 <sysclk_enable_peripheral_clock+0x3f0>)
     f5e:	4798      	blx	r3
		break;
     f60:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
     f62:	2100      	movs	r1, #0
     f64:	2004      	movs	r0, #4
     f66:	4b13      	ldr	r3, [pc, #76]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f68:	4798      	blx	r3
     f6a:	bd08      	pop	{r3, pc}
     f6c:	2102      	movs	r1, #2
     f6e:	2004      	movs	r0, #4
     f70:	4b10      	ldr	r3, [pc, #64]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f72:	4798      	blx	r3
     f74:	bd08      	pop	{r3, pc}
     f76:	2103      	movs	r1, #3
     f78:	2004      	movs	r0, #4
     f7a:	4b0e      	ldr	r3, [pc, #56]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f7c:	4798      	blx	r3
     f7e:	bd08      	pop	{r3, pc}
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
     f80:	2100      	movs	r1, #0
     f82:	2005      	movs	r0, #5
     f84:	4b0b      	ldr	r3, [pc, #44]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f86:	4798      	blx	r3
     f88:	bd08      	pop	{r3, pc}
     f8a:	2101      	movs	r1, #1
     f8c:	2005      	movs	r0, #5
     f8e:	4b09      	ldr	r3, [pc, #36]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f90:	4798      	blx	r3
     f92:	bd08      	pop	{r3, pc}
     f94:	2103      	movs	r1, #3
     f96:	2005      	movs	r0, #5
     f98:	4b06      	ldr	r3, [pc, #24]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     f9a:	4798      	blx	r3
     f9c:	bd08      	pop	{r3, pc}
     f9e:	2104      	movs	r1, #4
     fa0:	2005      	movs	r0, #5
     fa2:	4b04      	ldr	r3, [pc, #16]	; (fb4 <sysclk_enable_peripheral_clock+0x3ec>)
     fa4:	4798      	blx	r3
     fa6:	bd08      	pop	{r3, pc}
     fa8:	000008c1 	.word	0x000008c1
     fac:	400e0000 	.word	0x400e0000
     fb0:	aa000040 	.word	0xaa000040
     fb4:	00000801 	.word	0x00000801
     fb8:	0000096d 	.word	0x0000096d

00000fbc <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
     fbc:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     fbe:	4baf      	ldr	r3, [pc, #700]	; (127c <__stack_size__+0x27c>)
     fc0:	4298      	cmp	r0, r3
     fc2:	f000 8183 	beq.w	12cc <__stack_size__+0x2cc>
     fc6:	d924      	bls.n	1012 <__stack_size__+0x12>
     fc8:	4bad      	ldr	r3, [pc, #692]	; (1280 <__stack_size__+0x280>)
     fca:	4298      	cmp	r0, r3
     fcc:	f000 81a2 	beq.w	1314 <__stack_size__+0x314>
     fd0:	f200 80de 	bhi.w	1190 <__stack_size__+0x190>
     fd4:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     fd8:	4298      	cmp	r0, r3
     fda:	f000 8183 	beq.w	12e4 <__stack_size__+0x2e4>
     fde:	f240 809b 	bls.w	1118 <__stack_size__+0x118>
     fe2:	4ba8      	ldr	r3, [pc, #672]	; (1284 <__stack_size__+0x284>)
     fe4:	4298      	cmp	r0, r3
     fe6:	f000 8189 	beq.w	12fc <__stack_size__+0x2fc>
     fea:	f200 80b6 	bhi.w	115a <__stack_size__+0x15a>
     fee:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
     ff2:	4298      	cmp	r0, r3
     ff4:	f000 817a 	beq.w	12ec <__stack_size__+0x2ec>
     ff8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     ffc:	4298      	cmp	r0, r3
     ffe:	f040 80ab 	bne.w	1158 <__stack_size__+0x158>
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1002:	2104      	movs	r1, #4
    1004:	2001      	movs	r0, #1
    1006:	4ba0      	ldr	r3, [pc, #640]	; (1288 <__stack_size__+0x288>)
    1008:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
		break;

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    100a:	2004      	movs	r0, #4
    100c:	4b9f      	ldr	r3, [pc, #636]	; (128c <__stack_size__+0x28c>)
    100e:	4798      	blx	r3
		break;
    1010:	e0af      	b.n	1172 <__stack_size__+0x172>
	switch ((uintptr_t)module) {
    1012:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
    1016:	4298      	cmp	r0, r3
    1018:	f000 8113 	beq.w	1242 <__stack_size__+0x242>
    101c:	d916      	bls.n	104c <__stack_size__+0x4c>
    101e:	4b9c      	ldr	r3, [pc, #624]	; (1290 <__stack_size__+0x290>)
    1020:	4298      	cmp	r0, r3
    1022:	f000 811a 	beq.w	125a <__stack_size__+0x25a>
    1026:	d94d      	bls.n	10c4 <__stack_size__+0xc4>
    1028:	4b9a      	ldr	r3, [pc, #616]	; (1294 <__stack_size__+0x294>)
    102a:	4298      	cmp	r0, r3
    102c:	f000 811d 	beq.w	126a <__stack_size__+0x26a>
    1030:	d865      	bhi.n	10fe <__stack_size__+0xfe>
    1032:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1036:	4298      	cmp	r0, r3
    1038:	f000 8113 	beq.w	1262 <__stack_size__+0x262>
    103c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1040:	4298      	cmp	r0, r3
    1042:	d15b      	bne.n	10fc <__stack_size__+0xfc>
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    1044:	2010      	movs	r0, #16
    1046:	4b94      	ldr	r3, [pc, #592]	; (1298 <__stack_size__+0x298>)
    1048:	4798      	blx	r3
		break;
    104a:	e092      	b.n	1172 <__stack_size__+0x172>
	switch ((uintptr_t)module) {
    104c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1050:	4298      	cmp	r0, r3
    1052:	f000 80ea 	beq.w	122a <__stack_size__+0x22a>
    1056:	d81a      	bhi.n	108e <__stack_size__+0x8e>
    1058:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    105c:	4298      	cmp	r0, r3
    105e:	f000 80dc 	beq.w	121a <__stack_size__+0x21a>
    1062:	d90b      	bls.n	107c <__stack_size__+0x7c>
    1064:	4b8d      	ldr	r3, [pc, #564]	; (129c <__stack_size__+0x29c>)
    1066:	4298      	cmp	r0, r3
    1068:	f000 80db 	beq.w	1222 <__stack_size__+0x222>
    106c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1070:	4298      	cmp	r0, r3
    1072:	d10b      	bne.n	108c <__stack_size__+0x8c>
		sysclk_disable_pba_module(SYSCLK_TC1);
    1074:	2003      	movs	r0, #3
    1076:	4b88      	ldr	r3, [pc, #544]	; (1298 <__stack_size__+0x298>)
    1078:	4798      	blx	r3
		break;
    107a:	e07a      	b.n	1172 <__stack_size__+0x172>
	switch ((uintptr_t)module) {
    107c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1080:	d103      	bne.n	108a <__stack_size__+0x8a>
		sysclk_disable_pba_module(SYSCLK_IISC);
    1082:	2000      	movs	r0, #0
    1084:	4b84      	ldr	r3, [pc, #528]	; (1298 <__stack_size__+0x298>)
    1086:	4798      	blx	r3
		break;
    1088:	e073      	b.n	1172 <__stack_size__+0x172>
    108a:	bd08      	pop	{r3, pc}
    108c:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    108e:	4b84      	ldr	r3, [pc, #528]	; (12a0 <__stack_size__+0x2a0>)
    1090:	4298      	cmp	r0, r3
    1092:	f000 80ce 	beq.w	1232 <__stack_size__+0x232>
    1096:	d90b      	bls.n	10b0 <__stack_size__+0xb0>
    1098:	4b82      	ldr	r3, [pc, #520]	; (12a4 <__stack_size__+0x2a4>)
    109a:	4298      	cmp	r0, r3
    109c:	f000 80cd 	beq.w	123a <__stack_size__+0x23a>
    10a0:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
    10a4:	4298      	cmp	r0, r3
    10a6:	d10c      	bne.n	10c2 <__stack_size__+0xc2>
		sysclk_disable_pba_module(SYSCLK_USART0);
    10a8:	2008      	movs	r0, #8
    10aa:	4b7b      	ldr	r3, [pc, #492]	; (1298 <__stack_size__+0x298>)
    10ac:	4798      	blx	r3
		break;
    10ae:	e060      	b.n	1172 <__stack_size__+0x172>
	switch ((uintptr_t)module) {
    10b0:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
    10b4:	4298      	cmp	r0, r3
    10b6:	d103      	bne.n	10c0 <__stack_size__+0xc0>
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    10b8:	2005      	movs	r0, #5
    10ba:	4b77      	ldr	r3, [pc, #476]	; (1298 <__stack_size__+0x298>)
    10bc:	4798      	blx	r3
		break;
    10be:	e058      	b.n	1172 <__stack_size__+0x172>
    10c0:	bd08      	pop	{r3, pc}
    10c2:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    10c4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    10c8:	4298      	cmp	r0, r3
    10ca:	f000 80be 	beq.w	124a <__stack_size__+0x24a>
    10ce:	d90b      	bls.n	10e8 <__stack_size__+0xe8>
    10d0:	4b75      	ldr	r3, [pc, #468]	; (12a8 <__stack_size__+0x2a8>)
    10d2:	4298      	cmp	r0, r3
    10d4:	f000 80bd 	beq.w	1252 <__stack_size__+0x252>
    10d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    10dc:	4298      	cmp	r0, r3
    10de:	d10c      	bne.n	10fa <__stack_size__+0xfa>
		sysclk_disable_pba_module(SYSCLK_DACC);
    10e0:	200d      	movs	r0, #13
    10e2:	4b6d      	ldr	r3, [pc, #436]	; (1298 <__stack_size__+0x298>)
    10e4:	4798      	blx	r3
		break;
    10e6:	e044      	b.n	1172 <__stack_size__+0x172>
	switch ((uintptr_t)module) {
    10e8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    10ec:	4298      	cmp	r0, r3
    10ee:	d103      	bne.n	10f8 <__stack_size__+0xf8>
		sysclk_disable_pba_module(SYSCLK_USART2);
    10f0:	200a      	movs	r0, #10
    10f2:	4b69      	ldr	r3, [pc, #420]	; (1298 <__stack_size__+0x298>)
    10f4:	4798      	blx	r3
		break;
    10f6:	e03c      	b.n	1172 <__stack_size__+0x172>
    10f8:	bd08      	pop	{r3, pc}
    10fa:	bd08      	pop	{r3, pc}
    10fc:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    10fe:	4b6b      	ldr	r3, [pc, #428]	; (12ac <__stack_size__+0x2ac>)
    1100:	4298      	cmp	r0, r3
    1102:	f000 80b6 	beq.w	1272 <__stack_size__+0x272>
    1106:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    110a:	4298      	cmp	r0, r3
    110c:	d103      	bne.n	1116 <__stack_size__+0x116>
		sysclk_disable_pba_module(SYSCLK_CATB);
    110e:	2013      	movs	r0, #19
    1110:	4b61      	ldr	r3, [pc, #388]	; (1298 <__stack_size__+0x298>)
    1112:	4798      	blx	r3
		break;
    1114:	e02d      	b.n	1172 <__stack_size__+0x172>
    1116:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1118:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
    111c:	4298      	cmp	r0, r3
    111e:	f000 80d9 	beq.w	12d4 <__stack_size__+0x2d4>
    1122:	d90f      	bls.n	1144 <__stack_size__+0x144>
    1124:	4b62      	ldr	r3, [pc, #392]	; (12b0 <__stack_size__+0x2b0>)
    1126:	4298      	cmp	r0, r3
    1128:	f000 80d8 	beq.w	12dc <__stack_size__+0x2dc>
    112c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1130:	4298      	cmp	r0, r3
    1132:	d110      	bne.n	1156 <__stack_size__+0x156>
    1134:	2102      	movs	r1, #2
    1136:	2001      	movs	r0, #1
    1138:	4b53      	ldr	r3, [pc, #332]	; (1288 <__stack_size__+0x288>)
    113a:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    113c:	2001      	movs	r0, #1
    113e:	4b53      	ldr	r3, [pc, #332]	; (128c <__stack_size__+0x28c>)
    1140:	4798      	blx	r3
		break;
    1142:	e016      	b.n	1172 <__stack_size__+0x172>
	switch ((uintptr_t)module) {
    1144:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1148:	4298      	cmp	r0, r3
    114a:	d103      	bne.n	1154 <__stack_size__+0x154>
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    114c:	2016      	movs	r0, #22
    114e:	4b52      	ldr	r3, [pc, #328]	; (1298 <__stack_size__+0x298>)
    1150:	4798      	blx	r3
		break;
    1152:	e00e      	b.n	1172 <__stack_size__+0x172>
    1154:	bd08      	pop	{r3, pc}
    1156:	bd08      	pop	{r3, pc}
    1158:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    115a:	4b56      	ldr	r3, [pc, #344]	; (12b4 <__stack_size__+0x2b4>)
    115c:	4298      	cmp	r0, r3
    115e:	f000 80d5 	beq.w	130c <__stack_size__+0x30c>
    1162:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    1166:	4298      	cmp	r0, r3
    1168:	d111      	bne.n	118e <__stack_size__+0x18e>
    116a:	2109      	movs	r1, #9
    116c:	2001      	movs	r0, #1
    116e:	4b46      	ldr	r3, [pc, #280]	; (1288 <__stack_size__+0x288>)
    1170:	4798      	blx	r3
							(1 << SYSCLK_TC1) | \
							(1 << SYSCLK_USART0) | \
							(1 << SYSCLK_USART1) | \
							(1 << SYSCLK_USART2) | \
							(1 << SYSCLK_USART3))
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    1172:	4b43      	ldr	r3, [pc, #268]	; (1280 <__stack_size__+0x280>)
    1174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1176:	f640 730c 	movw	r3, #3852	; 0xf0c
    117a:	421a      	tst	r2, r3
    117c:	d106      	bne.n	118c <__stack_size__+0x18c>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    117e:	4b40      	ldr	r3, [pc, #256]	; (1280 <__stack_size__+0x280>)
    1180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    1182:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1186:	494c      	ldr	r1, [pc, #304]	; (12b8 <__stack_size__+0x2b8>)
    1188:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    118a:	641a      	str	r2, [r3, #64]	; 0x40
    118c:	bd08      	pop	{r3, pc}
    118e:	bd08      	pop	{r3, pc}
	switch ((uintptr_t)module) {
    1190:	4b4a      	ldr	r3, [pc, #296]	; (12bc <__stack_size__+0x2bc>)
    1192:	4298      	cmp	r0, r3
    1194:	f000 80cd 	beq.w	1332 <__stack_size__+0x332>
    1198:	d912      	bls.n	11c0 <__stack_size__+0x1c0>
    119a:	4b49      	ldr	r3, [pc, #292]	; (12c0 <__stack_size__+0x2c0>)
    119c:	4298      	cmp	r0, r3
    119e:	f000 80d2 	beq.w	1346 <__stack_size__+0x346>
    11a2:	d82c      	bhi.n	11fe <__stack_size__+0x1fe>
    11a4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    11a8:	4298      	cmp	r0, r3
    11aa:	f000 80c7 	beq.w	133c <__stack_size__+0x33c>
    11ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    11b2:	4298      	cmp	r0, r3
    11b4:	d122      	bne.n	11fc <__stack_size__+0x1fc>
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    11b6:	2102      	movs	r1, #2
    11b8:	2005      	movs	r0, #5
    11ba:	4b33      	ldr	r3, [pc, #204]	; (1288 <__stack_size__+0x288>)
    11bc:	4798      	blx	r3
    11be:	e7d8      	b.n	1172 <__stack_size__+0x172>
    11c0:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
    11c4:	4298      	cmp	r0, r3
    11c6:	f000 80aa 	beq.w	131e <__stack_size__+0x31e>
    11ca:	d90c      	bls.n	11e6 <__stack_size__+0x1e6>
    11cc:	4b3d      	ldr	r3, [pc, #244]	; (12c4 <__stack_size__+0x2c4>)
    11ce:	4298      	cmp	r0, r3
    11d0:	f000 80aa 	beq.w	1328 <__stack_size__+0x328>
    11d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    11d8:	4298      	cmp	r0, r3
    11da:	d10e      	bne.n	11fa <__stack_size__+0x1fa>
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    11dc:	2104      	movs	r1, #4
    11de:	4608      	mov	r0, r1
    11e0:	4b29      	ldr	r3, [pc, #164]	; (1288 <__stack_size__+0x288>)
    11e2:	4798      	blx	r3
    11e4:	e7c5      	b.n	1172 <__stack_size__+0x172>
    11e6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
    11ea:	4298      	cmp	r0, r3
    11ec:	d104      	bne.n	11f8 <__stack_size__+0x1f8>
    11ee:	2101      	movs	r1, #1
    11f0:	2004      	movs	r0, #4
    11f2:	4b25      	ldr	r3, [pc, #148]	; (1288 <__stack_size__+0x288>)
    11f4:	4798      	blx	r3
    11f6:	e7bc      	b.n	1172 <__stack_size__+0x172>
    11f8:	bd08      	pop	{r3, pc}
    11fa:	bd08      	pop	{r3, pc}
    11fc:	bd08      	pop	{r3, pc}
    11fe:	4b32      	ldr	r3, [pc, #200]	; (12c8 <__stack_size__+0x2c8>)
    1200:	4298      	cmp	r0, r3
    1202:	f000 80a5 	beq.w	1350 <__stack_size__+0x350>
    1206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    120a:	4298      	cmp	r0, r3
    120c:	d104      	bne.n	1218 <__stack_size__+0x218>
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    120e:	2105      	movs	r1, #5
    1210:	4608      	mov	r0, r1
    1212:	4b1d      	ldr	r3, [pc, #116]	; (1288 <__stack_size__+0x288>)
    1214:	4798      	blx	r3
    1216:	e7ac      	b.n	1172 <__stack_size__+0x172>
    1218:	bd08      	pop	{r3, pc}
		sysclk_disable_pba_module(SYSCLK_SPI);
    121a:	2001      	movs	r0, #1
    121c:	4b1e      	ldr	r3, [pc, #120]	; (1298 <__stack_size__+0x298>)
    121e:	4798      	blx	r3
		break;
    1220:	e7a7      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_TC0);
    1222:	2002      	movs	r0, #2
    1224:	4b1c      	ldr	r3, [pc, #112]	; (1298 <__stack_size__+0x298>)
    1226:	4798      	blx	r3
		break;
    1228:	e7a3      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    122a:	2004      	movs	r0, #4
    122c:	4b1a      	ldr	r3, [pc, #104]	; (1298 <__stack_size__+0x298>)
    122e:	4798      	blx	r3
		break;
    1230:	e79f      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    1232:	2006      	movs	r0, #6
    1234:	4b18      	ldr	r3, [pc, #96]	; (1298 <__stack_size__+0x298>)
    1236:	4798      	blx	r3
		break;
    1238:	e79b      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    123a:	2007      	movs	r0, #7
    123c:	4b16      	ldr	r3, [pc, #88]	; (1298 <__stack_size__+0x298>)
    123e:	4798      	blx	r3
		break;
    1240:	e797      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_USART1);
    1242:	2009      	movs	r0, #9
    1244:	4b14      	ldr	r3, [pc, #80]	; (1298 <__stack_size__+0x298>)
    1246:	4798      	blx	r3
		break;
    1248:	e793      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_USART3);
    124a:	200b      	movs	r0, #11
    124c:	4b12      	ldr	r3, [pc, #72]	; (1298 <__stack_size__+0x298>)
    124e:	4798      	blx	r3
		break;
    1250:	e78f      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    1252:	200c      	movs	r0, #12
    1254:	4b10      	ldr	r3, [pc, #64]	; (1298 <__stack_size__+0x298>)
    1256:	4798      	blx	r3
		break;
    1258:	e78b      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    125a:	200e      	movs	r0, #14
    125c:	4b0e      	ldr	r3, [pc, #56]	; (1298 <__stack_size__+0x298>)
    125e:	4798      	blx	r3
		break;
    1260:	e787      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_GLOC);
    1262:	200f      	movs	r0, #15
    1264:	4b0c      	ldr	r3, [pc, #48]	; (1298 <__stack_size__+0x298>)
    1266:	4798      	blx	r3
		break;
    1268:	e783      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_TRNG);
    126a:	2011      	movs	r0, #17
    126c:	4b0a      	ldr	r3, [pc, #40]	; (1298 <__stack_size__+0x298>)
    126e:	4798      	blx	r3
		break;
    1270:	e77f      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_PARC);
    1272:	2012      	movs	r0, #18
    1274:	4b08      	ldr	r3, [pc, #32]	; (1298 <__stack_size__+0x298>)
    1276:	4798      	blx	r3
		break;
    1278:	e77b      	b.n	1172 <__stack_size__+0x172>
    127a:	bf00      	nop
    127c:	40078000 	.word	0x40078000
    1280:	400e0000 	.word	0x400e0000
    1284:	400a5000 	.word	0x400a5000
    1288:	00000861 	.word	0x00000861
    128c:	000009c5 	.word	0x000009c5
    1290:	40040000 	.word	0x40040000
    1294:	40068000 	.word	0x40068000
    1298:	00000919 	.word	0x00000919
    129c:	40010000 	.word	0x40010000
    12a0:	4001c000 	.word	0x4001c000
    12a4:	4001c400 	.word	0x4001c400
    12a8:	40038000 	.word	0x40038000
    12ac:	4006c000 	.word	0x4006c000
    12b0:	400a0000 	.word	0x400a0000
    12b4:	400a6000 	.word	0x400a6000
    12b8:	aa000040 	.word	0xaa000040
    12bc:	400f0000 	.word	0x400f0000
    12c0:	400f0c00 	.word	0x400f0c00
    12c4:	400e0c00 	.word	0x400e0c00
    12c8:	400f1000 	.word	0x400f1000
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    12cc:	2015      	movs	r0, #21
    12ce:	4b23      	ldr	r3, [pc, #140]	; (135c <__stack_size__+0x35c>)
    12d0:	4798      	blx	r3
		break;
    12d2:	e74e      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    12d4:	2017      	movs	r0, #23
    12d6:	4b21      	ldr	r3, [pc, #132]	; (135c <__stack_size__+0x35c>)
    12d8:	4798      	blx	r3
		break;
    12da:	e74a      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    12dc:	2000      	movs	r0, #0
    12de:	4b20      	ldr	r3, [pc, #128]	; (1360 <__stack_size__+0x360>)
    12e0:	4798      	blx	r3
		break;
    12e2:	e746      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    12e4:	2002      	movs	r0, #2
    12e6:	4b1e      	ldr	r3, [pc, #120]	; (1360 <__stack_size__+0x360>)
    12e8:	4798      	blx	r3
		break;
    12ea:	e742      	b.n	1172 <__stack_size__+0x172>
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    12ec:	2100      	movs	r1, #0
    12ee:	2001      	movs	r0, #1
    12f0:	4b1c      	ldr	r3, [pc, #112]	; (1364 <__stack_size__+0x364>)
    12f2:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    12f4:	2003      	movs	r0, #3
    12f6:	4b1a      	ldr	r3, [pc, #104]	; (1360 <__stack_size__+0x360>)
    12f8:	4798      	blx	r3
		break;
    12fa:	e73a      	b.n	1172 <__stack_size__+0x172>
    12fc:	2103      	movs	r1, #3
    12fe:	2001      	movs	r0, #1
    1300:	4b18      	ldr	r3, [pc, #96]	; (1364 <__stack_size__+0x364>)
    1302:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    1304:	2005      	movs	r0, #5
    1306:	4b16      	ldr	r3, [pc, #88]	; (1360 <__stack_size__+0x360>)
    1308:	4798      	blx	r3
		break;
    130a:	e732      	b.n	1172 <__stack_size__+0x172>
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    130c:	2006      	movs	r0, #6
    130e:	4b14      	ldr	r3, [pc, #80]	; (1360 <__stack_size__+0x360>)
    1310:	4798      	blx	r3
		break;
    1312:	e72e      	b.n	1172 <__stack_size__+0x172>
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    1314:	2100      	movs	r1, #0
    1316:	2004      	movs	r0, #4
    1318:	4b12      	ldr	r3, [pc, #72]	; (1364 <__stack_size__+0x364>)
    131a:	4798      	blx	r3
    131c:	e729      	b.n	1172 <__stack_size__+0x172>
    131e:	2102      	movs	r1, #2
    1320:	2004      	movs	r0, #4
    1322:	4b10      	ldr	r3, [pc, #64]	; (1364 <__stack_size__+0x364>)
    1324:	4798      	blx	r3
    1326:	e724      	b.n	1172 <__stack_size__+0x172>
    1328:	2103      	movs	r1, #3
    132a:	2004      	movs	r0, #4
    132c:	4b0d      	ldr	r3, [pc, #52]	; (1364 <__stack_size__+0x364>)
    132e:	4798      	blx	r3
    1330:	e71f      	b.n	1172 <__stack_size__+0x172>
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    1332:	2100      	movs	r1, #0
    1334:	2005      	movs	r0, #5
    1336:	4b0b      	ldr	r3, [pc, #44]	; (1364 <__stack_size__+0x364>)
    1338:	4798      	blx	r3
    133a:	e71a      	b.n	1172 <__stack_size__+0x172>
    133c:	2101      	movs	r1, #1
    133e:	2005      	movs	r0, #5
    1340:	4b08      	ldr	r3, [pc, #32]	; (1364 <__stack_size__+0x364>)
    1342:	4798      	blx	r3
    1344:	e715      	b.n	1172 <__stack_size__+0x172>
    1346:	2103      	movs	r1, #3
    1348:	2005      	movs	r0, #5
    134a:	4b06      	ldr	r3, [pc, #24]	; (1364 <__stack_size__+0x364>)
    134c:	4798      	blx	r3
    134e:	e710      	b.n	1172 <__stack_size__+0x172>
    1350:	2104      	movs	r1, #4
    1352:	2005      	movs	r0, #5
    1354:	4b03      	ldr	r3, [pc, #12]	; (1364 <__stack_size__+0x364>)
    1356:	4798      	blx	r3
    1358:	e70b      	b.n	1172 <__stack_size__+0x172>
    135a:	bf00      	nop
    135c:	00000919 	.word	0x00000919
    1360:	000009c5 	.word	0x000009c5
    1364:	00000861 	.word	0x00000861

00001368 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    1368:	b530      	push	{r4, r5, lr}
    136a:	b083      	sub	sp, #12
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    136c:	4c16      	ldr	r4, [pc, #88]	; (13c8 <sysclk_init+0x60>)
    136e:	4620      	mov	r0, r4
    1370:	4b16      	ldr	r3, [pc, #88]	; (13cc <sysclk_init+0x64>)
    1372:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    1374:	2301      	movs	r3, #1
    1376:	60a3      	str	r3, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    1378:	4622      	mov	r2, r4
    137a:	68d3      	ldr	r3, [r2, #12]
    137c:	f013 0f01 	tst.w	r3, #1
    1380:	d0fb      	beq.n	137a <sysclk_init+0x12>
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    1382:	4a13      	ldr	r2, [pc, #76]	; (13d0 <sysclk_init+0x68>)
    1384:	2100      	movs	r1, #0
    1386:	4813      	ldr	r0, [pc, #76]	; (13d4 <sysclk_init+0x6c>)
    1388:	4b13      	ldr	r3, [pc, #76]	; (13d8 <sysclk_init+0x70>)
    138a:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    138c:	4d11      	ldr	r5, [pc, #68]	; (13d4 <sysclk_init+0x6c>)
    138e:	4c13      	ldr	r4, [pc, #76]	; (13dc <sysclk_init+0x74>)
    1390:	4628      	mov	r0, r5
    1392:	47a0      	blx	r4
    1394:	f010 0f01 	tst.w	r0, #1
    1398:	d0fa      	beq.n	1390 <sysclk_init+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    139a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    139e:	fab3 f383 	clz	r3, r3
    13a2:	095b      	lsrs	r3, r3, #5
    13a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    13a6:	b672      	cpsid	i
    13a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    13ac:	2200      	movs	r2, #0
    13ae:	4b0c      	ldr	r3, [pc, #48]	; (13e0 <sysclk_init+0x78>)
    13b0:	701a      	strb	r2, [r3, #0]
	return flags;
    13b2:	9b01      	ldr	r3, [sp, #4]
	if (cpu_irq_is_enabled_flags(flags))
    13b4:	b12b      	cbz	r3, 13c2 <sysclk_init+0x5a>
		cpu_irq_enable();
    13b6:	2201      	movs	r2, #1
    13b8:	4b09      	ldr	r3, [pc, #36]	; (13e0 <sysclk_init+0x78>)
    13ba:	701a      	strb	r2, [r3, #0]
    13bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    13c0:	b662      	cpsie	i

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    13c2:	b003      	add	sp, #12
    13c4:	bd30      	pop	{r4, r5, pc}
    13c6:	bf00      	nop
    13c8:	400a0400 	.word	0x400a0400
    13cc:	00000bc9 	.word	0x00000bc9
    13d0:	0003a980 	.word	0x0003a980
    13d4:	400f0000 	.word	0x400f0000
    13d8:	00001485 	.word	0x00001485
    13dc:	000014f9 	.word	0x000014f9
    13e0:	2000002c 	.word	0x2000002c

000013e4 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    13e4:	b500      	push	{lr}
    13e6:	b089      	sub	sp, #36	; 0x24
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    13e8:	a801      	add	r0, sp, #4
    13ea:	4b1f      	ldr	r3, [pc, #124]	; (1468 <board_init+0x84>)
    13ec:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    13ee:	aa01      	add	r2, sp, #4
    13f0:	491e      	ldr	r1, [pc, #120]	; (146c <board_init+0x88>)
    13f2:	a806      	add	r0, sp, #24
    13f4:	4b1e      	ldr	r3, [pc, #120]	; (1470 <board_init+0x8c>)
    13f6:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    13f8:	a806      	add	r0, sp, #24
    13fa:	4b1e      	ldr	r3, [pc, #120]	; (1474 <board_init+0x90>)
    13fc:	4798      	blx	r3
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    13fe:	481e      	ldr	r0, [pc, #120]	; (1478 <board_init+0x94>)
    1400:	4b1e      	ldr	r3, [pc, #120]	; (147c <board_init+0x98>)
    1402:	4798      	blx	r3

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    1404:	4b1e      	ldr	r3, [pc, #120]	; (1480 <board_init+0x9c>)
    1406:	2280      	movs	r2, #128	; 0x80
    1408:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    140a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    140e:	655a      	str	r2, [r3, #84]	; 0x54
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    1410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1414:	649a      	str	r2, [r3, #72]	; 0x48
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    1416:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		base->GPIO_PUERS = mask;
    141a:	675a      	str	r2, [r3, #116]	; 0x74
		base->GPIO_PDERC = mask;
    141c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    1420:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    1424:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    1428:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    142a:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    142c:	639a      	str	r2, [r3, #56]	; 0x38
		base->GPIO_PUERC = mask;
    142e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1432:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    1434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    1438:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    143c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    1440:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    1442:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    1444:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1446:	609a      	str	r2, [r3, #8]
		base->GPIO_PUERC = mask;
    1448:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    144c:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    144e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    1452:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    1456:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0C = mask;
    145a:	619a      	str	r2, [r3, #24]
		base->GPIO_PMR1C = mask;
    145c:	629a      	str	r2, [r3, #40]	; 0x28
		base->GPIO_PMR2C = mask;
    145e:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1460:	609a      	str	r2, [r3, #8]
	ioport_set_pin_dir(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(UG_2832HSWEG04_RESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_RESET_GPIO, IOPORT_MODE_PULLUP);
#endif
}
    1462:	b009      	add	sp, #36	; 0x24
    1464:	f85d fb04 	ldr.w	pc, [sp], #4
    1468:	00001535 	.word	0x00001535
    146c:	400f0c00 	.word	0x400f0c00
    1470:	0000154d 	.word	0x0000154d
    1474:	00001601 	.word	0x00001601
    1478:	400e1000 	.word	0x400e1000
    147c:	00000bc9 	.word	0x00000bc9
    1480:	400e1400 	.word	0x400e1400

00001484 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    1484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1488:	b083      	sub	sp, #12
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    148a:	69c3      	ldr	r3, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    148c:	f023 0e03 	bic.w	lr, r3, #3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1490:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1494:	fab3 f383 	clz	r3, r3
    1498:	095b      	lsrs	r3, r3, #5
    149a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    149c:	b672      	cpsid	i
    149e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    14a2:	2500      	movs	r5, #0
    14a4:	4b11      	ldr	r3, [pc, #68]	; (14ec <bpm_power_scaling_cpu_failsafe+0x68>)
    14a6:	701d      	strb	r5, [r3, #0]
	return flags;
    14a8:	9e01      	ldr	r6, [sp, #4]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    14aa:	4c11      	ldr	r4, [pc, #68]	; (14f0 <bpm_power_scaling_cpu_failsafe+0x6c>)
    14ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    14b0:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    14b2:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    14b6:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    14b8:	2305      	movs	r3, #5
    14ba:	6023      	str	r3, [r4, #0]
	pmcon |= BPM_PMCON_PS(ps_value);
    14bc:	f001 0103 	and.w	r1, r1, #3
	pmcon |= BPM_PMCON_PSCREQ;
    14c0:	f041 010c 	orr.w	r1, r1, #12

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    14c4:	ea41 010e 	orr.w	r1, r1, lr
    14c8:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <bpm_power_scaling_cpu_failsafe+0x70>)
    14ca:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    14cc:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    14ce:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    14d2:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    14d6:	6027      	str	r7, [r4, #0]
	if (cpu_irq_is_enabled_flags(flags))
    14d8:	b12e      	cbz	r6, 14e6 <bpm_power_scaling_cpu_failsafe+0x62>
		cpu_irq_enable();
    14da:	2201      	movs	r2, #1
    14dc:	4b03      	ldr	r3, [pc, #12]	; (14ec <bpm_power_scaling_cpu_failsafe+0x68>)
    14de:	701a      	strb	r2, [r3, #0]
    14e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    14e4:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    14e6:	b003      	add	sp, #12
    14e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    14ec:	2000002c 	.word	0x2000002c
    14f0:	e000e010 	.word	0xe000e010
    14f4:	20000001 	.word	0x20000001

000014f8 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    14f8:	6940      	ldr	r0, [r0, #20]
}
    14fa:	4770      	bx	lr

000014fc <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    14fc:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    14fe:	4b0c      	ldr	r3, [pc, #48]	; (1530 <wdt_set_ctrl+0x34>)
    1500:	681b      	ldr	r3, [r3, #0]
    1502:	f413 3f00 	tst.w	r3, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    1506:	bf0c      	ite	eq
    1508:	2302      	moveq	r3, #2
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    150a:	2308      	movne	r3, #8
    150c:	9301      	str	r3, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    150e:	9b01      	ldr	r3, [sp, #4]
    1510:	08db      	lsrs	r3, r3, #3
    1512:	9301      	str	r3, [sp, #4]
	while(dly--);
    1514:	9b01      	ldr	r3, [sp, #4]
    1516:	1e5a      	subs	r2, r3, #1
    1518:	9201      	str	r2, [sp, #4]
    151a:	2b00      	cmp	r3, #0
    151c:	d1fa      	bne.n	1514 <wdt_set_ctrl+0x18>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    151e:	f040 42aa 	orr.w	r2, r0, #1426063360	; 0x55000000
    1522:	4b03      	ldr	r3, [pc, #12]	; (1530 <wdt_set_ctrl+0x34>)
    1524:	601a      	str	r2, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    1526:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    152a:	6018      	str	r0, [r3, #0]
}
    152c:	b002      	add	sp, #8
    152e:	4770      	bx	lr
    1530:	400f0c00 	.word	0x400f0c00

00001534 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    1534:	2300      	movs	r3, #0
    1536:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    1538:	6043      	str	r3, [r0, #4]
	cfg->wdt_int = WDT_INT_DIS;
    153a:	6083      	str	r3, [r0, #8]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    153c:	2210      	movs	r2, #16
    153e:	7302      	strb	r2, [r0, #12]
	cfg->window_period = WDT_PERIOD_NONE;
    1540:	7343      	strb	r3, [r0, #13]
	cfg->disable_flash_cali = true;
    1542:	2201      	movs	r2, #1
    1544:	7382      	strb	r2, [r0, #14]
	cfg->disable_wdt_after_reset = true;
    1546:	73c2      	strb	r2, [r0, #15]
	cfg->always_on = false;
    1548:	7403      	strb	r3, [r0, #16]
    154a:	4770      	bx	lr

0000154c <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    154c:	b570      	push	{r4, r5, r6, lr}
    154e:	460c      	mov	r4, r1
    1550:	4616      	mov	r6, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    1552:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    1554:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    1556:	4608      	mov	r0, r1
    1558:	4b26      	ldr	r3, [pc, #152]	; (15f4 <wdt_init+0xa8>)
    155a:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    155c:	6825      	ldr	r5, [r4, #0]
    155e:	f015 0508 	ands.w	r5, r5, #8
    1562:	d144      	bne.n	15ee <wdt_init+0xa2>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    1564:	6823      	ldr	r3, [r4, #0]
    1566:	f013 0f01 	tst.w	r3, #1
    156a:	d12c      	bne.n	15c6 <wdt_init+0x7a>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    156c:	6823      	ldr	r3, [r4, #0]
    156e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1572:	d132      	bne.n	15da <wdt_init+0x8e>
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    1574:	6833      	ldr	r3, [r6, #0]
    1576:	6870      	ldr	r0, [r6, #4]
    1578:	4318      	orrs	r0, r3
			cfg->wdt_mode |
    157a:	68b3      	ldr	r3, [r6, #8]
    157c:	4318      	orrs	r0, r3
			cfg->wdt_int |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    157e:	7b33      	ldrb	r3, [r6, #12]
    1580:	021b      	lsls	r3, r3, #8
    1582:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
			cfg->wdt_int |
    1586:	4318      	orrs	r0, r3
			WDT_CTRL_TBAN(cfg->window_period) |
    1588:	7b73      	ldrb	r3, [r6, #13]
    158a:	049b      	lsls	r3, r3, #18
    158c:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
			WDT_CTRL_PSEL(cfg->timeout_period) |
    1590:	4318      	orrs	r0, r3
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
    1592:	7bb3      	ldrb	r3, [r6, #14]
    1594:	2b00      	cmp	r3, #0
    1596:	bf0c      	ite	eq
    1598:	462b      	moveq	r3, r5
    159a:	2380      	movne	r3, #128	; 0x80
			WDT_CTRL_TBAN(cfg->window_period) |
    159c:	4318      	orrs	r0, r3
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
    159e:	7bf3      	ldrb	r3, [r6, #15]
    15a0:	2b00      	cmp	r3, #0
    15a2:	bf18      	it	ne
    15a4:	2502      	movne	r5, #2
	wdt_set_ctrl(cfg->clk_src |
    15a6:	4328      	orrs	r0, r5
    15a8:	4d13      	ldr	r5, [pc, #76]	; (15f8 <wdt_init+0xac>)
    15aa:	47a8      	blx	r5
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    15ac:	6820      	ldr	r0, [r4, #0]
    15ae:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    15b2:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    15b4:	6823      	ldr	r3, [r4, #0]
    15b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    15ba:	d0fb      	beq.n	15b4 <wdt_init+0x68>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    15bc:	4620      	mov	r0, r4
    15be:	4b0f      	ldr	r3, [pc, #60]	; (15fc <wdt_init+0xb0>)
    15c0:	4798      	blx	r3

	return true;
    15c2:	2001      	movs	r0, #1
    15c4:	bd70      	pop	{r4, r5, r6, pc}
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    15c6:	6820      	ldr	r0, [r4, #0]
    15c8:	f020 0001 	bic.w	r0, r0, #1
    15cc:	4b0a      	ldr	r3, [pc, #40]	; (15f8 <wdt_init+0xac>)
    15ce:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    15d0:	6823      	ldr	r3, [r4, #0]
    15d2:	f013 0f01 	tst.w	r3, #1
    15d6:	d1fb      	bne.n	15d0 <wdt_init+0x84>
    15d8:	e7c8      	b.n	156c <wdt_init+0x20>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    15da:	6820      	ldr	r0, [r4, #0]
    15dc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    15e0:	4b05      	ldr	r3, [pc, #20]	; (15f8 <wdt_init+0xac>)
    15e2:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    15e4:	6823      	ldr	r3, [r4, #0]
    15e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    15ea:	d1fb      	bne.n	15e4 <wdt_init+0x98>
    15ec:	e7c2      	b.n	1574 <wdt_init+0x28>
		return false;
    15ee:	2000      	movs	r0, #0
}
    15f0:	bd70      	pop	{r4, r5, r6, pc}
    15f2:	bf00      	nop
    15f4:	00000bc9 	.word	0x00000bc9
    15f8:	000014fd 	.word	0x000014fd
    15fc:	00000fbd 	.word	0x00000fbd

00001600 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    1600:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    1602:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    1604:	6820      	ldr	r0, [r4, #0]
    1606:	f020 0001 	bic.w	r0, r0, #1
    160a:	4b05      	ldr	r3, [pc, #20]	; (1620 <wdt_disable+0x20>)
    160c:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    160e:	6823      	ldr	r3, [r4, #0]
    1610:	f013 0f01 	tst.w	r3, #1
    1614:	d1fb      	bne.n	160e <wdt_disable+0xe>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    1616:	4620      	mov	r0, r4
    1618:	4b02      	ldr	r3, [pc, #8]	; (1624 <wdt_disable+0x24>)
    161a:	4798      	blx	r3
    161c:	bd10      	pop	{r4, pc}
    161e:	bf00      	nop
    1620:	000014fd 	.word	0x000014fd
    1624:	00000fbd 	.word	0x00000fbd

00001628 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1628:	e7fe      	b.n	1628 <Dummy_Handler>
	...

0000162c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    162c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    162e:	4b17      	ldr	r3, [pc, #92]	; (168c <Reset_Handler+0x60>)
    1630:	4a17      	ldr	r2, [pc, #92]	; (1690 <Reset_Handler+0x64>)
    1632:	429a      	cmp	r2, r3
    1634:	d010      	beq.n	1658 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
    1636:	4b17      	ldr	r3, [pc, #92]	; (1694 <Reset_Handler+0x68>)
    1638:	4a14      	ldr	r2, [pc, #80]	; (168c <Reset_Handler+0x60>)
    163a:	429a      	cmp	r2, r3
    163c:	d20c      	bcs.n	1658 <Reset_Handler+0x2c>
    163e:	3b01      	subs	r3, #1
    1640:	1a9b      	subs	r3, r3, r2
    1642:	f023 0303 	bic.w	r3, r3, #3
    1646:	3304      	adds	r3, #4
    1648:	4413      	add	r3, r2
    164a:	4911      	ldr	r1, [pc, #68]	; (1690 <Reset_Handler+0x64>)
			*pDest++ = *pSrc++;
    164c:	f851 0b04 	ldr.w	r0, [r1], #4
    1650:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
    1654:	429a      	cmp	r2, r3
    1656:	d1f9      	bne.n	164c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1658:	4b0f      	ldr	r3, [pc, #60]	; (1698 <Reset_Handler+0x6c>)
    165a:	4a10      	ldr	r2, [pc, #64]	; (169c <Reset_Handler+0x70>)
    165c:	429a      	cmp	r2, r3
    165e:	d20a      	bcs.n	1676 <Reset_Handler+0x4a>
    1660:	3b01      	subs	r3, #1
    1662:	1a9b      	subs	r3, r3, r2
    1664:	f023 0303 	bic.w	r3, r3, #3
    1668:	3304      	adds	r3, #4
    166a:	4413      	add	r3, r2
		*pDest++ = 0;
    166c:	2100      	movs	r1, #0
    166e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
    1672:	4293      	cmp	r3, r2
    1674:	d1fb      	bne.n	166e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1676:	4a0a      	ldr	r2, [pc, #40]	; (16a0 <Reset_Handler+0x74>)
    1678:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <Reset_Handler+0x78>)
    167a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    167e:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
    1680:	4b09      	ldr	r3, [pc, #36]	; (16a8 <Reset_Handler+0x7c>)
    1682:	4798      	blx	r3

	/* Branch to main function */
	main();
    1684:	4b09      	ldr	r3, [pc, #36]	; (16ac <Reset_Handler+0x80>)
    1686:	4798      	blx	r3
    1688:	e7fe      	b.n	1688 <Reset_Handler+0x5c>
    168a:	bf00      	nop
    168c:	20000000 	.word	0x20000000
    1690:	00004bb8 	.word	0x00004bb8
    1694:	200009e0 	.word	0x200009e0
    1698:	20000a8c 	.word	0x20000a8c
    169c:	200009e0 	.word	0x200009e0
    16a0:	e000ed00 	.word	0xe000ed00
    16a4:	00000000 	.word	0x00000000
    16a8:	0000193d 	.word	0x0000193d
    16ac:	00001759 	.word	0x00001759

000016b0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
    16b0:	4b0a      	ldr	r3, [pc, #40]	; (16dc <_sbrk+0x2c>)
    16b2:	681b      	ldr	r3, [r3, #0]
    16b4:	b153      	cbz	r3, 16cc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    16b6:	4b09      	ldr	r3, [pc, #36]	; (16dc <_sbrk+0x2c>)
    16b8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
    16ba:	181a      	adds	r2, r3, r0
    16bc:	4908      	ldr	r1, [pc, #32]	; (16e0 <_sbrk+0x30>)
    16be:	4291      	cmp	r1, r2
    16c0:	db08      	blt.n	16d4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
    16c2:	4610      	mov	r0, r2
    16c4:	4a05      	ldr	r2, [pc, #20]	; (16dc <_sbrk+0x2c>)
    16c6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
    16c8:	4618      	mov	r0, r3
    16ca:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    16cc:	4a05      	ldr	r2, [pc, #20]	; (16e4 <_sbrk+0x34>)
    16ce:	4b03      	ldr	r3, [pc, #12]	; (16dc <_sbrk+0x2c>)
    16d0:	601a      	str	r2, [r3, #0]
    16d2:	e7f0      	b.n	16b6 <_sbrk+0x6>
		return (caddr_t) -1;	
    16d4:	f04f 30ff 	mov.w	r0, #4294967295
}
    16d8:	4770      	bx	lr
    16da:	bf00      	nop
    16dc:	20000a00 	.word	0x20000a00
    16e0:	20007ffc 	.word	0x20007ffc
    16e4:	20001a90 	.word	0x20001a90

000016e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    16e8:	f04f 30ff 	mov.w	r0, #4294967295
    16ec:	4770      	bx	lr

000016ee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    16ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    16f2:	604b      	str	r3, [r1, #4]

	return 0;
}
    16f4:	2000      	movs	r0, #0
    16f6:	4770      	bx	lr

000016f8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    16f8:	2001      	movs	r0, #1
    16fa:	4770      	bx	lr

000016fc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    16fc:	2000      	movs	r0, #0
    16fe:	4770      	bx	lr

00001700 <ast_per_callback>:
	ast_write_periodic0_value(AST, AST_PSEL_32KHZ_1HZ - 4);
	ast_set_callback(AST, AST_INTERRUPT_PER, ast_per_callback, AST_PER_IRQn, 1);
}

void ast_per_callback(void)
{
    1700:	b508      	push	{r3, lr}
	ast_clear_interrupt_flag(AST, AST_INTERRUPT_PER);
    1702:	2101      	movs	r1, #1
    1704:	4801      	ldr	r0, [pc, #4]	; (170c <ast_per_callback+0xc>)
    1706:	4b02      	ldr	r3, [pc, #8]	; (1710 <ast_per_callback+0x10>)
    1708:	4798      	blx	r3
    170a:	bd08      	pop	{r3, pc}
    170c:	400f0800 	.word	0x400f0800
    1710:	000003b1 	.word	0x000003b1

00001714 <TC11_Handler>:
}

void TC_Handler(void)
{
    1714:	b510      	push	{r4, lr}
	if ((tc_get_status(TC, TC_CHANNEL_CAPTURE) & TC_SR_LDRBS) == TC_SR_LDRBS) {
    1716:	2101      	movs	r1, #1
    1718:	480a      	ldr	r0, [pc, #40]	; (1744 <TC11_Handler+0x30>)
    171a:	4b0b      	ldr	r3, [pc, #44]	; (1748 <TC11_Handler+0x34>)
    171c:	4798      	blx	r3
    171e:	f010 0f40 	tst.w	r0, #64	; 0x40
    1722:	d100      	bne.n	1726 <TC11_Handler+0x12>
    1724:	bd10      	pop	{r4, pc}
		gs_ul_captured_pulses++;
    1726:	4a09      	ldr	r2, [pc, #36]	; (174c <TC11_Handler+0x38>)
    1728:	6813      	ldr	r3, [r2, #0]
    172a:	3301      	adds	r3, #1
    172c:	6013      	str	r3, [r2, #0]
		gs_ul_captured_ra = tc_read_ra(TC, TC_CHANNEL_CAPTURE);
    172e:	4c05      	ldr	r4, [pc, #20]	; (1744 <TC11_Handler+0x30>)
    1730:	2101      	movs	r1, #1
    1732:	4620      	mov	r0, r4
    1734:	4b06      	ldr	r3, [pc, #24]	; (1750 <TC11_Handler+0x3c>)
    1736:	4798      	blx	r3
		gs_ul_captured_rb = tc_read_rb(TC, TC_CHANNEL_CAPTURE);
    1738:	2101      	movs	r1, #1
    173a:	4620      	mov	r0, r4
    173c:	4b05      	ldr	r3, [pc, #20]	; (1754 <TC11_Handler+0x40>)
    173e:	4798      	blx	r3
	}
}
    1740:	e7f0      	b.n	1724 <TC11_Handler+0x10>
    1742:	bf00      	nop
    1744:	40014000 	.word	0x40014000
    1748:	0000060d 	.word	0x0000060d
    174c:	20000a04 	.word	0x20000a04
    1750:	000005e5 	.word	0x000005e5
    1754:	000005ed 	.word	0x000005ed

00001758 <main>:


int main (void)
{
    1758:	b580      	push	{r7, lr}
    175a:	b086      	sub	sp, #24
	sysclk_init();
    175c:	4b53      	ldr	r3, [pc, #332]	; (18ac <main+0x154>)
    175e:	4798      	blx	r3
	board_init();
    1760:	4b53      	ldr	r3, [pc, #332]	; (18b0 <main+0x158>)
    1762:	4798      	blx	r3
	uart_init();
    1764:	4b53      	ldr	r3, [pc, #332]	; (18b4 <main+0x15c>)
    1766:	4798      	blx	r3
		base->GPIO_PUERC = mask;
    1768:	4b53      	ldr	r3, [pc, #332]	; (18b8 <main+0x160>)
    176a:	2210      	movs	r2, #16
    176c:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    176e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    1772:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    1776:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0S = mask;
    177a:	615a      	str	r2, [r3, #20]
		base->GPIO_PMR1S = mask;
    177c:	625a      	str	r2, [r3, #36]	; 0x24
		base->GPIO_PMR2C = mask;
    177e:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1780:	609a      	str	r2, [r3, #8]
		base->GPIO_PUERC = mask;
    1782:	2204      	movs	r2, #4
    1784:	679a      	str	r2, [r3, #120]	; 0x78
		base->GPIO_PDERC = mask;
    1786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		base->GPIO_GFERC = mask;
    178a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		base->GPIO_ODCR0C = mask;
    178e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		base->GPIO_PMR0S = mask;
    1792:	615a      	str	r2, [r3, #20]
		base->GPIO_PMR1S = mask;
    1794:	625a      	str	r2, [r3, #36]	; 0x24
		base->GPIO_PMR2C = mask;
    1796:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1798:	609a      	str	r2, [r3, #8]
	printf("Configure TC%d channel %d as waveform operating mode \n\r",
    179a:	2202      	movs	r2, #2
    179c:	2101      	movs	r1, #1
    179e:	4847      	ldr	r0, [pc, #284]	; (18bc <main+0x164>)
    17a0:	4e47      	ldr	r6, [pc, #284]	; (18c0 <main+0x168>)
    17a2:	47b0      	blx	r6
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);
    17a4:	4c47      	ldr	r4, [pc, #284]	; (18c4 <main+0x16c>)
    17a6:	4620      	mov	r0, r4
    17a8:	f8df 818c 	ldr.w	r8, [pc, #396]	; 1938 <main+0x1e0>
    17ac:	47c0      	blx	r8
	tc_init(TC, TC_CHANNEL_WAVEFORM,
    17ae:	4a46      	ldr	r2, [pc, #280]	; (18c8 <main+0x170>)
    17b0:	2102      	movs	r1, #2
    17b2:	4620      	mov	r0, r4
    17b4:	4f45      	ldr	r7, [pc, #276]	; (18cc <main+0x174>)
    17b6:	47b8      	blx	r7
	rc = (sysclk_get_peripheral_bus_hz(TC) /
    17b8:	4620      	mov	r0, r4
    17ba:	4b45      	ldr	r3, [pc, #276]	; (18d0 <main+0x178>)
    17bc:	4798      	blx	r3
    17be:	4d45      	ldr	r5, [pc, #276]	; (18d4 <main+0x17c>)
    17c0:	fba5 3500 	umull	r3, r5, r5, r0
    17c4:	09ad      	lsrs	r5, r5, #6
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
    17c6:	462a      	mov	r2, r5
    17c8:	2102      	movs	r1, #2
    17ca:	4620      	mov	r0, r4
    17cc:	4b42      	ldr	r3, [pc, #264]	; (18d8 <main+0x180>)
    17ce:	4798      	blx	r3
	ra = (100 - gc_waveconfig[gs_uc_configuration].us_dutycycle) * rc / 100;
    17d0:	f04f 0932 	mov.w	r9, #50	; 0x32
    17d4:	fb09 f205 	mul.w	r2, r9, r5
    17d8:	4b40      	ldr	r3, [pc, #256]	; (18dc <main+0x184>)
    17da:	fba3 3202 	umull	r3, r2, r3, r2
	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
    17de:	0952      	lsrs	r2, r2, #5
    17e0:	2102      	movs	r1, #2
    17e2:	4620      	mov	r0, r4
    17e4:	4b3e      	ldr	r3, [pc, #248]	; (18e0 <main+0x188>)
    17e6:	4798      	blx	r3
	tc_start(TC, TC_CHANNEL_WAVEFORM);
    17e8:	2102      	movs	r1, #2
    17ea:	4620      	mov	r0, r4
    17ec:	4d3d      	ldr	r5, [pc, #244]	; (18e4 <main+0x18c>)
    17ee:	47a8      	blx	r5
	printf("Start waveform: Frequency = %d Hz,Duty Cycle = %2d%%\n\r",
    17f0:	464a      	mov	r2, r9
    17f2:	f240 1177 	movw	r1, #375	; 0x177
    17f6:	483c      	ldr	r0, [pc, #240]	; (18e8 <main+0x190>)
    17f8:	47b0      	blx	r6
	printf("Configure TC%d channel %d as capture operating mode \n\r",
    17fa:	2201      	movs	r2, #1
    17fc:	4611      	mov	r1, r2
    17fe:	483b      	ldr	r0, [pc, #236]	; (18ec <main+0x194>)
    1800:	47b0      	blx	r6
	sysclk_enable_peripheral_clock(ID_TC_CAPTURE);
    1802:	4620      	mov	r0, r4
    1804:	47c0      	blx	r8
	tc_init(TC, TC_CHANNEL_CAPTURE,
    1806:	4a3a      	ldr	r2, [pc, #232]	; (18f0 <main+0x198>)
    1808:	2101      	movs	r1, #1
    180a:	4620      	mov	r0, r4
    180c:	47b8      	blx	r7
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    180e:	4b39      	ldr	r3, [pc, #228]	; (18f4 <main+0x19c>)
    1810:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1818:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    181c:	2700      	movs	r7, #0
    181e:	f883 733b 	strb.w	r7, [r3, #827]	; 0x33b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    1822:	605a      	str	r2, [r3, #4]
	printf("\r\n[INFO] Board initialization complete\r\n");
    1824:	4834      	ldr	r0, [pc, #208]	; (18f8 <main+0x1a0>)
    1826:	47b0      	blx	r6
	tc_enable_interrupt(TC, TC_CHANNEL_CAPTURE, TC_IER_LDRBS);
    1828:	2240      	movs	r2, #64	; 0x40
    182a:	2101      	movs	r1, #1
    182c:	4620      	mov	r0, r4
    182e:	4b33      	ldr	r3, [pc, #204]	; (18fc <main+0x1a4>)
    1830:	4798      	blx	r3
	tc_start(TC, TC_CHANNEL_CAPTURE);
    1832:	2101      	movs	r1, #1
    1834:	4620      	mov	r0, r4
    1836:	47a8      	blx	r5
	osc_priv_enable_osc32(); 
    1838:	4b31      	ldr	r3, [pc, #196]	; (1900 <main+0x1a8>)
    183a:	4798      	blx	r3
	ast_enable(AST);
    183c:	f504 245c 	add.w	r4, r4, #901120	; 0xdc000
    1840:	f504 6400 	add.w	r4, r4, #2048	; 0x800
    1844:	4620      	mov	r0, r4
    1846:	4b2f      	ldr	r3, [pc, #188]	; (1904 <main+0x1ac>)
    1848:	4798      	blx	r3
	ast_conf.mode = AST_COUNTER_MODE;
    184a:	f88d 700c 	strb.w	r7, [sp, #12]
	ast_conf.osc_type = AST_OSC_32KHZ;
    184e:	2501      	movs	r5, #1
    1850:	f88d 500d 	strb.w	r5, [sp, #13]
	ast_conf.psel = AST_PSEL_32KHZ_1HZ;
    1854:	230e      	movs	r3, #14
    1856:	f88d 300e 	strb.w	r3, [sp, #14]
	ast_conf.counter = 0;
    185a:	9704      	str	r7, [sp, #16]
	ast_set_config(AST, &ast_conf);
    185c:	a903      	add	r1, sp, #12
    185e:	4620      	mov	r0, r4
    1860:	4b29      	ldr	r3, [pc, #164]	; (1908 <main+0x1b0>)
    1862:	4798      	blx	r3
	ast_write_periodic0_value(AST, AST_PSEL_32KHZ_1HZ - 4);
    1864:	210a      	movs	r1, #10
    1866:	4620      	mov	r0, r4
    1868:	4b28      	ldr	r3, [pc, #160]	; (190c <main+0x1b4>)
    186a:	4798      	blx	r3
	ast_set_callback(AST, AST_INTERRUPT_PER, ast_per_callback, AST_PER_IRQn, 1);
    186c:	9500      	str	r5, [sp, #0]
    186e:	2328      	movs	r3, #40	; 0x28
    1870:	4a27      	ldr	r2, [pc, #156]	; (1910 <main+0x1b8>)
    1872:	4629      	mov	r1, r5
    1874:	4620      	mov	r0, r4
    1876:	4c27      	ldr	r4, [pc, #156]	; (1914 <main+0x1bc>)
    1878:	47a0      	blx	r4
	time_counter_init();
	ast_init();

	/* Output example information */
	printf("-- TC capture waveform Example --\r\n");
    187a:	4827      	ldr	r0, [pc, #156]	; (1918 <main+0x1c0>)
    187c:	47b0      	blx	r6
	printf("-- %s\n\r", BOARD_NAME);
    187e:	4927      	ldr	r1, [pc, #156]	; (191c <main+0x1c4>)
    1880:	4827      	ldr	r0, [pc, #156]	; (1920 <main+0x1c8>)
    1882:	47b0      	blx	r6
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
    1884:	4a27      	ldr	r2, [pc, #156]	; (1924 <main+0x1cc>)
    1886:	4928      	ldr	r1, [pc, #160]	; (1928 <main+0x1d0>)
    1888:	4828      	ldr	r0, [pc, #160]	; (192c <main+0x1d4>)
    188a:	47b0      	blx	r6
	while (1)
	{
		//! [tc_capture_init_module_irq]

		/* Is button pressed? */
		printf("\r\nRun main loop %d\r\n", gs_ul_captured_pulses);
    188c:	4e28      	ldr	r6, [pc, #160]	; (1930 <main+0x1d8>)
    188e:	4d29      	ldr	r5, [pc, #164]	; (1934 <main+0x1dc>)
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    1890:	4c09      	ldr	r4, [pc, #36]	; (18b8 <main+0x160>)
    1892:	6831      	ldr	r1, [r6, #0]
    1894:	4628      	mov	r0, r5
    1896:	4b0a      	ldr	r3, [pc, #40]	; (18c0 <main+0x168>)
    1898:	4798      	blx	r3
    189a:	6e23      	ldr	r3, [r4, #96]	; 0x60

		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    189c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    18a0:	f04f 0380 	mov.w	r3, #128	; 0x80
    18a4:	bf0c      	ite	eq
    18a6:	65a3      	streq	r3, [r4, #88]	; 0x58
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    18a8:	6563      	strne	r3, [r4, #84]	; 0x54
    18aa:	e7f2      	b.n	1892 <main+0x13a>
    18ac:	00001369 	.word	0x00001369
    18b0:	000013e5 	.word	0x000013e5
    18b4:	0000071d 	.word	0x0000071d
    18b8:	400e1400 	.word	0x400e1400
    18bc:	000048c8 	.word	0x000048c8
    18c0:	0000198d 	.word	0x0000198d
    18c4:	40014000 	.word	0x40014000
    18c8:	0009c002 	.word	0x0009c002
    18cc:	000005c5 	.word	0x000005c5
    18d0:	00000a19 	.word	0x00000a19
    18d4:	057619f1 	.word	0x057619f1
    18d8:	000005fd 	.word	0x000005fd
    18dc:	51eb851f 	.word	0x51eb851f
    18e0:	000005f5 	.word	0x000005f5
    18e4:	000005dd 	.word	0x000005dd
    18e8:	00004900 	.word	0x00004900
    18ec:	00004938 	.word	0x00004938
    18f0:	00090602 	.word	0x00090602
    18f4:	e000e100 	.word	0xe000e100
    18f8:	00004970 	.word	0x00004970
    18fc:	00000605 	.word	0x00000605
    1900:	000007b9 	.word	0x000007b9
    1904:	00000229 	.word	0x00000229
    1908:	000002a5 	.word	0x000002a5
    190c:	00000359 	.word	0x00000359
    1910:	00001701 	.word	0x00001701
    1914:	000003f5 	.word	0x000003f5
    1918:	0000499c 	.word	0x0000499c
    191c:	000049c0 	.word	0x000049c0
    1920:	000049d4 	.word	0x000049d4
    1924:	000049dc 	.word	0x000049dc
    1928:	000049e8 	.word	0x000049e8
    192c:	000049f4 	.word	0x000049f4
    1930:	20000a04 	.word	0x20000a04
    1934:	00004a0c 	.word	0x00004a0c
    1938:	00000bc9 	.word	0x00000bc9

0000193c <__libc_init_array>:
    193c:	b570      	push	{r4, r5, r6, lr}
    193e:	4e0f      	ldr	r6, [pc, #60]	; (197c <__libc_init_array+0x40>)
    1940:	4d0f      	ldr	r5, [pc, #60]	; (1980 <__libc_init_array+0x44>)
    1942:	1b76      	subs	r6, r6, r5
    1944:	10b6      	asrs	r6, r6, #2
    1946:	bf18      	it	ne
    1948:	2400      	movne	r4, #0
    194a:	d005      	beq.n	1958 <__libc_init_array+0x1c>
    194c:	3401      	adds	r4, #1
    194e:	f855 3b04 	ldr.w	r3, [r5], #4
    1952:	4798      	blx	r3
    1954:	42a6      	cmp	r6, r4
    1956:	d1f9      	bne.n	194c <__libc_init_array+0x10>
    1958:	4e0a      	ldr	r6, [pc, #40]	; (1984 <__libc_init_array+0x48>)
    195a:	4d0b      	ldr	r5, [pc, #44]	; (1988 <__libc_init_array+0x4c>)
    195c:	1b76      	subs	r6, r6, r5
    195e:	f003 f915 	bl	4b8c <_init>
    1962:	10b6      	asrs	r6, r6, #2
    1964:	bf18      	it	ne
    1966:	2400      	movne	r4, #0
    1968:	d006      	beq.n	1978 <__libc_init_array+0x3c>
    196a:	3401      	adds	r4, #1
    196c:	f855 3b04 	ldr.w	r3, [r5], #4
    1970:	4798      	blx	r3
    1972:	42a6      	cmp	r6, r4
    1974:	d1f9      	bne.n	196a <__libc_init_array+0x2e>
    1976:	bd70      	pop	{r4, r5, r6, pc}
    1978:	bd70      	pop	{r4, r5, r6, pc}
    197a:	bf00      	nop
    197c:	00004b98 	.word	0x00004b98
    1980:	00004b98 	.word	0x00004b98
    1984:	00004ba0 	.word	0x00004ba0
    1988:	00004b98 	.word	0x00004b98

0000198c <iprintf>:
    198c:	b40f      	push	{r0, r1, r2, r3}
    198e:	b500      	push	{lr}
    1990:	4907      	ldr	r1, [pc, #28]	; (19b0 <iprintf+0x24>)
    1992:	b083      	sub	sp, #12
    1994:	ab04      	add	r3, sp, #16
    1996:	6808      	ldr	r0, [r1, #0]
    1998:	f853 2b04 	ldr.w	r2, [r3], #4
    199c:	6881      	ldr	r1, [r0, #8]
    199e:	9301      	str	r3, [sp, #4]
    19a0:	f000 f966 	bl	1c70 <_vfiprintf_r>
    19a4:	b003      	add	sp, #12
    19a6:	f85d eb04 	ldr.w	lr, [sp], #4
    19aa:	b004      	add	sp, #16
    19ac:	4770      	bx	lr
    19ae:	bf00      	nop
    19b0:	20000030 	.word	0x20000030

000019b4 <memset>:
    19b4:	b470      	push	{r4, r5, r6}
    19b6:	0786      	lsls	r6, r0, #30
    19b8:	d046      	beq.n	1a48 <memset+0x94>
    19ba:	1e54      	subs	r4, r2, #1
    19bc:	2a00      	cmp	r2, #0
    19be:	d041      	beq.n	1a44 <memset+0x90>
    19c0:	b2ca      	uxtb	r2, r1
    19c2:	4603      	mov	r3, r0
    19c4:	e002      	b.n	19cc <memset+0x18>
    19c6:	f114 34ff 	adds.w	r4, r4, #4294967295
    19ca:	d33b      	bcc.n	1a44 <memset+0x90>
    19cc:	f803 2b01 	strb.w	r2, [r3], #1
    19d0:	079d      	lsls	r5, r3, #30
    19d2:	d1f8      	bne.n	19c6 <memset+0x12>
    19d4:	2c03      	cmp	r4, #3
    19d6:	d92e      	bls.n	1a36 <memset+0x82>
    19d8:	b2cd      	uxtb	r5, r1
    19da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    19de:	2c0f      	cmp	r4, #15
    19e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    19e4:	d919      	bls.n	1a1a <memset+0x66>
    19e6:	f103 0210 	add.w	r2, r3, #16
    19ea:	4626      	mov	r6, r4
    19ec:	3e10      	subs	r6, #16
    19ee:	2e0f      	cmp	r6, #15
    19f0:	f842 5c10 	str.w	r5, [r2, #-16]
    19f4:	f842 5c0c 	str.w	r5, [r2, #-12]
    19f8:	f842 5c08 	str.w	r5, [r2, #-8]
    19fc:	f842 5c04 	str.w	r5, [r2, #-4]
    1a00:	f102 0210 	add.w	r2, r2, #16
    1a04:	d8f2      	bhi.n	19ec <memset+0x38>
    1a06:	f1a4 0210 	sub.w	r2, r4, #16
    1a0a:	f022 020f 	bic.w	r2, r2, #15
    1a0e:	f004 040f 	and.w	r4, r4, #15
    1a12:	3210      	adds	r2, #16
    1a14:	2c03      	cmp	r4, #3
    1a16:	4413      	add	r3, r2
    1a18:	d90d      	bls.n	1a36 <memset+0x82>
    1a1a:	461e      	mov	r6, r3
    1a1c:	4622      	mov	r2, r4
    1a1e:	3a04      	subs	r2, #4
    1a20:	2a03      	cmp	r2, #3
    1a22:	f846 5b04 	str.w	r5, [r6], #4
    1a26:	d8fa      	bhi.n	1a1e <memset+0x6a>
    1a28:	1f22      	subs	r2, r4, #4
    1a2a:	f022 0203 	bic.w	r2, r2, #3
    1a2e:	3204      	adds	r2, #4
    1a30:	4413      	add	r3, r2
    1a32:	f004 0403 	and.w	r4, r4, #3
    1a36:	b12c      	cbz	r4, 1a44 <memset+0x90>
    1a38:	b2c9      	uxtb	r1, r1
    1a3a:	441c      	add	r4, r3
    1a3c:	f803 1b01 	strb.w	r1, [r3], #1
    1a40:	429c      	cmp	r4, r3
    1a42:	d1fb      	bne.n	1a3c <memset+0x88>
    1a44:	bc70      	pop	{r4, r5, r6}
    1a46:	4770      	bx	lr
    1a48:	4614      	mov	r4, r2
    1a4a:	4603      	mov	r3, r0
    1a4c:	e7c2      	b.n	19d4 <memset+0x20>
    1a4e:	bf00      	nop

00001a50 <setbuf>:
    1a50:	2900      	cmp	r1, #0
    1a52:	bf0c      	ite	eq
    1a54:	2202      	moveq	r2, #2
    1a56:	2200      	movne	r2, #0
    1a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1a5c:	f000 b800 	b.w	1a60 <setvbuf>

00001a60 <setvbuf>:
    1a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a64:	4c61      	ldr	r4, [pc, #388]	; (1bec <setvbuf+0x18c>)
    1a66:	6825      	ldr	r5, [r4, #0]
    1a68:	b083      	sub	sp, #12
    1a6a:	4604      	mov	r4, r0
    1a6c:	460f      	mov	r7, r1
    1a6e:	4690      	mov	r8, r2
    1a70:	461e      	mov	r6, r3
    1a72:	b115      	cbz	r5, 1a7a <setvbuf+0x1a>
    1a74:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1a76:	2b00      	cmp	r3, #0
    1a78:	d064      	beq.n	1b44 <setvbuf+0xe4>
    1a7a:	f1b8 0f02 	cmp.w	r8, #2
    1a7e:	d006      	beq.n	1a8e <setvbuf+0x2e>
    1a80:	f1b8 0f01 	cmp.w	r8, #1
    1a84:	f200 809f 	bhi.w	1bc6 <setvbuf+0x166>
    1a88:	2e00      	cmp	r6, #0
    1a8a:	f2c0 809c 	blt.w	1bc6 <setvbuf+0x166>
    1a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1a90:	07d8      	lsls	r0, r3, #31
    1a92:	d534      	bpl.n	1afe <setvbuf+0x9e>
    1a94:	4621      	mov	r1, r4
    1a96:	4628      	mov	r0, r5
    1a98:	f001 f888 	bl	2bac <_fflush_r>
    1a9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1a9e:	b141      	cbz	r1, 1ab2 <setvbuf+0x52>
    1aa0:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1aa4:	4299      	cmp	r1, r3
    1aa6:	d002      	beq.n	1aae <setvbuf+0x4e>
    1aa8:	4628      	mov	r0, r5
    1aaa:	f001 f9fd 	bl	2ea8 <_free_r>
    1aae:	2300      	movs	r3, #0
    1ab0:	6323      	str	r3, [r4, #48]	; 0x30
    1ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1ab6:	2200      	movs	r2, #0
    1ab8:	61a2      	str	r2, [r4, #24]
    1aba:	6062      	str	r2, [r4, #4]
    1abc:	061a      	lsls	r2, r3, #24
    1abe:	d43a      	bmi.n	1b36 <setvbuf+0xd6>
    1ac0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    1ac4:	f023 0303 	bic.w	r3, r3, #3
    1ac8:	f1b8 0f02 	cmp.w	r8, #2
    1acc:	81a3      	strh	r3, [r4, #12]
    1ace:	d01d      	beq.n	1b0c <setvbuf+0xac>
    1ad0:	ab01      	add	r3, sp, #4
    1ad2:	466a      	mov	r2, sp
    1ad4:	4621      	mov	r1, r4
    1ad6:	4628      	mov	r0, r5
    1ad8:	f001 fc84 	bl	33e4 <__swhatbuf_r>
    1adc:	89a3      	ldrh	r3, [r4, #12]
    1ade:	4318      	orrs	r0, r3
    1ae0:	81a0      	strh	r0, [r4, #12]
    1ae2:	2e00      	cmp	r6, #0
    1ae4:	d132      	bne.n	1b4c <setvbuf+0xec>
    1ae6:	9e00      	ldr	r6, [sp, #0]
    1ae8:	4630      	mov	r0, r6
    1aea:	f001 fcf3 	bl	34d4 <malloc>
    1aee:	4607      	mov	r7, r0
    1af0:	2800      	cmp	r0, #0
    1af2:	d06b      	beq.n	1bcc <setvbuf+0x16c>
    1af4:	89a3      	ldrh	r3, [r4, #12]
    1af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1afa:	81a3      	strh	r3, [r4, #12]
    1afc:	e028      	b.n	1b50 <setvbuf+0xf0>
    1afe:	89a3      	ldrh	r3, [r4, #12]
    1b00:	0599      	lsls	r1, r3, #22
    1b02:	d4c7      	bmi.n	1a94 <setvbuf+0x34>
    1b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1b06:	f001 fc69 	bl	33dc <__retarget_lock_acquire_recursive>
    1b0a:	e7c3      	b.n	1a94 <setvbuf+0x34>
    1b0c:	2500      	movs	r5, #0
    1b0e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    1b10:	2600      	movs	r6, #0
    1b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
    1b16:	f043 0302 	orr.w	r3, r3, #2
    1b1a:	2001      	movs	r0, #1
    1b1c:	60a6      	str	r6, [r4, #8]
    1b1e:	07ce      	lsls	r6, r1, #31
    1b20:	81a3      	strh	r3, [r4, #12]
    1b22:	6022      	str	r2, [r4, #0]
    1b24:	6122      	str	r2, [r4, #16]
    1b26:	6160      	str	r0, [r4, #20]
    1b28:	d401      	bmi.n	1b2e <setvbuf+0xce>
    1b2a:	0598      	lsls	r0, r3, #22
    1b2c:	d53e      	bpl.n	1bac <setvbuf+0x14c>
    1b2e:	4628      	mov	r0, r5
    1b30:	b003      	add	sp, #12
    1b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1b36:	6921      	ldr	r1, [r4, #16]
    1b38:	4628      	mov	r0, r5
    1b3a:	f001 f9b5 	bl	2ea8 <_free_r>
    1b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1b42:	e7bd      	b.n	1ac0 <setvbuf+0x60>
    1b44:	4628      	mov	r0, r5
    1b46:	f001 f889 	bl	2c5c <__sinit>
    1b4a:	e796      	b.n	1a7a <setvbuf+0x1a>
    1b4c:	2f00      	cmp	r7, #0
    1b4e:	d0cb      	beq.n	1ae8 <setvbuf+0x88>
    1b50:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1b52:	2b00      	cmp	r3, #0
    1b54:	d033      	beq.n	1bbe <setvbuf+0x15e>
    1b56:	9b00      	ldr	r3, [sp, #0]
    1b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    1b5c:	6027      	str	r7, [r4, #0]
    1b5e:	429e      	cmp	r6, r3
    1b60:	bf1c      	itt	ne
    1b62:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
    1b66:	81a2      	strhne	r2, [r4, #12]
    1b68:	f1b8 0f01 	cmp.w	r8, #1
    1b6c:	bf04      	itt	eq
    1b6e:	f042 0201 	orreq.w	r2, r2, #1
    1b72:	81a2      	strheq	r2, [r4, #12]
    1b74:	b292      	uxth	r2, r2
    1b76:	f012 0308 	ands.w	r3, r2, #8
    1b7a:	6127      	str	r7, [r4, #16]
    1b7c:	6166      	str	r6, [r4, #20]
    1b7e:	d00e      	beq.n	1b9e <setvbuf+0x13e>
    1b80:	07d1      	lsls	r1, r2, #31
    1b82:	d51a      	bpl.n	1bba <setvbuf+0x15a>
    1b84:	6e65      	ldr	r5, [r4, #100]	; 0x64
    1b86:	4276      	negs	r6, r6
    1b88:	2300      	movs	r3, #0
    1b8a:	f015 0501 	ands.w	r5, r5, #1
    1b8e:	61a6      	str	r6, [r4, #24]
    1b90:	60a3      	str	r3, [r4, #8]
    1b92:	d009      	beq.n	1ba8 <setvbuf+0x148>
    1b94:	2500      	movs	r5, #0
    1b96:	4628      	mov	r0, r5
    1b98:	b003      	add	sp, #12
    1b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1b9e:	60a3      	str	r3, [r4, #8]
    1ba0:	6e65      	ldr	r5, [r4, #100]	; 0x64
    1ba2:	f015 0501 	ands.w	r5, r5, #1
    1ba6:	d1f5      	bne.n	1b94 <setvbuf+0x134>
    1ba8:	0593      	lsls	r3, r2, #22
    1baa:	d4c0      	bmi.n	1b2e <setvbuf+0xce>
    1bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1bae:	f001 fc17 	bl	33e0 <__retarget_lock_release_recursive>
    1bb2:	4628      	mov	r0, r5
    1bb4:	b003      	add	sp, #12
    1bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1bba:	60a6      	str	r6, [r4, #8]
    1bbc:	e7f0      	b.n	1ba0 <setvbuf+0x140>
    1bbe:	4628      	mov	r0, r5
    1bc0:	f001 f84c 	bl	2c5c <__sinit>
    1bc4:	e7c7      	b.n	1b56 <setvbuf+0xf6>
    1bc6:	f04f 35ff 	mov.w	r5, #4294967295
    1bca:	e7b0      	b.n	1b2e <setvbuf+0xce>
    1bcc:	f8dd 9000 	ldr.w	r9, [sp]
    1bd0:	45b1      	cmp	r9, r6
    1bd2:	d004      	beq.n	1bde <setvbuf+0x17e>
    1bd4:	4648      	mov	r0, r9
    1bd6:	f001 fc7d 	bl	34d4 <malloc>
    1bda:	4607      	mov	r7, r0
    1bdc:	b920      	cbnz	r0, 1be8 <setvbuf+0x188>
    1bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1be2:	f04f 35ff 	mov.w	r5, #4294967295
    1be6:	e792      	b.n	1b0e <setvbuf+0xae>
    1be8:	464e      	mov	r6, r9
    1bea:	e783      	b.n	1af4 <setvbuf+0x94>
    1bec:	20000030 	.word	0x20000030

00001bf0 <__sprint_r.part.0>:
    1bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bf4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    1bf6:	049c      	lsls	r4, r3, #18
    1bf8:	4693      	mov	fp, r2
    1bfa:	d52f      	bpl.n	1c5c <__sprint_r.part.0+0x6c>
    1bfc:	6893      	ldr	r3, [r2, #8]
    1bfe:	6812      	ldr	r2, [r2, #0]
    1c00:	b353      	cbz	r3, 1c58 <__sprint_r.part.0+0x68>
    1c02:	460e      	mov	r6, r1
    1c04:	4607      	mov	r7, r0
    1c06:	f102 0908 	add.w	r9, r2, #8
    1c0a:	e919 0420 	ldmdb	r9, {r5, sl}
    1c0e:	ea5f 089a 	movs.w	r8, sl, lsr #2
    1c12:	d017      	beq.n	1c44 <__sprint_r.part.0+0x54>
    1c14:	3d04      	subs	r5, #4
    1c16:	2400      	movs	r4, #0
    1c18:	e001      	b.n	1c1e <__sprint_r.part.0+0x2e>
    1c1a:	45a0      	cmp	r8, r4
    1c1c:	d010      	beq.n	1c40 <__sprint_r.part.0+0x50>
    1c1e:	4632      	mov	r2, r6
    1c20:	f855 1f04 	ldr.w	r1, [r5, #4]!
    1c24:	4638      	mov	r0, r7
    1c26:	f001 f8bb 	bl	2da0 <_fputwc_r>
    1c2a:	1c43      	adds	r3, r0, #1
    1c2c:	f104 0401 	add.w	r4, r4, #1
    1c30:	d1f3      	bne.n	1c1a <__sprint_r.part.0+0x2a>
    1c32:	2300      	movs	r3, #0
    1c34:	f8cb 3008 	str.w	r3, [fp, #8]
    1c38:	f8cb 3004 	str.w	r3, [fp, #4]
    1c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c40:	f8db 3008 	ldr.w	r3, [fp, #8]
    1c44:	f02a 0a03 	bic.w	sl, sl, #3
    1c48:	eba3 030a 	sub.w	r3, r3, sl
    1c4c:	f8cb 3008 	str.w	r3, [fp, #8]
    1c50:	f109 0908 	add.w	r9, r9, #8
    1c54:	2b00      	cmp	r3, #0
    1c56:	d1d8      	bne.n	1c0a <__sprint_r.part.0+0x1a>
    1c58:	2000      	movs	r0, #0
    1c5a:	e7ea      	b.n	1c32 <__sprint_r.part.0+0x42>
    1c5c:	f001 fa0a 	bl	3074 <__sfvwrite_r>
    1c60:	2300      	movs	r3, #0
    1c62:	f8cb 3008 	str.w	r3, [fp, #8]
    1c66:	f8cb 3004 	str.w	r3, [fp, #4]
    1c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c6e:	bf00      	nop

00001c70 <_vfiprintf_r>:
    1c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c74:	b0ad      	sub	sp, #180	; 0xb4
    1c76:	461d      	mov	r5, r3
    1c78:	468b      	mov	fp, r1
    1c7a:	4690      	mov	r8, r2
    1c7c:	9307      	str	r3, [sp, #28]
    1c7e:	9006      	str	r0, [sp, #24]
    1c80:	b118      	cbz	r0, 1c8a <_vfiprintf_r+0x1a>
    1c82:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1c84:	2b00      	cmp	r3, #0
    1c86:	f000 80f3 	beq.w	1e70 <_vfiprintf_r+0x200>
    1c8a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    1c8e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
    1c92:	07df      	lsls	r7, r3, #31
    1c94:	b281      	uxth	r1, r0
    1c96:	d402      	bmi.n	1c9e <_vfiprintf_r+0x2e>
    1c98:	058e      	lsls	r6, r1, #22
    1c9a:	f140 80fc 	bpl.w	1e96 <_vfiprintf_r+0x226>
    1c9e:	048c      	lsls	r4, r1, #18
    1ca0:	d40a      	bmi.n	1cb8 <_vfiprintf_r+0x48>
    1ca2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    1ca6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
    1caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1cae:	f8ab 100c 	strh.w	r1, [fp, #12]
    1cb2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
    1cb6:	b289      	uxth	r1, r1
    1cb8:	0708      	lsls	r0, r1, #28
    1cba:	f140 80b3 	bpl.w	1e24 <_vfiprintf_r+0x1b4>
    1cbe:	f8db 3010 	ldr.w	r3, [fp, #16]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	f000 80ae 	beq.w	1e24 <_vfiprintf_r+0x1b4>
    1cc8:	f001 031a 	and.w	r3, r1, #26
    1ccc:	2b0a      	cmp	r3, #10
    1cce:	f000 80b5 	beq.w	1e3c <_vfiprintf_r+0x1cc>
    1cd2:	2300      	movs	r3, #0
    1cd4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    1cd8:	930b      	str	r3, [sp, #44]	; 0x2c
    1cda:	9311      	str	r3, [sp, #68]	; 0x44
    1cdc:	9310      	str	r3, [sp, #64]	; 0x40
    1cde:	9303      	str	r3, [sp, #12]
    1ce0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    1ce4:	46ca      	mov	sl, r9
    1ce6:	f8cd b010 	str.w	fp, [sp, #16]
    1cea:	f898 3000 	ldrb.w	r3, [r8]
    1cee:	4644      	mov	r4, r8
    1cf0:	b1fb      	cbz	r3, 1d32 <_vfiprintf_r+0xc2>
    1cf2:	2b25      	cmp	r3, #37	; 0x25
    1cf4:	d102      	bne.n	1cfc <_vfiprintf_r+0x8c>
    1cf6:	e01c      	b.n	1d32 <_vfiprintf_r+0xc2>
    1cf8:	2b25      	cmp	r3, #37	; 0x25
    1cfa:	d003      	beq.n	1d04 <_vfiprintf_r+0x94>
    1cfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    1d00:	2b00      	cmp	r3, #0
    1d02:	d1f9      	bne.n	1cf8 <_vfiprintf_r+0x88>
    1d04:	eba4 0508 	sub.w	r5, r4, r8
    1d08:	b19d      	cbz	r5, 1d32 <_vfiprintf_r+0xc2>
    1d0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1d0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    1d0e:	f8ca 8000 	str.w	r8, [sl]
    1d12:	3301      	adds	r3, #1
    1d14:	442a      	add	r2, r5
    1d16:	2b07      	cmp	r3, #7
    1d18:	f8ca 5004 	str.w	r5, [sl, #4]
    1d1c:	9211      	str	r2, [sp, #68]	; 0x44
    1d1e:	9310      	str	r3, [sp, #64]	; 0x40
    1d20:	dd7a      	ble.n	1e18 <_vfiprintf_r+0x1a8>
    1d22:	2a00      	cmp	r2, #0
    1d24:	f040 84b0 	bne.w	2688 <_vfiprintf_r+0xa18>
    1d28:	9b03      	ldr	r3, [sp, #12]
    1d2a:	9210      	str	r2, [sp, #64]	; 0x40
    1d2c:	442b      	add	r3, r5
    1d2e:	46ca      	mov	sl, r9
    1d30:	9303      	str	r3, [sp, #12]
    1d32:	7823      	ldrb	r3, [r4, #0]
    1d34:	2b00      	cmp	r3, #0
    1d36:	f000 83e0 	beq.w	24fa <_vfiprintf_r+0x88a>
    1d3a:	2000      	movs	r0, #0
    1d3c:	f04f 0300 	mov.w	r3, #0
    1d40:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    1d44:	f104 0801 	add.w	r8, r4, #1
    1d48:	7862      	ldrb	r2, [r4, #1]
    1d4a:	4605      	mov	r5, r0
    1d4c:	4606      	mov	r6, r0
    1d4e:	4603      	mov	r3, r0
    1d50:	f04f 34ff 	mov.w	r4, #4294967295
    1d54:	f108 0801 	add.w	r8, r8, #1
    1d58:	f1a2 0120 	sub.w	r1, r2, #32
    1d5c:	2958      	cmp	r1, #88	; 0x58
    1d5e:	f200 82de 	bhi.w	231e <_vfiprintf_r+0x6ae>
    1d62:	e8df f011 	tbh	[pc, r1, lsl #1]
    1d66:	0221      	.short	0x0221
    1d68:	02dc02dc 	.word	0x02dc02dc
    1d6c:	02dc0229 	.word	0x02dc0229
    1d70:	02dc02dc 	.word	0x02dc02dc
    1d74:	02dc02dc 	.word	0x02dc02dc
    1d78:	028902dc 	.word	0x028902dc
    1d7c:	02dc0295 	.word	0x02dc0295
    1d80:	02bd00a2 	.word	0x02bd00a2
    1d84:	019f02dc 	.word	0x019f02dc
    1d88:	01a401a4 	.word	0x01a401a4
    1d8c:	01a401a4 	.word	0x01a401a4
    1d90:	01a401a4 	.word	0x01a401a4
    1d94:	01a401a4 	.word	0x01a401a4
    1d98:	02dc01a4 	.word	0x02dc01a4
    1d9c:	02dc02dc 	.word	0x02dc02dc
    1da0:	02dc02dc 	.word	0x02dc02dc
    1da4:	02dc02dc 	.word	0x02dc02dc
    1da8:	02dc02dc 	.word	0x02dc02dc
    1dac:	01b202dc 	.word	0x01b202dc
    1db0:	02dc02dc 	.word	0x02dc02dc
    1db4:	02dc02dc 	.word	0x02dc02dc
    1db8:	02dc02dc 	.word	0x02dc02dc
    1dbc:	02dc02dc 	.word	0x02dc02dc
    1dc0:	02dc02dc 	.word	0x02dc02dc
    1dc4:	02dc0197 	.word	0x02dc0197
    1dc8:	02dc02dc 	.word	0x02dc02dc
    1dcc:	02dc02dc 	.word	0x02dc02dc
    1dd0:	02dc019b 	.word	0x02dc019b
    1dd4:	025302dc 	.word	0x025302dc
    1dd8:	02dc02dc 	.word	0x02dc02dc
    1ddc:	02dc02dc 	.word	0x02dc02dc
    1de0:	02dc02dc 	.word	0x02dc02dc
    1de4:	02dc02dc 	.word	0x02dc02dc
    1de8:	02dc02dc 	.word	0x02dc02dc
    1dec:	021b025a 	.word	0x021b025a
    1df0:	02dc02dc 	.word	0x02dc02dc
    1df4:	026e02dc 	.word	0x026e02dc
    1df8:	02dc021b 	.word	0x02dc021b
    1dfc:	027302dc 	.word	0x027302dc
    1e00:	01f502dc 	.word	0x01f502dc
    1e04:	02090182 	.word	0x02090182
    1e08:	02dc02d7 	.word	0x02dc02d7
    1e0c:	02dc029a 	.word	0x02dc029a
    1e10:	02dc00a7 	.word	0x02dc00a7
    1e14:	022e02dc 	.word	0x022e02dc
    1e18:	f10a 0a08 	add.w	sl, sl, #8
    1e1c:	9b03      	ldr	r3, [sp, #12]
    1e1e:	442b      	add	r3, r5
    1e20:	9303      	str	r3, [sp, #12]
    1e22:	e786      	b.n	1d32 <_vfiprintf_r+0xc2>
    1e24:	4659      	mov	r1, fp
    1e26:	9806      	ldr	r0, [sp, #24]
    1e28:	f000 fdac 	bl	2984 <__swsetup_r>
    1e2c:	bb18      	cbnz	r0, 1e76 <_vfiprintf_r+0x206>
    1e2e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
    1e32:	f001 031a 	and.w	r3, r1, #26
    1e36:	2b0a      	cmp	r3, #10
    1e38:	f47f af4b 	bne.w	1cd2 <_vfiprintf_r+0x62>
    1e3c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
    1e40:	2b00      	cmp	r3, #0
    1e42:	f6ff af46 	blt.w	1cd2 <_vfiprintf_r+0x62>
    1e46:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    1e4a:	07db      	lsls	r3, r3, #31
    1e4c:	d405      	bmi.n	1e5a <_vfiprintf_r+0x1ea>
    1e4e:	058f      	lsls	r7, r1, #22
    1e50:	d403      	bmi.n	1e5a <_vfiprintf_r+0x1ea>
    1e52:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    1e56:	f001 fac3 	bl	33e0 <__retarget_lock_release_recursive>
    1e5a:	462b      	mov	r3, r5
    1e5c:	4642      	mov	r2, r8
    1e5e:	4659      	mov	r1, fp
    1e60:	9806      	ldr	r0, [sp, #24]
    1e62:	f000 fd4d 	bl	2900 <__sbprintf>
    1e66:	9003      	str	r0, [sp, #12]
    1e68:	9803      	ldr	r0, [sp, #12]
    1e6a:	b02d      	add	sp, #180	; 0xb4
    1e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e70:	f000 fef4 	bl	2c5c <__sinit>
    1e74:	e709      	b.n	1c8a <_vfiprintf_r+0x1a>
    1e76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    1e7a:	07d9      	lsls	r1, r3, #31
    1e7c:	d404      	bmi.n	1e88 <_vfiprintf_r+0x218>
    1e7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    1e82:	059a      	lsls	r2, r3, #22
    1e84:	f140 84aa 	bpl.w	27dc <_vfiprintf_r+0xb6c>
    1e88:	f04f 33ff 	mov.w	r3, #4294967295
    1e8c:	9303      	str	r3, [sp, #12]
    1e8e:	9803      	ldr	r0, [sp, #12]
    1e90:	b02d      	add	sp, #180	; 0xb4
    1e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e96:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    1e9a:	f001 fa9f 	bl	33dc <__retarget_lock_acquire_recursive>
    1e9e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
    1ea2:	b281      	uxth	r1, r0
    1ea4:	e6fb      	b.n	1c9e <_vfiprintf_r+0x2e>
    1ea6:	4276      	negs	r6, r6
    1ea8:	9207      	str	r2, [sp, #28]
    1eaa:	f043 0304 	orr.w	r3, r3, #4
    1eae:	f898 2000 	ldrb.w	r2, [r8]
    1eb2:	e74f      	b.n	1d54 <_vfiprintf_r+0xe4>
    1eb4:	9608      	str	r6, [sp, #32]
    1eb6:	069e      	lsls	r6, r3, #26
    1eb8:	f100 8450 	bmi.w	275c <_vfiprintf_r+0xaec>
    1ebc:	9907      	ldr	r1, [sp, #28]
    1ebe:	06dd      	lsls	r5, r3, #27
    1ec0:	460a      	mov	r2, r1
    1ec2:	f100 83ef 	bmi.w	26a4 <_vfiprintf_r+0xa34>
    1ec6:	0658      	lsls	r0, r3, #25
    1ec8:	f140 83ec 	bpl.w	26a4 <_vfiprintf_r+0xa34>
    1ecc:	880e      	ldrh	r6, [r1, #0]
    1ece:	3104      	adds	r1, #4
    1ed0:	2700      	movs	r7, #0
    1ed2:	2201      	movs	r2, #1
    1ed4:	9107      	str	r1, [sp, #28]
    1ed6:	f04f 0100 	mov.w	r1, #0
    1eda:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
    1ede:	2500      	movs	r5, #0
    1ee0:	1c61      	adds	r1, r4, #1
    1ee2:	f000 8116 	beq.w	2112 <_vfiprintf_r+0x4a2>
    1ee6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
    1eea:	9102      	str	r1, [sp, #8]
    1eec:	ea56 0107 	orrs.w	r1, r6, r7
    1ef0:	f040 8114 	bne.w	211c <_vfiprintf_r+0x4ac>
    1ef4:	2c00      	cmp	r4, #0
    1ef6:	f040 835c 	bne.w	25b2 <_vfiprintf_r+0x942>
    1efa:	2a00      	cmp	r2, #0
    1efc:	f040 83b7 	bne.w	266e <_vfiprintf_r+0x9fe>
    1f00:	f013 0301 	ands.w	r3, r3, #1
    1f04:	9305      	str	r3, [sp, #20]
    1f06:	f000 8457 	beq.w	27b8 <_vfiprintf_r+0xb48>
    1f0a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
    1f0e:	2330      	movs	r3, #48	; 0x30
    1f10:	f80b 3d41 	strb.w	r3, [fp, #-65]!
    1f14:	9b05      	ldr	r3, [sp, #20]
    1f16:	42a3      	cmp	r3, r4
    1f18:	bfb8      	it	lt
    1f1a:	4623      	movlt	r3, r4
    1f1c:	9301      	str	r3, [sp, #4]
    1f1e:	b10d      	cbz	r5, 1f24 <_vfiprintf_r+0x2b4>
    1f20:	3301      	adds	r3, #1
    1f22:	9301      	str	r3, [sp, #4]
    1f24:	9b02      	ldr	r3, [sp, #8]
    1f26:	f013 0302 	ands.w	r3, r3, #2
    1f2a:	9309      	str	r3, [sp, #36]	; 0x24
    1f2c:	d002      	beq.n	1f34 <_vfiprintf_r+0x2c4>
    1f2e:	9b01      	ldr	r3, [sp, #4]
    1f30:	3302      	adds	r3, #2
    1f32:	9301      	str	r3, [sp, #4]
    1f34:	9b02      	ldr	r3, [sp, #8]
    1f36:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    1f3a:	930a      	str	r3, [sp, #40]	; 0x28
    1f3c:	f040 8217 	bne.w	236e <_vfiprintf_r+0x6fe>
    1f40:	9b08      	ldr	r3, [sp, #32]
    1f42:	9a01      	ldr	r2, [sp, #4]
    1f44:	1a9d      	subs	r5, r3, r2
    1f46:	2d00      	cmp	r5, #0
    1f48:	f340 8211 	ble.w	236e <_vfiprintf_r+0x6fe>
    1f4c:	2d10      	cmp	r5, #16
    1f4e:	f340 8490 	ble.w	2872 <_vfiprintf_r+0xc02>
    1f52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1f54:	9a11      	ldr	r2, [sp, #68]	; 0x44
    1f56:	4ec4      	ldr	r6, [pc, #784]	; (2268 <_vfiprintf_r+0x5f8>)
    1f58:	46d6      	mov	lr, sl
    1f5a:	2710      	movs	r7, #16
    1f5c:	46a2      	mov	sl, r4
    1f5e:	4619      	mov	r1, r3
    1f60:	9c06      	ldr	r4, [sp, #24]
    1f62:	e007      	b.n	1f74 <_vfiprintf_r+0x304>
    1f64:	f101 0c02 	add.w	ip, r1, #2
    1f68:	f10e 0e08 	add.w	lr, lr, #8
    1f6c:	4601      	mov	r1, r0
    1f6e:	3d10      	subs	r5, #16
    1f70:	2d10      	cmp	r5, #16
    1f72:	dd11      	ble.n	1f98 <_vfiprintf_r+0x328>
    1f74:	1c48      	adds	r0, r1, #1
    1f76:	3210      	adds	r2, #16
    1f78:	2807      	cmp	r0, #7
    1f7a:	9211      	str	r2, [sp, #68]	; 0x44
    1f7c:	e88e 00c0 	stmia.w	lr, {r6, r7}
    1f80:	9010      	str	r0, [sp, #64]	; 0x40
    1f82:	ddef      	ble.n	1f64 <_vfiprintf_r+0x2f4>
    1f84:	2a00      	cmp	r2, #0
    1f86:	f040 81e4 	bne.w	2352 <_vfiprintf_r+0x6e2>
    1f8a:	3d10      	subs	r5, #16
    1f8c:	2d10      	cmp	r5, #16
    1f8e:	4611      	mov	r1, r2
    1f90:	f04f 0c01 	mov.w	ip, #1
    1f94:	46ce      	mov	lr, r9
    1f96:	dced      	bgt.n	1f74 <_vfiprintf_r+0x304>
    1f98:	4654      	mov	r4, sl
    1f9a:	4661      	mov	r1, ip
    1f9c:	46f2      	mov	sl, lr
    1f9e:	442a      	add	r2, r5
    1fa0:	2907      	cmp	r1, #7
    1fa2:	9211      	str	r2, [sp, #68]	; 0x44
    1fa4:	f8ca 6000 	str.w	r6, [sl]
    1fa8:	f8ca 5004 	str.w	r5, [sl, #4]
    1fac:	9110      	str	r1, [sp, #64]	; 0x40
    1fae:	f300 82ec 	bgt.w	258a <_vfiprintf_r+0x91a>
    1fb2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    1fb6:	f10a 0a08 	add.w	sl, sl, #8
    1fba:	1c48      	adds	r0, r1, #1
    1fbc:	2d00      	cmp	r5, #0
    1fbe:	f040 81de 	bne.w	237e <_vfiprintf_r+0x70e>
    1fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	f000 81f8 	beq.w	23ba <_vfiprintf_r+0x74a>
    1fca:	3202      	adds	r2, #2
    1fcc:	a90e      	add	r1, sp, #56	; 0x38
    1fce:	2302      	movs	r3, #2
    1fd0:	2807      	cmp	r0, #7
    1fd2:	9211      	str	r2, [sp, #68]	; 0x44
    1fd4:	9010      	str	r0, [sp, #64]	; 0x40
    1fd6:	e88a 000a 	stmia.w	sl, {r1, r3}
    1fda:	f340 81ea 	ble.w	23b2 <_vfiprintf_r+0x742>
    1fde:	2a00      	cmp	r2, #0
    1fe0:	f040 838c 	bne.w	26fc <_vfiprintf_r+0xa8c>
    1fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fe6:	2b80      	cmp	r3, #128	; 0x80
    1fe8:	f04f 0001 	mov.w	r0, #1
    1fec:	4611      	mov	r1, r2
    1fee:	46ca      	mov	sl, r9
    1ff0:	f040 81e7 	bne.w	23c2 <_vfiprintf_r+0x752>
    1ff4:	9b08      	ldr	r3, [sp, #32]
    1ff6:	9d01      	ldr	r5, [sp, #4]
    1ff8:	1b5e      	subs	r6, r3, r5
    1ffa:	2e00      	cmp	r6, #0
    1ffc:	f340 81e1 	ble.w	23c2 <_vfiprintf_r+0x752>
    2000:	2e10      	cmp	r6, #16
    2002:	4d9a      	ldr	r5, [pc, #616]	; (226c <_vfiprintf_r+0x5fc>)
    2004:	f340 8450 	ble.w	28a8 <_vfiprintf_r+0xc38>
    2008:	46d4      	mov	ip, sl
    200a:	2710      	movs	r7, #16
    200c:	46a2      	mov	sl, r4
    200e:	9c06      	ldr	r4, [sp, #24]
    2010:	e007      	b.n	2022 <_vfiprintf_r+0x3b2>
    2012:	f101 0e02 	add.w	lr, r1, #2
    2016:	f10c 0c08 	add.w	ip, ip, #8
    201a:	4601      	mov	r1, r0
    201c:	3e10      	subs	r6, #16
    201e:	2e10      	cmp	r6, #16
    2020:	dd11      	ble.n	2046 <_vfiprintf_r+0x3d6>
    2022:	1c48      	adds	r0, r1, #1
    2024:	3210      	adds	r2, #16
    2026:	2807      	cmp	r0, #7
    2028:	9211      	str	r2, [sp, #68]	; 0x44
    202a:	e88c 00a0 	stmia.w	ip, {r5, r7}
    202e:	9010      	str	r0, [sp, #64]	; 0x40
    2030:	ddef      	ble.n	2012 <_vfiprintf_r+0x3a2>
    2032:	2a00      	cmp	r2, #0
    2034:	f040 829d 	bne.w	2572 <_vfiprintf_r+0x902>
    2038:	3e10      	subs	r6, #16
    203a:	2e10      	cmp	r6, #16
    203c:	f04f 0e01 	mov.w	lr, #1
    2040:	4611      	mov	r1, r2
    2042:	46cc      	mov	ip, r9
    2044:	dced      	bgt.n	2022 <_vfiprintf_r+0x3b2>
    2046:	4654      	mov	r4, sl
    2048:	46e2      	mov	sl, ip
    204a:	4432      	add	r2, r6
    204c:	f1be 0f07 	cmp.w	lr, #7
    2050:	9211      	str	r2, [sp, #68]	; 0x44
    2052:	e88a 0060 	stmia.w	sl, {r5, r6}
    2056:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    205a:	f300 8369 	bgt.w	2730 <_vfiprintf_r+0xac0>
    205e:	f10a 0a08 	add.w	sl, sl, #8
    2062:	f10e 0001 	add.w	r0, lr, #1
    2066:	4671      	mov	r1, lr
    2068:	e1ab      	b.n	23c2 <_vfiprintf_r+0x752>
    206a:	9608      	str	r6, [sp, #32]
    206c:	f013 0220 	ands.w	r2, r3, #32
    2070:	f040 838c 	bne.w	278c <_vfiprintf_r+0xb1c>
    2074:	f013 0110 	ands.w	r1, r3, #16
    2078:	f040 831a 	bne.w	26b0 <_vfiprintf_r+0xa40>
    207c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
    2080:	f000 8316 	beq.w	26b0 <_vfiprintf_r+0xa40>
    2084:	9807      	ldr	r0, [sp, #28]
    2086:	460a      	mov	r2, r1
    2088:	4601      	mov	r1, r0
    208a:	3104      	adds	r1, #4
    208c:	8806      	ldrh	r6, [r0, #0]
    208e:	9107      	str	r1, [sp, #28]
    2090:	2700      	movs	r7, #0
    2092:	e720      	b.n	1ed6 <_vfiprintf_r+0x266>
    2094:	9608      	str	r6, [sp, #32]
    2096:	f043 0310 	orr.w	r3, r3, #16
    209a:	e7e7      	b.n	206c <_vfiprintf_r+0x3fc>
    209c:	9608      	str	r6, [sp, #32]
    209e:	f043 0310 	orr.w	r3, r3, #16
    20a2:	e708      	b.n	1eb6 <_vfiprintf_r+0x246>
    20a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    20a8:	f898 2000 	ldrb.w	r2, [r8]
    20ac:	e652      	b.n	1d54 <_vfiprintf_r+0xe4>
    20ae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    20b2:	2600      	movs	r6, #0
    20b4:	f818 2b01 	ldrb.w	r2, [r8], #1
    20b8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    20bc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
    20c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    20c4:	2909      	cmp	r1, #9
    20c6:	d9f5      	bls.n	20b4 <_vfiprintf_r+0x444>
    20c8:	e646      	b.n	1d58 <_vfiprintf_r+0xe8>
    20ca:	9608      	str	r6, [sp, #32]
    20cc:	2800      	cmp	r0, #0
    20ce:	f040 8408 	bne.w	28e2 <_vfiprintf_r+0xc72>
    20d2:	f043 0310 	orr.w	r3, r3, #16
    20d6:	069e      	lsls	r6, r3, #26
    20d8:	f100 834c 	bmi.w	2774 <_vfiprintf_r+0xb04>
    20dc:	06dd      	lsls	r5, r3, #27
    20de:	f100 82f3 	bmi.w	26c8 <_vfiprintf_r+0xa58>
    20e2:	0658      	lsls	r0, r3, #25
    20e4:	f140 82f0 	bpl.w	26c8 <_vfiprintf_r+0xa58>
    20e8:	9d07      	ldr	r5, [sp, #28]
    20ea:	f9b5 6000 	ldrsh.w	r6, [r5]
    20ee:	462a      	mov	r2, r5
    20f0:	17f7      	asrs	r7, r6, #31
    20f2:	3204      	adds	r2, #4
    20f4:	4630      	mov	r0, r6
    20f6:	4639      	mov	r1, r7
    20f8:	9207      	str	r2, [sp, #28]
    20fa:	2800      	cmp	r0, #0
    20fc:	f171 0200 	sbcs.w	r2, r1, #0
    2100:	f2c0 835d 	blt.w	27be <_vfiprintf_r+0xb4e>
    2104:	1c61      	adds	r1, r4, #1
    2106:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    210a:	f04f 0201 	mov.w	r2, #1
    210e:	f47f aeea 	bne.w	1ee6 <_vfiprintf_r+0x276>
    2112:	ea56 0107 	orrs.w	r1, r6, r7
    2116:	f000 824d 	beq.w	25b4 <_vfiprintf_r+0x944>
    211a:	9302      	str	r3, [sp, #8]
    211c:	2a01      	cmp	r2, #1
    211e:	f000 828c 	beq.w	263a <_vfiprintf_r+0x9ca>
    2122:	2a02      	cmp	r2, #2
    2124:	f040 825c 	bne.w	25e0 <_vfiprintf_r+0x970>
    2128:	980b      	ldr	r0, [sp, #44]	; 0x2c
    212a:	46cb      	mov	fp, r9
    212c:	0933      	lsrs	r3, r6, #4
    212e:	f006 010f 	and.w	r1, r6, #15
    2132:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
    2136:	093a      	lsrs	r2, r7, #4
    2138:	461e      	mov	r6, r3
    213a:	4617      	mov	r7, r2
    213c:	5c43      	ldrb	r3, [r0, r1]
    213e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
    2142:	ea56 0307 	orrs.w	r3, r6, r7
    2146:	d1f1      	bne.n	212c <_vfiprintf_r+0x4bc>
    2148:	eba9 030b 	sub.w	r3, r9, fp
    214c:	9305      	str	r3, [sp, #20]
    214e:	e6e1      	b.n	1f14 <_vfiprintf_r+0x2a4>
    2150:	2800      	cmp	r0, #0
    2152:	f040 83c0 	bne.w	28d6 <_vfiprintf_r+0xc66>
    2156:	0699      	lsls	r1, r3, #26
    2158:	f100 8367 	bmi.w	282a <_vfiprintf_r+0xbba>
    215c:	06da      	lsls	r2, r3, #27
    215e:	f100 80f1 	bmi.w	2344 <_vfiprintf_r+0x6d4>
    2162:	065b      	lsls	r3, r3, #25
    2164:	f140 80ee 	bpl.w	2344 <_vfiprintf_r+0x6d4>
    2168:	9a07      	ldr	r2, [sp, #28]
    216a:	6813      	ldr	r3, [r2, #0]
    216c:	3204      	adds	r2, #4
    216e:	9207      	str	r2, [sp, #28]
    2170:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    2174:	801a      	strh	r2, [r3, #0]
    2176:	e5b8      	b.n	1cea <_vfiprintf_r+0x7a>
    2178:	9807      	ldr	r0, [sp, #28]
    217a:	4a3d      	ldr	r2, [pc, #244]	; (2270 <_vfiprintf_r+0x600>)
    217c:	9608      	str	r6, [sp, #32]
    217e:	920b      	str	r2, [sp, #44]	; 0x2c
    2180:	6806      	ldr	r6, [r0, #0]
    2182:	2278      	movs	r2, #120	; 0x78
    2184:	2130      	movs	r1, #48	; 0x30
    2186:	3004      	adds	r0, #4
    2188:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    218c:	f043 0302 	orr.w	r3, r3, #2
    2190:	9007      	str	r0, [sp, #28]
    2192:	2700      	movs	r7, #0
    2194:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    2198:	2202      	movs	r2, #2
    219a:	e69c      	b.n	1ed6 <_vfiprintf_r+0x266>
    219c:	9608      	str	r6, [sp, #32]
    219e:	2800      	cmp	r0, #0
    21a0:	d099      	beq.n	20d6 <_vfiprintf_r+0x466>
    21a2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    21a6:	e796      	b.n	20d6 <_vfiprintf_r+0x466>
    21a8:	f898 2000 	ldrb.w	r2, [r8]
    21ac:	2d00      	cmp	r5, #0
    21ae:	f47f add1 	bne.w	1d54 <_vfiprintf_r+0xe4>
    21b2:	2001      	movs	r0, #1
    21b4:	2520      	movs	r5, #32
    21b6:	e5cd      	b.n	1d54 <_vfiprintf_r+0xe4>
    21b8:	f043 0301 	orr.w	r3, r3, #1
    21bc:	f898 2000 	ldrb.w	r2, [r8]
    21c0:	e5c8      	b.n	1d54 <_vfiprintf_r+0xe4>
    21c2:	9608      	str	r6, [sp, #32]
    21c4:	2800      	cmp	r0, #0
    21c6:	f040 8393 	bne.w	28f0 <_vfiprintf_r+0xc80>
    21ca:	4929      	ldr	r1, [pc, #164]	; (2270 <_vfiprintf_r+0x600>)
    21cc:	910b      	str	r1, [sp, #44]	; 0x2c
    21ce:	069f      	lsls	r7, r3, #26
    21d0:	f100 82e8 	bmi.w	27a4 <_vfiprintf_r+0xb34>
    21d4:	9807      	ldr	r0, [sp, #28]
    21d6:	06de      	lsls	r6, r3, #27
    21d8:	4601      	mov	r1, r0
    21da:	f100 8270 	bmi.w	26be <_vfiprintf_r+0xa4e>
    21de:	065d      	lsls	r5, r3, #25
    21e0:	f140 826d 	bpl.w	26be <_vfiprintf_r+0xa4e>
    21e4:	3104      	adds	r1, #4
    21e6:	8806      	ldrh	r6, [r0, #0]
    21e8:	9107      	str	r1, [sp, #28]
    21ea:	2700      	movs	r7, #0
    21ec:	07d8      	lsls	r0, r3, #31
    21ee:	f140 8222 	bpl.w	2636 <_vfiprintf_r+0x9c6>
    21f2:	ea56 0107 	orrs.w	r1, r6, r7
    21f6:	f000 821e 	beq.w	2636 <_vfiprintf_r+0x9c6>
    21fa:	2130      	movs	r1, #48	; 0x30
    21fc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    2200:	f043 0302 	orr.w	r3, r3, #2
    2204:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    2208:	2202      	movs	r2, #2
    220a:	e664      	b.n	1ed6 <_vfiprintf_r+0x266>
    220c:	9608      	str	r6, [sp, #32]
    220e:	2800      	cmp	r0, #0
    2210:	f040 836b 	bne.w	28ea <_vfiprintf_r+0xc7a>
    2214:	4917      	ldr	r1, [pc, #92]	; (2274 <_vfiprintf_r+0x604>)
    2216:	910b      	str	r1, [sp, #44]	; 0x2c
    2218:	e7d9      	b.n	21ce <_vfiprintf_r+0x55e>
    221a:	9907      	ldr	r1, [sp, #28]
    221c:	9608      	str	r6, [sp, #32]
    221e:	680a      	ldr	r2, [r1, #0]
    2220:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    2224:	f04f 0000 	mov.w	r0, #0
    2228:	460a      	mov	r2, r1
    222a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    222e:	3204      	adds	r2, #4
    2230:	2001      	movs	r0, #1
    2232:	9001      	str	r0, [sp, #4]
    2234:	9207      	str	r2, [sp, #28]
    2236:	9005      	str	r0, [sp, #20]
    2238:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    223c:	9302      	str	r3, [sp, #8]
    223e:	2400      	movs	r4, #0
    2240:	e670      	b.n	1f24 <_vfiprintf_r+0x2b4>
    2242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2246:	f898 2000 	ldrb.w	r2, [r8]
    224a:	e583      	b.n	1d54 <_vfiprintf_r+0xe4>
    224c:	f898 2000 	ldrb.w	r2, [r8]
    2250:	2a6c      	cmp	r2, #108	; 0x6c
    2252:	bf03      	ittte	eq
    2254:	f898 2001 	ldrbeq.w	r2, [r8, #1]
    2258:	f043 0320 	orreq.w	r3, r3, #32
    225c:	f108 0801 	addeq.w	r8, r8, #1
    2260:	f043 0310 	orrne.w	r3, r3, #16
    2264:	e576      	b.n	1d54 <_vfiprintf_r+0xe4>
    2266:	bf00      	nop
    2268:	00004a58 	.word	0x00004a58
    226c:	00004a68 	.word	0x00004a68
    2270:	00004a3c 	.word	0x00004a3c
    2274:	00004a28 	.word	0x00004a28
    2278:	9907      	ldr	r1, [sp, #28]
    227a:	680e      	ldr	r6, [r1, #0]
    227c:	460a      	mov	r2, r1
    227e:	2e00      	cmp	r6, #0
    2280:	f102 0204 	add.w	r2, r2, #4
    2284:	f6ff ae0f 	blt.w	1ea6 <_vfiprintf_r+0x236>
    2288:	9207      	str	r2, [sp, #28]
    228a:	f898 2000 	ldrb.w	r2, [r8]
    228e:	e561      	b.n	1d54 <_vfiprintf_r+0xe4>
    2290:	f898 2000 	ldrb.w	r2, [r8]
    2294:	2001      	movs	r0, #1
    2296:	252b      	movs	r5, #43	; 0x2b
    2298:	e55c      	b.n	1d54 <_vfiprintf_r+0xe4>
    229a:	9907      	ldr	r1, [sp, #28]
    229c:	9608      	str	r6, [sp, #32]
    229e:	f8d1 b000 	ldr.w	fp, [r1]
    22a2:	f04f 0200 	mov.w	r2, #0
    22a6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    22aa:	1d0e      	adds	r6, r1, #4
    22ac:	f1bb 0f00 	cmp.w	fp, #0
    22b0:	f000 82e5 	beq.w	287e <_vfiprintf_r+0xc0e>
    22b4:	1c67      	adds	r7, r4, #1
    22b6:	f000 82c4 	beq.w	2842 <_vfiprintf_r+0xbd2>
    22ba:	4622      	mov	r2, r4
    22bc:	2100      	movs	r1, #0
    22be:	4658      	mov	r0, fp
    22c0:	9301      	str	r3, [sp, #4]
    22c2:	f001 fbd5 	bl	3a70 <memchr>
    22c6:	9b01      	ldr	r3, [sp, #4]
    22c8:	2800      	cmp	r0, #0
    22ca:	f000 82e5 	beq.w	2898 <_vfiprintf_r+0xc28>
    22ce:	eba0 020b 	sub.w	r2, r0, fp
    22d2:	9205      	str	r2, [sp, #20]
    22d4:	9607      	str	r6, [sp, #28]
    22d6:	9302      	str	r3, [sp, #8]
    22d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    22dc:	2400      	movs	r4, #0
    22de:	e619      	b.n	1f14 <_vfiprintf_r+0x2a4>
    22e0:	f898 2000 	ldrb.w	r2, [r8]
    22e4:	2a2a      	cmp	r2, #42	; 0x2a
    22e6:	f108 0701 	add.w	r7, r8, #1
    22ea:	f000 82e9 	beq.w	28c0 <_vfiprintf_r+0xc50>
    22ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    22f2:	2909      	cmp	r1, #9
    22f4:	46b8      	mov	r8, r7
    22f6:	f04f 0400 	mov.w	r4, #0
    22fa:	f63f ad2d 	bhi.w	1d58 <_vfiprintf_r+0xe8>
    22fe:	f818 2b01 	ldrb.w	r2, [r8], #1
    2302:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2306:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    230a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    230e:	2909      	cmp	r1, #9
    2310:	d9f5      	bls.n	22fe <_vfiprintf_r+0x68e>
    2312:	e521      	b.n	1d58 <_vfiprintf_r+0xe8>
    2314:	f043 0320 	orr.w	r3, r3, #32
    2318:	f898 2000 	ldrb.w	r2, [r8]
    231c:	e51a      	b.n	1d54 <_vfiprintf_r+0xe4>
    231e:	9608      	str	r6, [sp, #32]
    2320:	2800      	cmp	r0, #0
    2322:	f040 82db 	bne.w	28dc <_vfiprintf_r+0xc6c>
    2326:	2a00      	cmp	r2, #0
    2328:	f000 80e7 	beq.w	24fa <_vfiprintf_r+0x88a>
    232c:	2101      	movs	r1, #1
    232e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    2332:	f04f 0200 	mov.w	r2, #0
    2336:	9101      	str	r1, [sp, #4]
    2338:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    233c:	9105      	str	r1, [sp, #20]
    233e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    2342:	e77b      	b.n	223c <_vfiprintf_r+0x5cc>
    2344:	9a07      	ldr	r2, [sp, #28]
    2346:	6813      	ldr	r3, [r2, #0]
    2348:	3204      	adds	r2, #4
    234a:	9207      	str	r2, [sp, #28]
    234c:	9a03      	ldr	r2, [sp, #12]
    234e:	601a      	str	r2, [r3, #0]
    2350:	e4cb      	b.n	1cea <_vfiprintf_r+0x7a>
    2352:	aa0f      	add	r2, sp, #60	; 0x3c
    2354:	9904      	ldr	r1, [sp, #16]
    2356:	4620      	mov	r0, r4
    2358:	f7ff fc4a 	bl	1bf0 <__sprint_r.part.0>
    235c:	2800      	cmp	r0, #0
    235e:	f040 8139 	bne.w	25d4 <_vfiprintf_r+0x964>
    2362:	9910      	ldr	r1, [sp, #64]	; 0x40
    2364:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2366:	f101 0c01 	add.w	ip, r1, #1
    236a:	46ce      	mov	lr, r9
    236c:	e5ff      	b.n	1f6e <_vfiprintf_r+0x2fe>
    236e:	9910      	ldr	r1, [sp, #64]	; 0x40
    2370:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2372:	1c48      	adds	r0, r1, #1
    2374:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    2378:	2d00      	cmp	r5, #0
    237a:	f43f ae22 	beq.w	1fc2 <_vfiprintf_r+0x352>
    237e:	3201      	adds	r2, #1
    2380:	f10d 0537 	add.w	r5, sp, #55	; 0x37
    2384:	2101      	movs	r1, #1
    2386:	2807      	cmp	r0, #7
    2388:	9211      	str	r2, [sp, #68]	; 0x44
    238a:	9010      	str	r0, [sp, #64]	; 0x40
    238c:	f8ca 5000 	str.w	r5, [sl]
    2390:	f8ca 1004 	str.w	r1, [sl, #4]
    2394:	f340 8108 	ble.w	25a8 <_vfiprintf_r+0x938>
    2398:	2a00      	cmp	r2, #0
    239a:	f040 81bc 	bne.w	2716 <_vfiprintf_r+0xaa6>
    239e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    23a0:	2b00      	cmp	r3, #0
    23a2:	f43f ae1f 	beq.w	1fe4 <_vfiprintf_r+0x374>
    23a6:	ab0e      	add	r3, sp, #56	; 0x38
    23a8:	2202      	movs	r2, #2
    23aa:	4608      	mov	r0, r1
    23ac:	931c      	str	r3, [sp, #112]	; 0x70
    23ae:	921d      	str	r2, [sp, #116]	; 0x74
    23b0:	46ca      	mov	sl, r9
    23b2:	4601      	mov	r1, r0
    23b4:	f10a 0a08 	add.w	sl, sl, #8
    23b8:	3001      	adds	r0, #1
    23ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    23bc:	2b80      	cmp	r3, #128	; 0x80
    23be:	f43f ae19 	beq.w	1ff4 <_vfiprintf_r+0x384>
    23c2:	9b05      	ldr	r3, [sp, #20]
    23c4:	1ae4      	subs	r4, r4, r3
    23c6:	2c00      	cmp	r4, #0
    23c8:	dd2e      	ble.n	2428 <_vfiprintf_r+0x7b8>
    23ca:	2c10      	cmp	r4, #16
    23cc:	4db3      	ldr	r5, [pc, #716]	; (269c <_vfiprintf_r+0xa2c>)
    23ce:	dd1e      	ble.n	240e <_vfiprintf_r+0x79e>
    23d0:	46d6      	mov	lr, sl
    23d2:	2610      	movs	r6, #16
    23d4:	9f06      	ldr	r7, [sp, #24]
    23d6:	f8dd a010 	ldr.w	sl, [sp, #16]
    23da:	e006      	b.n	23ea <_vfiprintf_r+0x77a>
    23dc:	1c88      	adds	r0, r1, #2
    23de:	f10e 0e08 	add.w	lr, lr, #8
    23e2:	4619      	mov	r1, r3
    23e4:	3c10      	subs	r4, #16
    23e6:	2c10      	cmp	r4, #16
    23e8:	dd10      	ble.n	240c <_vfiprintf_r+0x79c>
    23ea:	1c4b      	adds	r3, r1, #1
    23ec:	3210      	adds	r2, #16
    23ee:	2b07      	cmp	r3, #7
    23f0:	9211      	str	r2, [sp, #68]	; 0x44
    23f2:	e88e 0060 	stmia.w	lr, {r5, r6}
    23f6:	9310      	str	r3, [sp, #64]	; 0x40
    23f8:	ddf0      	ble.n	23dc <_vfiprintf_r+0x76c>
    23fa:	2a00      	cmp	r2, #0
    23fc:	d165      	bne.n	24ca <_vfiprintf_r+0x85a>
    23fe:	3c10      	subs	r4, #16
    2400:	2c10      	cmp	r4, #16
    2402:	f04f 0001 	mov.w	r0, #1
    2406:	4611      	mov	r1, r2
    2408:	46ce      	mov	lr, r9
    240a:	dcee      	bgt.n	23ea <_vfiprintf_r+0x77a>
    240c:	46f2      	mov	sl, lr
    240e:	4422      	add	r2, r4
    2410:	2807      	cmp	r0, #7
    2412:	9211      	str	r2, [sp, #68]	; 0x44
    2414:	f8ca 5000 	str.w	r5, [sl]
    2418:	f8ca 4004 	str.w	r4, [sl, #4]
    241c:	9010      	str	r0, [sp, #64]	; 0x40
    241e:	f300 8085 	bgt.w	252c <_vfiprintf_r+0x8bc>
    2422:	f10a 0a08 	add.w	sl, sl, #8
    2426:	3001      	adds	r0, #1
    2428:	9905      	ldr	r1, [sp, #20]
    242a:	f8ca b000 	str.w	fp, [sl]
    242e:	440a      	add	r2, r1
    2430:	2807      	cmp	r0, #7
    2432:	9211      	str	r2, [sp, #68]	; 0x44
    2434:	f8ca 1004 	str.w	r1, [sl, #4]
    2438:	9010      	str	r0, [sp, #64]	; 0x40
    243a:	f340 8082 	ble.w	2542 <_vfiprintf_r+0x8d2>
    243e:	2a00      	cmp	r2, #0
    2440:	f040 8118 	bne.w	2674 <_vfiprintf_r+0xa04>
    2444:	9b02      	ldr	r3, [sp, #8]
    2446:	9210      	str	r2, [sp, #64]	; 0x40
    2448:	0758      	lsls	r0, r3, #29
    244a:	d535      	bpl.n	24b8 <_vfiprintf_r+0x848>
    244c:	9b08      	ldr	r3, [sp, #32]
    244e:	9901      	ldr	r1, [sp, #4]
    2450:	1a5c      	subs	r4, r3, r1
    2452:	2c00      	cmp	r4, #0
    2454:	f340 80e7 	ble.w	2626 <_vfiprintf_r+0x9b6>
    2458:	46ca      	mov	sl, r9
    245a:	2c10      	cmp	r4, #16
    245c:	f340 8218 	ble.w	2890 <_vfiprintf_r+0xc20>
    2460:	9910      	ldr	r1, [sp, #64]	; 0x40
    2462:	4e8f      	ldr	r6, [pc, #572]	; (26a0 <_vfiprintf_r+0xa30>)
    2464:	9f06      	ldr	r7, [sp, #24]
    2466:	f8dd b010 	ldr.w	fp, [sp, #16]
    246a:	2510      	movs	r5, #16
    246c:	e006      	b.n	247c <_vfiprintf_r+0x80c>
    246e:	1c88      	adds	r0, r1, #2
    2470:	f10a 0a08 	add.w	sl, sl, #8
    2474:	4619      	mov	r1, r3
    2476:	3c10      	subs	r4, #16
    2478:	2c10      	cmp	r4, #16
    247a:	dd11      	ble.n	24a0 <_vfiprintf_r+0x830>
    247c:	1c4b      	adds	r3, r1, #1
    247e:	3210      	adds	r2, #16
    2480:	2b07      	cmp	r3, #7
    2482:	9211      	str	r2, [sp, #68]	; 0x44
    2484:	f8ca 6000 	str.w	r6, [sl]
    2488:	f8ca 5004 	str.w	r5, [sl, #4]
    248c:	9310      	str	r3, [sp, #64]	; 0x40
    248e:	ddee      	ble.n	246e <_vfiprintf_r+0x7fe>
    2490:	bb42      	cbnz	r2, 24e4 <_vfiprintf_r+0x874>
    2492:	3c10      	subs	r4, #16
    2494:	2c10      	cmp	r4, #16
    2496:	f04f 0001 	mov.w	r0, #1
    249a:	4611      	mov	r1, r2
    249c:	46ca      	mov	sl, r9
    249e:	dced      	bgt.n	247c <_vfiprintf_r+0x80c>
    24a0:	4422      	add	r2, r4
    24a2:	2807      	cmp	r0, #7
    24a4:	9211      	str	r2, [sp, #68]	; 0x44
    24a6:	f8ca 6000 	str.w	r6, [sl]
    24aa:	f8ca 4004 	str.w	r4, [sl, #4]
    24ae:	9010      	str	r0, [sp, #64]	; 0x40
    24b0:	dd51      	ble.n	2556 <_vfiprintf_r+0x8e6>
    24b2:	2a00      	cmp	r2, #0
    24b4:	f040 819b 	bne.w	27ee <_vfiprintf_r+0xb7e>
    24b8:	9b03      	ldr	r3, [sp, #12]
    24ba:	9a08      	ldr	r2, [sp, #32]
    24bc:	9901      	ldr	r1, [sp, #4]
    24be:	428a      	cmp	r2, r1
    24c0:	bfac      	ite	ge
    24c2:	189b      	addge	r3, r3, r2
    24c4:	185b      	addlt	r3, r3, r1
    24c6:	9303      	str	r3, [sp, #12]
    24c8:	e04e      	b.n	2568 <_vfiprintf_r+0x8f8>
    24ca:	aa0f      	add	r2, sp, #60	; 0x3c
    24cc:	4651      	mov	r1, sl
    24ce:	4638      	mov	r0, r7
    24d0:	f7ff fb8e 	bl	1bf0 <__sprint_r.part.0>
    24d4:	2800      	cmp	r0, #0
    24d6:	f040 813f 	bne.w	2758 <_vfiprintf_r+0xae8>
    24da:	9910      	ldr	r1, [sp, #64]	; 0x40
    24dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    24de:	1c48      	adds	r0, r1, #1
    24e0:	46ce      	mov	lr, r9
    24e2:	e77f      	b.n	23e4 <_vfiprintf_r+0x774>
    24e4:	aa0f      	add	r2, sp, #60	; 0x3c
    24e6:	4659      	mov	r1, fp
    24e8:	4638      	mov	r0, r7
    24ea:	f7ff fb81 	bl	1bf0 <__sprint_r.part.0>
    24ee:	b960      	cbnz	r0, 250a <_vfiprintf_r+0x89a>
    24f0:	9910      	ldr	r1, [sp, #64]	; 0x40
    24f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    24f4:	1c48      	adds	r0, r1, #1
    24f6:	46ca      	mov	sl, r9
    24f8:	e7bd      	b.n	2476 <_vfiprintf_r+0x806>
    24fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    24fc:	f8dd b010 	ldr.w	fp, [sp, #16]
    2500:	2b00      	cmp	r3, #0
    2502:	f040 81d4 	bne.w	28ae <_vfiprintf_r+0xc3e>
    2506:	2300      	movs	r3, #0
    2508:	9310      	str	r3, [sp, #64]	; 0x40
    250a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
    250e:	f013 0f01 	tst.w	r3, #1
    2512:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    2516:	d102      	bne.n	251e <_vfiprintf_r+0x8ae>
    2518:	059a      	lsls	r2, r3, #22
    251a:	f140 80de 	bpl.w	26da <_vfiprintf_r+0xa6a>
    251e:	065b      	lsls	r3, r3, #25
    2520:	f53f acb2 	bmi.w	1e88 <_vfiprintf_r+0x218>
    2524:	9803      	ldr	r0, [sp, #12]
    2526:	b02d      	add	sp, #180	; 0xb4
    2528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    252c:	2a00      	cmp	r2, #0
    252e:	f040 8106 	bne.w	273e <_vfiprintf_r+0xace>
    2532:	9a05      	ldr	r2, [sp, #20]
    2534:	921d      	str	r2, [sp, #116]	; 0x74
    2536:	2301      	movs	r3, #1
    2538:	9211      	str	r2, [sp, #68]	; 0x44
    253a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
    253e:	9310      	str	r3, [sp, #64]	; 0x40
    2540:	46ca      	mov	sl, r9
    2542:	f10a 0a08 	add.w	sl, sl, #8
    2546:	9b02      	ldr	r3, [sp, #8]
    2548:	0759      	lsls	r1, r3, #29
    254a:	d504      	bpl.n	2556 <_vfiprintf_r+0x8e6>
    254c:	9b08      	ldr	r3, [sp, #32]
    254e:	9901      	ldr	r1, [sp, #4]
    2550:	1a5c      	subs	r4, r3, r1
    2552:	2c00      	cmp	r4, #0
    2554:	dc81      	bgt.n	245a <_vfiprintf_r+0x7ea>
    2556:	9b03      	ldr	r3, [sp, #12]
    2558:	9908      	ldr	r1, [sp, #32]
    255a:	9801      	ldr	r0, [sp, #4]
    255c:	4281      	cmp	r1, r0
    255e:	bfac      	ite	ge
    2560:	185b      	addge	r3, r3, r1
    2562:	181b      	addlt	r3, r3, r0
    2564:	9303      	str	r3, [sp, #12]
    2566:	bb72      	cbnz	r2, 25c6 <_vfiprintf_r+0x956>
    2568:	2300      	movs	r3, #0
    256a:	9310      	str	r3, [sp, #64]	; 0x40
    256c:	46ca      	mov	sl, r9
    256e:	f7ff bbbc 	b.w	1cea <_vfiprintf_r+0x7a>
    2572:	aa0f      	add	r2, sp, #60	; 0x3c
    2574:	9904      	ldr	r1, [sp, #16]
    2576:	4620      	mov	r0, r4
    2578:	f7ff fb3a 	bl	1bf0 <__sprint_r.part.0>
    257c:	bb50      	cbnz	r0, 25d4 <_vfiprintf_r+0x964>
    257e:	9910      	ldr	r1, [sp, #64]	; 0x40
    2580:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2582:	f101 0e01 	add.w	lr, r1, #1
    2586:	46cc      	mov	ip, r9
    2588:	e548      	b.n	201c <_vfiprintf_r+0x3ac>
    258a:	2a00      	cmp	r2, #0
    258c:	f040 8140 	bne.w	2810 <_vfiprintf_r+0xba0>
    2590:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
    2594:	2900      	cmp	r1, #0
    2596:	f000 811b 	beq.w	27d0 <_vfiprintf_r+0xb60>
    259a:	2201      	movs	r2, #1
    259c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    25a0:	4610      	mov	r0, r2
    25a2:	921d      	str	r2, [sp, #116]	; 0x74
    25a4:	911c      	str	r1, [sp, #112]	; 0x70
    25a6:	46ca      	mov	sl, r9
    25a8:	4601      	mov	r1, r0
    25aa:	f10a 0a08 	add.w	sl, sl, #8
    25ae:	3001      	adds	r0, #1
    25b0:	e507      	b.n	1fc2 <_vfiprintf_r+0x352>
    25b2:	9b02      	ldr	r3, [sp, #8]
    25b4:	2a01      	cmp	r2, #1
    25b6:	f000 8098 	beq.w	26ea <_vfiprintf_r+0xa7a>
    25ba:	2a02      	cmp	r2, #2
    25bc:	d10d      	bne.n	25da <_vfiprintf_r+0x96a>
    25be:	9302      	str	r3, [sp, #8]
    25c0:	2600      	movs	r6, #0
    25c2:	2700      	movs	r7, #0
    25c4:	e5b0      	b.n	2128 <_vfiprintf_r+0x4b8>
    25c6:	aa0f      	add	r2, sp, #60	; 0x3c
    25c8:	9904      	ldr	r1, [sp, #16]
    25ca:	9806      	ldr	r0, [sp, #24]
    25cc:	f7ff fb10 	bl	1bf0 <__sprint_r.part.0>
    25d0:	2800      	cmp	r0, #0
    25d2:	d0c9      	beq.n	2568 <_vfiprintf_r+0x8f8>
    25d4:	f8dd b010 	ldr.w	fp, [sp, #16]
    25d8:	e797      	b.n	250a <_vfiprintf_r+0x89a>
    25da:	9302      	str	r3, [sp, #8]
    25dc:	2600      	movs	r6, #0
    25de:	2700      	movs	r7, #0
    25e0:	4649      	mov	r1, r9
    25e2:	e000      	b.n	25e6 <_vfiprintf_r+0x976>
    25e4:	4659      	mov	r1, fp
    25e6:	08f2      	lsrs	r2, r6, #3
    25e8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
    25ec:	08f8      	lsrs	r0, r7, #3
    25ee:	f006 0307 	and.w	r3, r6, #7
    25f2:	4607      	mov	r7, r0
    25f4:	4616      	mov	r6, r2
    25f6:	3330      	adds	r3, #48	; 0x30
    25f8:	ea56 0207 	orrs.w	r2, r6, r7
    25fc:	f801 3c01 	strb.w	r3, [r1, #-1]
    2600:	f101 3bff 	add.w	fp, r1, #4294967295
    2604:	d1ee      	bne.n	25e4 <_vfiprintf_r+0x974>
    2606:	9a02      	ldr	r2, [sp, #8]
    2608:	07d6      	lsls	r6, r2, #31
    260a:	f57f ad9d 	bpl.w	2148 <_vfiprintf_r+0x4d8>
    260e:	2b30      	cmp	r3, #48	; 0x30
    2610:	f43f ad9a 	beq.w	2148 <_vfiprintf_r+0x4d8>
    2614:	3902      	subs	r1, #2
    2616:	2330      	movs	r3, #48	; 0x30
    2618:	f80b 3c01 	strb.w	r3, [fp, #-1]
    261c:	eba9 0301 	sub.w	r3, r9, r1
    2620:	9305      	str	r3, [sp, #20]
    2622:	468b      	mov	fp, r1
    2624:	e476      	b.n	1f14 <_vfiprintf_r+0x2a4>
    2626:	9b03      	ldr	r3, [sp, #12]
    2628:	9a08      	ldr	r2, [sp, #32]
    262a:	428a      	cmp	r2, r1
    262c:	bfac      	ite	ge
    262e:	189b      	addge	r3, r3, r2
    2630:	185b      	addlt	r3, r3, r1
    2632:	9303      	str	r3, [sp, #12]
    2634:	e798      	b.n	2568 <_vfiprintf_r+0x8f8>
    2636:	2202      	movs	r2, #2
    2638:	e44d      	b.n	1ed6 <_vfiprintf_r+0x266>
    263a:	2f00      	cmp	r7, #0
    263c:	bf08      	it	eq
    263e:	2e0a      	cmpeq	r6, #10
    2640:	d352      	bcc.n	26e8 <_vfiprintf_r+0xa78>
    2642:	46cb      	mov	fp, r9
    2644:	4630      	mov	r0, r6
    2646:	4639      	mov	r1, r7
    2648:	220a      	movs	r2, #10
    264a:	2300      	movs	r3, #0
    264c:	f001 ffb4 	bl	45b8 <__aeabi_uldivmod>
    2650:	3230      	adds	r2, #48	; 0x30
    2652:	f80b 2d01 	strb.w	r2, [fp, #-1]!
    2656:	4630      	mov	r0, r6
    2658:	4639      	mov	r1, r7
    265a:	2300      	movs	r3, #0
    265c:	220a      	movs	r2, #10
    265e:	f001 ffab 	bl	45b8 <__aeabi_uldivmod>
    2662:	4606      	mov	r6, r0
    2664:	460f      	mov	r7, r1
    2666:	ea56 0307 	orrs.w	r3, r6, r7
    266a:	d1eb      	bne.n	2644 <_vfiprintf_r+0x9d4>
    266c:	e56c      	b.n	2148 <_vfiprintf_r+0x4d8>
    266e:	9405      	str	r4, [sp, #20]
    2670:	46cb      	mov	fp, r9
    2672:	e44f      	b.n	1f14 <_vfiprintf_r+0x2a4>
    2674:	aa0f      	add	r2, sp, #60	; 0x3c
    2676:	9904      	ldr	r1, [sp, #16]
    2678:	9806      	ldr	r0, [sp, #24]
    267a:	f7ff fab9 	bl	1bf0 <__sprint_r.part.0>
    267e:	2800      	cmp	r0, #0
    2680:	d1a8      	bne.n	25d4 <_vfiprintf_r+0x964>
    2682:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2684:	46ca      	mov	sl, r9
    2686:	e75e      	b.n	2546 <_vfiprintf_r+0x8d6>
    2688:	aa0f      	add	r2, sp, #60	; 0x3c
    268a:	9904      	ldr	r1, [sp, #16]
    268c:	9806      	ldr	r0, [sp, #24]
    268e:	f7ff faaf 	bl	1bf0 <__sprint_r.part.0>
    2692:	2800      	cmp	r0, #0
    2694:	d19e      	bne.n	25d4 <_vfiprintf_r+0x964>
    2696:	46ca      	mov	sl, r9
    2698:	f7ff bbc0 	b.w	1e1c <_vfiprintf_r+0x1ac>
    269c:	00004a68 	.word	0x00004a68
    26a0:	00004a58 	.word	0x00004a58
    26a4:	3104      	adds	r1, #4
    26a6:	6816      	ldr	r6, [r2, #0]
    26a8:	9107      	str	r1, [sp, #28]
    26aa:	2201      	movs	r2, #1
    26ac:	2700      	movs	r7, #0
    26ae:	e412      	b.n	1ed6 <_vfiprintf_r+0x266>
    26b0:	9807      	ldr	r0, [sp, #28]
    26b2:	4601      	mov	r1, r0
    26b4:	3104      	adds	r1, #4
    26b6:	6806      	ldr	r6, [r0, #0]
    26b8:	9107      	str	r1, [sp, #28]
    26ba:	2700      	movs	r7, #0
    26bc:	e40b      	b.n	1ed6 <_vfiprintf_r+0x266>
    26be:	680e      	ldr	r6, [r1, #0]
    26c0:	3104      	adds	r1, #4
    26c2:	9107      	str	r1, [sp, #28]
    26c4:	2700      	movs	r7, #0
    26c6:	e591      	b.n	21ec <_vfiprintf_r+0x57c>
    26c8:	9907      	ldr	r1, [sp, #28]
    26ca:	680e      	ldr	r6, [r1, #0]
    26cc:	460a      	mov	r2, r1
    26ce:	17f7      	asrs	r7, r6, #31
    26d0:	3204      	adds	r2, #4
    26d2:	9207      	str	r2, [sp, #28]
    26d4:	4630      	mov	r0, r6
    26d6:	4639      	mov	r1, r7
    26d8:	e50f      	b.n	20fa <_vfiprintf_r+0x48a>
    26da:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    26de:	f000 fe7f 	bl	33e0 <__retarget_lock_release_recursive>
    26e2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    26e6:	e71a      	b.n	251e <_vfiprintf_r+0x8ae>
    26e8:	9b02      	ldr	r3, [sp, #8]
    26ea:	9302      	str	r3, [sp, #8]
    26ec:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
    26f0:	3630      	adds	r6, #48	; 0x30
    26f2:	2301      	movs	r3, #1
    26f4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
    26f8:	9305      	str	r3, [sp, #20]
    26fa:	e40b      	b.n	1f14 <_vfiprintf_r+0x2a4>
    26fc:	aa0f      	add	r2, sp, #60	; 0x3c
    26fe:	9904      	ldr	r1, [sp, #16]
    2700:	9806      	ldr	r0, [sp, #24]
    2702:	f7ff fa75 	bl	1bf0 <__sprint_r.part.0>
    2706:	2800      	cmp	r0, #0
    2708:	f47f af64 	bne.w	25d4 <_vfiprintf_r+0x964>
    270c:	9910      	ldr	r1, [sp, #64]	; 0x40
    270e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2710:	1c48      	adds	r0, r1, #1
    2712:	46ca      	mov	sl, r9
    2714:	e651      	b.n	23ba <_vfiprintf_r+0x74a>
    2716:	aa0f      	add	r2, sp, #60	; 0x3c
    2718:	9904      	ldr	r1, [sp, #16]
    271a:	9806      	ldr	r0, [sp, #24]
    271c:	f7ff fa68 	bl	1bf0 <__sprint_r.part.0>
    2720:	2800      	cmp	r0, #0
    2722:	f47f af57 	bne.w	25d4 <_vfiprintf_r+0x964>
    2726:	9910      	ldr	r1, [sp, #64]	; 0x40
    2728:	9a11      	ldr	r2, [sp, #68]	; 0x44
    272a:	1c48      	adds	r0, r1, #1
    272c:	46ca      	mov	sl, r9
    272e:	e448      	b.n	1fc2 <_vfiprintf_r+0x352>
    2730:	2a00      	cmp	r2, #0
    2732:	f040 8091 	bne.w	2858 <_vfiprintf_r+0xbe8>
    2736:	2001      	movs	r0, #1
    2738:	4611      	mov	r1, r2
    273a:	46ca      	mov	sl, r9
    273c:	e641      	b.n	23c2 <_vfiprintf_r+0x752>
    273e:	aa0f      	add	r2, sp, #60	; 0x3c
    2740:	9904      	ldr	r1, [sp, #16]
    2742:	9806      	ldr	r0, [sp, #24]
    2744:	f7ff fa54 	bl	1bf0 <__sprint_r.part.0>
    2748:	2800      	cmp	r0, #0
    274a:	f47f af43 	bne.w	25d4 <_vfiprintf_r+0x964>
    274e:	9810      	ldr	r0, [sp, #64]	; 0x40
    2750:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2752:	3001      	adds	r0, #1
    2754:	46ca      	mov	sl, r9
    2756:	e667      	b.n	2428 <_vfiprintf_r+0x7b8>
    2758:	46d3      	mov	fp, sl
    275a:	e6d6      	b.n	250a <_vfiprintf_r+0x89a>
    275c:	9e07      	ldr	r6, [sp, #28]
    275e:	3607      	adds	r6, #7
    2760:	f026 0207 	bic.w	r2, r6, #7
    2764:	f102 0108 	add.w	r1, r2, #8
    2768:	e9d2 6700 	ldrd	r6, r7, [r2]
    276c:	9107      	str	r1, [sp, #28]
    276e:	2201      	movs	r2, #1
    2770:	f7ff bbb1 	b.w	1ed6 <_vfiprintf_r+0x266>
    2774:	9e07      	ldr	r6, [sp, #28]
    2776:	3607      	adds	r6, #7
    2778:	f026 0607 	bic.w	r6, r6, #7
    277c:	e9d6 0100 	ldrd	r0, r1, [r6]
    2780:	f106 0208 	add.w	r2, r6, #8
    2784:	9207      	str	r2, [sp, #28]
    2786:	4606      	mov	r6, r0
    2788:	460f      	mov	r7, r1
    278a:	e4b6      	b.n	20fa <_vfiprintf_r+0x48a>
    278c:	9e07      	ldr	r6, [sp, #28]
    278e:	3607      	adds	r6, #7
    2790:	f026 0207 	bic.w	r2, r6, #7
    2794:	f102 0108 	add.w	r1, r2, #8
    2798:	e9d2 6700 	ldrd	r6, r7, [r2]
    279c:	9107      	str	r1, [sp, #28]
    279e:	2200      	movs	r2, #0
    27a0:	f7ff bb99 	b.w	1ed6 <_vfiprintf_r+0x266>
    27a4:	9e07      	ldr	r6, [sp, #28]
    27a6:	3607      	adds	r6, #7
    27a8:	f026 0107 	bic.w	r1, r6, #7
    27ac:	f101 0008 	add.w	r0, r1, #8
    27b0:	9007      	str	r0, [sp, #28]
    27b2:	e9d1 6700 	ldrd	r6, r7, [r1]
    27b6:	e519      	b.n	21ec <_vfiprintf_r+0x57c>
    27b8:	46cb      	mov	fp, r9
    27ba:	f7ff bbab 	b.w	1f14 <_vfiprintf_r+0x2a4>
    27be:	252d      	movs	r5, #45	; 0x2d
    27c0:	4276      	negs	r6, r6
    27c2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
    27c6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    27ca:	2201      	movs	r2, #1
    27cc:	f7ff bb88 	b.w	1ee0 <_vfiprintf_r+0x270>
    27d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27d2:	b9b3      	cbnz	r3, 2802 <_vfiprintf_r+0xb92>
    27d4:	4611      	mov	r1, r2
    27d6:	2001      	movs	r0, #1
    27d8:	46ca      	mov	sl, r9
    27da:	e5f2      	b.n	23c2 <_vfiprintf_r+0x752>
    27dc:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
    27e0:	f000 fdfe 	bl	33e0 <__retarget_lock_release_recursive>
    27e4:	f04f 33ff 	mov.w	r3, #4294967295
    27e8:	9303      	str	r3, [sp, #12]
    27ea:	f7ff bb50 	b.w	1e8e <_vfiprintf_r+0x21e>
    27ee:	aa0f      	add	r2, sp, #60	; 0x3c
    27f0:	9904      	ldr	r1, [sp, #16]
    27f2:	9806      	ldr	r0, [sp, #24]
    27f4:	f7ff f9fc 	bl	1bf0 <__sprint_r.part.0>
    27f8:	2800      	cmp	r0, #0
    27fa:	f47f aeeb 	bne.w	25d4 <_vfiprintf_r+0x964>
    27fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2800:	e6a9      	b.n	2556 <_vfiprintf_r+0x8e6>
    2802:	ab0e      	add	r3, sp, #56	; 0x38
    2804:	2202      	movs	r2, #2
    2806:	931c      	str	r3, [sp, #112]	; 0x70
    2808:	921d      	str	r2, [sp, #116]	; 0x74
    280a:	2001      	movs	r0, #1
    280c:	46ca      	mov	sl, r9
    280e:	e5d0      	b.n	23b2 <_vfiprintf_r+0x742>
    2810:	aa0f      	add	r2, sp, #60	; 0x3c
    2812:	9904      	ldr	r1, [sp, #16]
    2814:	9806      	ldr	r0, [sp, #24]
    2816:	f7ff f9eb 	bl	1bf0 <__sprint_r.part.0>
    281a:	2800      	cmp	r0, #0
    281c:	f47f aeda 	bne.w	25d4 <_vfiprintf_r+0x964>
    2820:	9910      	ldr	r1, [sp, #64]	; 0x40
    2822:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2824:	1c48      	adds	r0, r1, #1
    2826:	46ca      	mov	sl, r9
    2828:	e5a4      	b.n	2374 <_vfiprintf_r+0x704>
    282a:	9a07      	ldr	r2, [sp, #28]
    282c:	9903      	ldr	r1, [sp, #12]
    282e:	6813      	ldr	r3, [r2, #0]
    2830:	17cd      	asrs	r5, r1, #31
    2832:	4608      	mov	r0, r1
    2834:	3204      	adds	r2, #4
    2836:	4629      	mov	r1, r5
    2838:	9207      	str	r2, [sp, #28]
    283a:	e9c3 0100 	strd	r0, r1, [r3]
    283e:	f7ff ba54 	b.w	1cea <_vfiprintf_r+0x7a>
    2842:	4658      	mov	r0, fp
    2844:	9607      	str	r6, [sp, #28]
    2846:	9302      	str	r3, [sp, #8]
    2848:	f001 fc7a 	bl	4140 <strlen>
    284c:	2400      	movs	r4, #0
    284e:	9005      	str	r0, [sp, #20]
    2850:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    2854:	f7ff bb5e 	b.w	1f14 <_vfiprintf_r+0x2a4>
    2858:	aa0f      	add	r2, sp, #60	; 0x3c
    285a:	9904      	ldr	r1, [sp, #16]
    285c:	9806      	ldr	r0, [sp, #24]
    285e:	f7ff f9c7 	bl	1bf0 <__sprint_r.part.0>
    2862:	2800      	cmp	r0, #0
    2864:	f47f aeb6 	bne.w	25d4 <_vfiprintf_r+0x964>
    2868:	9910      	ldr	r1, [sp, #64]	; 0x40
    286a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    286c:	1c48      	adds	r0, r1, #1
    286e:	46ca      	mov	sl, r9
    2870:	e5a7      	b.n	23c2 <_vfiprintf_r+0x752>
    2872:	9910      	ldr	r1, [sp, #64]	; 0x40
    2874:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2876:	4e20      	ldr	r6, [pc, #128]	; (28f8 <_vfiprintf_r+0xc88>)
    2878:	3101      	adds	r1, #1
    287a:	f7ff bb90 	b.w	1f9e <_vfiprintf_r+0x32e>
    287e:	2c06      	cmp	r4, #6
    2880:	bf28      	it	cs
    2882:	2406      	movcs	r4, #6
    2884:	9405      	str	r4, [sp, #20]
    2886:	9607      	str	r6, [sp, #28]
    2888:	9401      	str	r4, [sp, #4]
    288a:	f8df b070 	ldr.w	fp, [pc, #112]	; 28fc <_vfiprintf_r+0xc8c>
    288e:	e4d5      	b.n	223c <_vfiprintf_r+0x5cc>
    2890:	9810      	ldr	r0, [sp, #64]	; 0x40
    2892:	4e19      	ldr	r6, [pc, #100]	; (28f8 <_vfiprintf_r+0xc88>)
    2894:	3001      	adds	r0, #1
    2896:	e603      	b.n	24a0 <_vfiprintf_r+0x830>
    2898:	9405      	str	r4, [sp, #20]
    289a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
    289e:	9607      	str	r6, [sp, #28]
    28a0:	9302      	str	r3, [sp, #8]
    28a2:	4604      	mov	r4, r0
    28a4:	f7ff bb36 	b.w	1f14 <_vfiprintf_r+0x2a4>
    28a8:	4686      	mov	lr, r0
    28aa:	f7ff bbce 	b.w	204a <_vfiprintf_r+0x3da>
    28ae:	9806      	ldr	r0, [sp, #24]
    28b0:	aa0f      	add	r2, sp, #60	; 0x3c
    28b2:	4659      	mov	r1, fp
    28b4:	f7ff f99c 	bl	1bf0 <__sprint_r.part.0>
    28b8:	2800      	cmp	r0, #0
    28ba:	f43f ae24 	beq.w	2506 <_vfiprintf_r+0x896>
    28be:	e624      	b.n	250a <_vfiprintf_r+0x89a>
    28c0:	9907      	ldr	r1, [sp, #28]
    28c2:	f898 2001 	ldrb.w	r2, [r8, #1]
    28c6:	680c      	ldr	r4, [r1, #0]
    28c8:	3104      	adds	r1, #4
    28ca:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
    28ce:	46b8      	mov	r8, r7
    28d0:	9107      	str	r1, [sp, #28]
    28d2:	f7ff ba3f 	b.w	1d54 <_vfiprintf_r+0xe4>
    28d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    28da:	e43c      	b.n	2156 <_vfiprintf_r+0x4e6>
    28dc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    28e0:	e521      	b.n	2326 <_vfiprintf_r+0x6b6>
    28e2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    28e6:	f7ff bbf4 	b.w	20d2 <_vfiprintf_r+0x462>
    28ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    28ee:	e491      	b.n	2214 <_vfiprintf_r+0x5a4>
    28f0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    28f4:	e469      	b.n	21ca <_vfiprintf_r+0x55a>
    28f6:	bf00      	nop
    28f8:	00004a58 	.word	0x00004a58
    28fc:	00004a50 	.word	0x00004a50

00002900 <__sbprintf>:
    2900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2904:	460c      	mov	r4, r1
    2906:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    290a:	8989      	ldrh	r1, [r1, #12]
    290c:	6e66      	ldr	r6, [r4, #100]	; 0x64
    290e:	89e5      	ldrh	r5, [r4, #14]
    2910:	9619      	str	r6, [sp, #100]	; 0x64
    2912:	f021 0102 	bic.w	r1, r1, #2
    2916:	4606      	mov	r6, r0
    2918:	69e0      	ldr	r0, [r4, #28]
    291a:	f8ad 100c 	strh.w	r1, [sp, #12]
    291e:	4617      	mov	r7, r2
    2920:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2924:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2926:	f8ad 500e 	strh.w	r5, [sp, #14]
    292a:	4698      	mov	r8, r3
    292c:	ad1a      	add	r5, sp, #104	; 0x68
    292e:	2300      	movs	r3, #0
    2930:	9007      	str	r0, [sp, #28]
    2932:	a816      	add	r0, sp, #88	; 0x58
    2934:	9209      	str	r2, [sp, #36]	; 0x24
    2936:	9306      	str	r3, [sp, #24]
    2938:	9500      	str	r5, [sp, #0]
    293a:	9504      	str	r5, [sp, #16]
    293c:	9102      	str	r1, [sp, #8]
    293e:	9105      	str	r1, [sp, #20]
    2940:	f000 fd48 	bl	33d4 <__retarget_lock_init_recursive>
    2944:	4643      	mov	r3, r8
    2946:	463a      	mov	r2, r7
    2948:	4669      	mov	r1, sp
    294a:	4630      	mov	r0, r6
    294c:	f7ff f990 	bl	1c70 <_vfiprintf_r>
    2950:	1e05      	subs	r5, r0, #0
    2952:	db07      	blt.n	2964 <__sbprintf+0x64>
    2954:	4630      	mov	r0, r6
    2956:	4669      	mov	r1, sp
    2958:	f000 f928 	bl	2bac <_fflush_r>
    295c:	2800      	cmp	r0, #0
    295e:	bf18      	it	ne
    2960:	f04f 35ff 	movne.w	r5, #4294967295
    2964:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2968:	065b      	lsls	r3, r3, #25
    296a:	d503      	bpl.n	2974 <__sbprintf+0x74>
    296c:	89a3      	ldrh	r3, [r4, #12]
    296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2972:	81a3      	strh	r3, [r4, #12]
    2974:	9816      	ldr	r0, [sp, #88]	; 0x58
    2976:	f000 fd2f 	bl	33d8 <__retarget_lock_close_recursive>
    297a:	4628      	mov	r0, r5
    297c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
    2980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002984 <__swsetup_r>:
    2984:	b538      	push	{r3, r4, r5, lr}
    2986:	4b30      	ldr	r3, [pc, #192]	; (2a48 <__swsetup_r+0xc4>)
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	4605      	mov	r5, r0
    298c:	460c      	mov	r4, r1
    298e:	b113      	cbz	r3, 2996 <__swsetup_r+0x12>
    2990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2992:	2a00      	cmp	r2, #0
    2994:	d038      	beq.n	2a08 <__swsetup_r+0x84>
    2996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    299a:	b293      	uxth	r3, r2
    299c:	0718      	lsls	r0, r3, #28
    299e:	d50c      	bpl.n	29ba <__swsetup_r+0x36>
    29a0:	6920      	ldr	r0, [r4, #16]
    29a2:	b1a8      	cbz	r0, 29d0 <__swsetup_r+0x4c>
    29a4:	f013 0201 	ands.w	r2, r3, #1
    29a8:	d01e      	beq.n	29e8 <__swsetup_r+0x64>
    29aa:	6963      	ldr	r3, [r4, #20]
    29ac:	2200      	movs	r2, #0
    29ae:	425b      	negs	r3, r3
    29b0:	61a3      	str	r3, [r4, #24]
    29b2:	60a2      	str	r2, [r4, #8]
    29b4:	b1f0      	cbz	r0, 29f4 <__swsetup_r+0x70>
    29b6:	2000      	movs	r0, #0
    29b8:	bd38      	pop	{r3, r4, r5, pc}
    29ba:	06d9      	lsls	r1, r3, #27
    29bc:	d53c      	bpl.n	2a38 <__swsetup_r+0xb4>
    29be:	0758      	lsls	r0, r3, #29
    29c0:	d426      	bmi.n	2a10 <__swsetup_r+0x8c>
    29c2:	6920      	ldr	r0, [r4, #16]
    29c4:	f042 0308 	orr.w	r3, r2, #8
    29c8:	81a3      	strh	r3, [r4, #12]
    29ca:	b29b      	uxth	r3, r3
    29cc:	2800      	cmp	r0, #0
    29ce:	d1e9      	bne.n	29a4 <__swsetup_r+0x20>
    29d0:	f403 7220 	and.w	r2, r3, #640	; 0x280
    29d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    29d8:	d0e4      	beq.n	29a4 <__swsetup_r+0x20>
    29da:	4628      	mov	r0, r5
    29dc:	4621      	mov	r1, r4
    29de:	f000 fd2f 	bl	3440 <__smakebuf_r>
    29e2:	89a3      	ldrh	r3, [r4, #12]
    29e4:	6920      	ldr	r0, [r4, #16]
    29e6:	e7dd      	b.n	29a4 <__swsetup_r+0x20>
    29e8:	0799      	lsls	r1, r3, #30
    29ea:	bf58      	it	pl
    29ec:	6962      	ldrpl	r2, [r4, #20]
    29ee:	60a2      	str	r2, [r4, #8]
    29f0:	2800      	cmp	r0, #0
    29f2:	d1e0      	bne.n	29b6 <__swsetup_r+0x32>
    29f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    29f8:	061a      	lsls	r2, r3, #24
    29fa:	d5dd      	bpl.n	29b8 <__swsetup_r+0x34>
    29fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a00:	81a3      	strh	r3, [r4, #12]
    2a02:	f04f 30ff 	mov.w	r0, #4294967295
    2a06:	bd38      	pop	{r3, r4, r5, pc}
    2a08:	4618      	mov	r0, r3
    2a0a:	f000 f927 	bl	2c5c <__sinit>
    2a0e:	e7c2      	b.n	2996 <__swsetup_r+0x12>
    2a10:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2a12:	b151      	cbz	r1, 2a2a <__swsetup_r+0xa6>
    2a14:	f104 0340 	add.w	r3, r4, #64	; 0x40
    2a18:	4299      	cmp	r1, r3
    2a1a:	d004      	beq.n	2a26 <__swsetup_r+0xa2>
    2a1c:	4628      	mov	r0, r5
    2a1e:	f000 fa43 	bl	2ea8 <_free_r>
    2a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    2a26:	2300      	movs	r3, #0
    2a28:	6323      	str	r3, [r4, #48]	; 0x30
    2a2a:	2300      	movs	r3, #0
    2a2c:	6920      	ldr	r0, [r4, #16]
    2a2e:	6063      	str	r3, [r4, #4]
    2a30:	f022 0224 	bic.w	r2, r2, #36	; 0x24
    2a34:	6020      	str	r0, [r4, #0]
    2a36:	e7c5      	b.n	29c4 <__swsetup_r+0x40>
    2a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2a3c:	2309      	movs	r3, #9
    2a3e:	602b      	str	r3, [r5, #0]
    2a40:	f04f 30ff 	mov.w	r0, #4294967295
    2a44:	81a2      	strh	r2, [r4, #12]
    2a46:	bd38      	pop	{r3, r4, r5, pc}
    2a48:	20000030 	.word	0x20000030

00002a4c <register_fini>:
    2a4c:	4b02      	ldr	r3, [pc, #8]	; (2a58 <register_fini+0xc>)
    2a4e:	b113      	cbz	r3, 2a56 <register_fini+0xa>
    2a50:	4802      	ldr	r0, [pc, #8]	; (2a5c <register_fini+0x10>)
    2a52:	f000 b805 	b.w	2a60 <atexit>
    2a56:	4770      	bx	lr
    2a58:	00000000 	.word	0x00000000
    2a5c:	00002ccd 	.word	0x00002ccd

00002a60 <atexit>:
    2a60:	2300      	movs	r3, #0
    2a62:	4601      	mov	r1, r0
    2a64:	461a      	mov	r2, r3
    2a66:	4618      	mov	r0, r3
    2a68:	f001 bc7e 	b.w	4368 <__register_exitproc>

00002a6c <__sflush_r>:
    2a6c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    2a70:	b29a      	uxth	r2, r3
    2a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a76:	460d      	mov	r5, r1
    2a78:	0711      	lsls	r1, r2, #28
    2a7a:	4680      	mov	r8, r0
    2a7c:	d43a      	bmi.n	2af4 <__sflush_r+0x88>
    2a7e:	686a      	ldr	r2, [r5, #4]
    2a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2a84:	2a00      	cmp	r2, #0
    2a86:	81ab      	strh	r3, [r5, #12]
    2a88:	dd6f      	ble.n	2b6a <__sflush_r+0xfe>
    2a8a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2a8c:	2c00      	cmp	r4, #0
    2a8e:	d049      	beq.n	2b24 <__sflush_r+0xb8>
    2a90:	2200      	movs	r2, #0
    2a92:	b29b      	uxth	r3, r3
    2a94:	f8d8 6000 	ldr.w	r6, [r8]
    2a98:	f8c8 2000 	str.w	r2, [r8]
    2a9c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
    2aa0:	d067      	beq.n	2b72 <__sflush_r+0x106>
    2aa2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    2aa4:	075f      	lsls	r7, r3, #29
    2aa6:	d505      	bpl.n	2ab4 <__sflush_r+0x48>
    2aa8:	6869      	ldr	r1, [r5, #4]
    2aaa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    2aac:	1a52      	subs	r2, r2, r1
    2aae:	b10b      	cbz	r3, 2ab4 <__sflush_r+0x48>
    2ab0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    2ab2:	1ad2      	subs	r2, r2, r3
    2ab4:	2300      	movs	r3, #0
    2ab6:	69e9      	ldr	r1, [r5, #28]
    2ab8:	4640      	mov	r0, r8
    2aba:	47a0      	blx	r4
    2abc:	1c44      	adds	r4, r0, #1
    2abe:	d03c      	beq.n	2b3a <__sflush_r+0xce>
    2ac0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    2ac4:	692a      	ldr	r2, [r5, #16]
    2ac6:	602a      	str	r2, [r5, #0]
    2ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2acc:	2200      	movs	r2, #0
    2ace:	81ab      	strh	r3, [r5, #12]
    2ad0:	04db      	lsls	r3, r3, #19
    2ad2:	606a      	str	r2, [r5, #4]
    2ad4:	d447      	bmi.n	2b66 <__sflush_r+0xfa>
    2ad6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    2ad8:	f8c8 6000 	str.w	r6, [r8]
    2adc:	b311      	cbz	r1, 2b24 <__sflush_r+0xb8>
    2ade:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2ae2:	4299      	cmp	r1, r3
    2ae4:	d002      	beq.n	2aec <__sflush_r+0x80>
    2ae6:	4640      	mov	r0, r8
    2ae8:	f000 f9de 	bl	2ea8 <_free_r>
    2aec:	2000      	movs	r0, #0
    2aee:	6328      	str	r0, [r5, #48]	; 0x30
    2af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2af4:	692e      	ldr	r6, [r5, #16]
    2af6:	b1ae      	cbz	r6, 2b24 <__sflush_r+0xb8>
    2af8:	682c      	ldr	r4, [r5, #0]
    2afa:	602e      	str	r6, [r5, #0]
    2afc:	0791      	lsls	r1, r2, #30
    2afe:	bf0c      	ite	eq
    2b00:	696b      	ldreq	r3, [r5, #20]
    2b02:	2300      	movne	r3, #0
    2b04:	1ba4      	subs	r4, r4, r6
    2b06:	60ab      	str	r3, [r5, #8]
    2b08:	e00a      	b.n	2b20 <__sflush_r+0xb4>
    2b0a:	4623      	mov	r3, r4
    2b0c:	4632      	mov	r2, r6
    2b0e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    2b10:	69e9      	ldr	r1, [r5, #28]
    2b12:	4640      	mov	r0, r8
    2b14:	47b8      	blx	r7
    2b16:	2800      	cmp	r0, #0
    2b18:	eba4 0400 	sub.w	r4, r4, r0
    2b1c:	4406      	add	r6, r0
    2b1e:	dd04      	ble.n	2b2a <__sflush_r+0xbe>
    2b20:	2c00      	cmp	r4, #0
    2b22:	dcf2      	bgt.n	2b0a <__sflush_r+0x9e>
    2b24:	2000      	movs	r0, #0
    2b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b2a:	89ab      	ldrh	r3, [r5, #12]
    2b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2b30:	81ab      	strh	r3, [r5, #12]
    2b32:	f04f 30ff 	mov.w	r0, #4294967295
    2b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b3a:	f8d8 4000 	ldr.w	r4, [r8]
    2b3e:	2c1d      	cmp	r4, #29
    2b40:	d8f3      	bhi.n	2b2a <__sflush_r+0xbe>
    2b42:	4b19      	ldr	r3, [pc, #100]	; (2ba8 <__sflush_r+0x13c>)
    2b44:	40e3      	lsrs	r3, r4
    2b46:	43db      	mvns	r3, r3
    2b48:	f013 0301 	ands.w	r3, r3, #1
    2b4c:	d1ed      	bne.n	2b2a <__sflush_r+0xbe>
    2b4e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
    2b52:	606b      	str	r3, [r5, #4]
    2b54:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
    2b58:	6929      	ldr	r1, [r5, #16]
    2b5a:	81ab      	strh	r3, [r5, #12]
    2b5c:	04da      	lsls	r2, r3, #19
    2b5e:	6029      	str	r1, [r5, #0]
    2b60:	d5b9      	bpl.n	2ad6 <__sflush_r+0x6a>
    2b62:	2c00      	cmp	r4, #0
    2b64:	d1b7      	bne.n	2ad6 <__sflush_r+0x6a>
    2b66:	6528      	str	r0, [r5, #80]	; 0x50
    2b68:	e7b5      	b.n	2ad6 <__sflush_r+0x6a>
    2b6a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2b6c:	2a00      	cmp	r2, #0
    2b6e:	dc8c      	bgt.n	2a8a <__sflush_r+0x1e>
    2b70:	e7d8      	b.n	2b24 <__sflush_r+0xb8>
    2b72:	2301      	movs	r3, #1
    2b74:	69e9      	ldr	r1, [r5, #28]
    2b76:	4640      	mov	r0, r8
    2b78:	47a0      	blx	r4
    2b7a:	1c43      	adds	r3, r0, #1
    2b7c:	4602      	mov	r2, r0
    2b7e:	d002      	beq.n	2b86 <__sflush_r+0x11a>
    2b80:	89ab      	ldrh	r3, [r5, #12]
    2b82:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2b84:	e78e      	b.n	2aa4 <__sflush_r+0x38>
    2b86:	f8d8 3000 	ldr.w	r3, [r8]
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d0f8      	beq.n	2b80 <__sflush_r+0x114>
    2b8e:	2b1d      	cmp	r3, #29
    2b90:	d001      	beq.n	2b96 <__sflush_r+0x12a>
    2b92:	2b16      	cmp	r3, #22
    2b94:	d102      	bne.n	2b9c <__sflush_r+0x130>
    2b96:	f8c8 6000 	str.w	r6, [r8]
    2b9a:	e7c3      	b.n	2b24 <__sflush_r+0xb8>
    2b9c:	89ab      	ldrh	r3, [r5, #12]
    2b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2ba2:	81ab      	strh	r3, [r5, #12]
    2ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ba8:	20400001 	.word	0x20400001

00002bac <_fflush_r>:
    2bac:	b538      	push	{r3, r4, r5, lr}
    2bae:	460d      	mov	r5, r1
    2bb0:	4604      	mov	r4, r0
    2bb2:	b108      	cbz	r0, 2bb8 <_fflush_r+0xc>
    2bb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2bb6:	b1bb      	cbz	r3, 2be8 <_fflush_r+0x3c>
    2bb8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
    2bbc:	b188      	cbz	r0, 2be2 <_fflush_r+0x36>
    2bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    2bc0:	07db      	lsls	r3, r3, #31
    2bc2:	d401      	bmi.n	2bc8 <_fflush_r+0x1c>
    2bc4:	0581      	lsls	r1, r0, #22
    2bc6:	d517      	bpl.n	2bf8 <_fflush_r+0x4c>
    2bc8:	4620      	mov	r0, r4
    2bca:	4629      	mov	r1, r5
    2bcc:	f7ff ff4e 	bl	2a6c <__sflush_r>
    2bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    2bd2:	07da      	lsls	r2, r3, #31
    2bd4:	4604      	mov	r4, r0
    2bd6:	d402      	bmi.n	2bde <_fflush_r+0x32>
    2bd8:	89ab      	ldrh	r3, [r5, #12]
    2bda:	059b      	lsls	r3, r3, #22
    2bdc:	d507      	bpl.n	2bee <_fflush_r+0x42>
    2bde:	4620      	mov	r0, r4
    2be0:	bd38      	pop	{r3, r4, r5, pc}
    2be2:	4604      	mov	r4, r0
    2be4:	4620      	mov	r0, r4
    2be6:	bd38      	pop	{r3, r4, r5, pc}
    2be8:	f000 f838 	bl	2c5c <__sinit>
    2bec:	e7e4      	b.n	2bb8 <_fflush_r+0xc>
    2bee:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2bf0:	f000 fbf6 	bl	33e0 <__retarget_lock_release_recursive>
    2bf4:	4620      	mov	r0, r4
    2bf6:	bd38      	pop	{r3, r4, r5, pc}
    2bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2bfa:	f000 fbef 	bl	33dc <__retarget_lock_acquire_recursive>
    2bfe:	e7e3      	b.n	2bc8 <_fflush_r+0x1c>

00002c00 <_cleanup_r>:
    2c00:	4901      	ldr	r1, [pc, #4]	; (2c08 <_cleanup_r+0x8>)
    2c02:	f000 bbaf 	b.w	3364 <_fwalk_reent>
    2c06:	bf00      	nop
    2c08:	00004451 	.word	0x00004451

00002c0c <std.isra.0>:
    2c0c:	b510      	push	{r4, lr}
    2c0e:	2300      	movs	r3, #0
    2c10:	4604      	mov	r4, r0
    2c12:	8181      	strh	r1, [r0, #12]
    2c14:	81c2      	strh	r2, [r0, #14]
    2c16:	6003      	str	r3, [r0, #0]
    2c18:	6043      	str	r3, [r0, #4]
    2c1a:	6083      	str	r3, [r0, #8]
    2c1c:	6643      	str	r3, [r0, #100]	; 0x64
    2c1e:	6103      	str	r3, [r0, #16]
    2c20:	6143      	str	r3, [r0, #20]
    2c22:	6183      	str	r3, [r0, #24]
    2c24:	4619      	mov	r1, r3
    2c26:	2208      	movs	r2, #8
    2c28:	305c      	adds	r0, #92	; 0x5c
    2c2a:	f7fe fec3 	bl	19b4 <memset>
    2c2e:	4807      	ldr	r0, [pc, #28]	; (2c4c <std.isra.0+0x40>)
    2c30:	4907      	ldr	r1, [pc, #28]	; (2c50 <std.isra.0+0x44>)
    2c32:	4a08      	ldr	r2, [pc, #32]	; (2c54 <std.isra.0+0x48>)
    2c34:	4b08      	ldr	r3, [pc, #32]	; (2c58 <std.isra.0+0x4c>)
    2c36:	6220      	str	r0, [r4, #32]
    2c38:	61e4      	str	r4, [r4, #28]
    2c3a:	6261      	str	r1, [r4, #36]	; 0x24
    2c3c:	62a2      	str	r2, [r4, #40]	; 0x28
    2c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    2c40:	f104 0058 	add.w	r0, r4, #88	; 0x58
    2c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2c48:	f000 bbc4 	b.w	33d4 <__retarget_lock_init_recursive>
    2c4c:	00004095 	.word	0x00004095
    2c50:	000040b9 	.word	0x000040b9
    2c54:	000040f5 	.word	0x000040f5
    2c58:	00004115 	.word	0x00004115

00002c5c <__sinit>:
    2c5c:	b510      	push	{r4, lr}
    2c5e:	4604      	mov	r4, r0
    2c60:	4812      	ldr	r0, [pc, #72]	; (2cac <__sinit+0x50>)
    2c62:	f000 fbbb 	bl	33dc <__retarget_lock_acquire_recursive>
    2c66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2c68:	b9d2      	cbnz	r2, 2ca0 <__sinit+0x44>
    2c6a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
    2c6e:	4810      	ldr	r0, [pc, #64]	; (2cb0 <__sinit+0x54>)
    2c70:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
    2c74:	2103      	movs	r1, #3
    2c76:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
    2c7a:	63e0      	str	r0, [r4, #60]	; 0x3c
    2c7c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
    2c80:	6860      	ldr	r0, [r4, #4]
    2c82:	2104      	movs	r1, #4
    2c84:	f7ff ffc2 	bl	2c0c <std.isra.0>
    2c88:	2201      	movs	r2, #1
    2c8a:	2109      	movs	r1, #9
    2c8c:	68a0      	ldr	r0, [r4, #8]
    2c8e:	f7ff ffbd 	bl	2c0c <std.isra.0>
    2c92:	2202      	movs	r2, #2
    2c94:	2112      	movs	r1, #18
    2c96:	68e0      	ldr	r0, [r4, #12]
    2c98:	f7ff ffb8 	bl	2c0c <std.isra.0>
    2c9c:	2301      	movs	r3, #1
    2c9e:	63a3      	str	r3, [r4, #56]	; 0x38
    2ca0:	4802      	ldr	r0, [pc, #8]	; (2cac <__sinit+0x50>)
    2ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2ca6:	f000 bb9b 	b.w	33e0 <__retarget_lock_release_recursive>
    2caa:	bf00      	nop
    2cac:	20000a70 	.word	0x20000a70
    2cb0:	00002c01 	.word	0x00002c01

00002cb4 <__sfp_lock_acquire>:
    2cb4:	4801      	ldr	r0, [pc, #4]	; (2cbc <__sfp_lock_acquire+0x8>)
    2cb6:	f000 bb91 	b.w	33dc <__retarget_lock_acquire_recursive>
    2cba:	bf00      	nop
    2cbc:	20000a84 	.word	0x20000a84

00002cc0 <__sfp_lock_release>:
    2cc0:	4801      	ldr	r0, [pc, #4]	; (2cc8 <__sfp_lock_release+0x8>)
    2cc2:	f000 bb8d 	b.w	33e0 <__retarget_lock_release_recursive>
    2cc6:	bf00      	nop
    2cc8:	20000a84 	.word	0x20000a84

00002ccc <__libc_fini_array>:
    2ccc:	b538      	push	{r3, r4, r5, lr}
    2cce:	4c0a      	ldr	r4, [pc, #40]	; (2cf8 <__libc_fini_array+0x2c>)
    2cd0:	4d0a      	ldr	r5, [pc, #40]	; (2cfc <__libc_fini_array+0x30>)
    2cd2:	1b64      	subs	r4, r4, r5
    2cd4:	10a4      	asrs	r4, r4, #2
    2cd6:	d00a      	beq.n	2cee <__libc_fini_array+0x22>
    2cd8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    2cdc:	3b01      	subs	r3, #1
    2cde:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2ce2:	3c01      	subs	r4, #1
    2ce4:	f855 3904 	ldr.w	r3, [r5], #-4
    2ce8:	4798      	blx	r3
    2cea:	2c00      	cmp	r4, #0
    2cec:	d1f9      	bne.n	2ce2 <__libc_fini_array+0x16>
    2cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2cf2:	f001 bf55 	b.w	4ba0 <_fini>
    2cf6:	bf00      	nop
    2cf8:	00004bb0 	.word	0x00004bb0
    2cfc:	00004bac 	.word	0x00004bac

00002d00 <__fputwc>:
    2d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d04:	b082      	sub	sp, #8
    2d06:	4680      	mov	r8, r0
    2d08:	4689      	mov	r9, r1
    2d0a:	4614      	mov	r4, r2
    2d0c:	f000 fb54 	bl	33b8 <__locale_mb_cur_max>
    2d10:	2801      	cmp	r0, #1
    2d12:	d036      	beq.n	2d82 <__fputwc+0x82>
    2d14:	464a      	mov	r2, r9
    2d16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    2d1a:	a901      	add	r1, sp, #4
    2d1c:	4640      	mov	r0, r8
    2d1e:	f001 fad5 	bl	42cc <_wcrtomb_r>
    2d22:	1c42      	adds	r2, r0, #1
    2d24:	4606      	mov	r6, r0
    2d26:	d025      	beq.n	2d74 <__fputwc+0x74>
    2d28:	b3a8      	cbz	r0, 2d96 <__fputwc+0x96>
    2d2a:	f89d e004 	ldrb.w	lr, [sp, #4]
    2d2e:	2500      	movs	r5, #0
    2d30:	f10d 0a04 	add.w	sl, sp, #4
    2d34:	e009      	b.n	2d4a <__fputwc+0x4a>
    2d36:	6823      	ldr	r3, [r4, #0]
    2d38:	1c5a      	adds	r2, r3, #1
    2d3a:	6022      	str	r2, [r4, #0]
    2d3c:	f883 e000 	strb.w	lr, [r3]
    2d40:	3501      	adds	r5, #1
    2d42:	42b5      	cmp	r5, r6
    2d44:	d227      	bcs.n	2d96 <__fputwc+0x96>
    2d46:	f815 e00a 	ldrb.w	lr, [r5, sl]
    2d4a:	68a3      	ldr	r3, [r4, #8]
    2d4c:	3b01      	subs	r3, #1
    2d4e:	2b00      	cmp	r3, #0
    2d50:	60a3      	str	r3, [r4, #8]
    2d52:	daf0      	bge.n	2d36 <__fputwc+0x36>
    2d54:	69a7      	ldr	r7, [r4, #24]
    2d56:	42bb      	cmp	r3, r7
    2d58:	4671      	mov	r1, lr
    2d5a:	4622      	mov	r2, r4
    2d5c:	4640      	mov	r0, r8
    2d5e:	db02      	blt.n	2d66 <__fputwc+0x66>
    2d60:	f1be 0f0a 	cmp.w	lr, #10
    2d64:	d1e7      	bne.n	2d36 <__fputwc+0x36>
    2d66:	f001 fa59 	bl	421c <__swbuf_r>
    2d6a:	1c43      	adds	r3, r0, #1
    2d6c:	d1e8      	bne.n	2d40 <__fputwc+0x40>
    2d6e:	b002      	add	sp, #8
    2d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d74:	89a3      	ldrh	r3, [r4, #12]
    2d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d7a:	81a3      	strh	r3, [r4, #12]
    2d7c:	b002      	add	sp, #8
    2d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d82:	f109 33ff 	add.w	r3, r9, #4294967295
    2d86:	2bfe      	cmp	r3, #254	; 0xfe
    2d88:	d8c4      	bhi.n	2d14 <__fputwc+0x14>
    2d8a:	fa5f fe89 	uxtb.w	lr, r9
    2d8e:	4606      	mov	r6, r0
    2d90:	f88d e004 	strb.w	lr, [sp, #4]
    2d94:	e7cb      	b.n	2d2e <__fputwc+0x2e>
    2d96:	4648      	mov	r0, r9
    2d98:	b002      	add	sp, #8
    2d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d9e:	bf00      	nop

00002da0 <_fputwc_r>:
    2da0:	b530      	push	{r4, r5, lr}
    2da2:	6e53      	ldr	r3, [r2, #100]	; 0x64
    2da4:	f013 0f01 	tst.w	r3, #1
    2da8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    2dac:	4614      	mov	r4, r2
    2dae:	b083      	sub	sp, #12
    2db0:	4605      	mov	r5, r0
    2db2:	b29a      	uxth	r2, r3
    2db4:	d101      	bne.n	2dba <_fputwc_r+0x1a>
    2db6:	0590      	lsls	r0, r2, #22
    2db8:	d51c      	bpl.n	2df4 <_fputwc_r+0x54>
    2dba:	0490      	lsls	r0, r2, #18
    2dbc:	d406      	bmi.n	2dcc <_fputwc_r+0x2c>
    2dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
    2dc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    2dc8:	81a3      	strh	r3, [r4, #12]
    2dca:	6662      	str	r2, [r4, #100]	; 0x64
    2dcc:	4628      	mov	r0, r5
    2dce:	4622      	mov	r2, r4
    2dd0:	f7ff ff96 	bl	2d00 <__fputwc>
    2dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2dd6:	07da      	lsls	r2, r3, #31
    2dd8:	4605      	mov	r5, r0
    2dda:	d402      	bmi.n	2de2 <_fputwc_r+0x42>
    2ddc:	89a3      	ldrh	r3, [r4, #12]
    2dde:	059b      	lsls	r3, r3, #22
    2de0:	d502      	bpl.n	2de8 <_fputwc_r+0x48>
    2de2:	4628      	mov	r0, r5
    2de4:	b003      	add	sp, #12
    2de6:	bd30      	pop	{r4, r5, pc}
    2de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2dea:	f000 faf9 	bl	33e0 <__retarget_lock_release_recursive>
    2dee:	4628      	mov	r0, r5
    2df0:	b003      	add	sp, #12
    2df2:	bd30      	pop	{r4, r5, pc}
    2df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2df6:	9101      	str	r1, [sp, #4]
    2df8:	f000 faf0 	bl	33dc <__retarget_lock_acquire_recursive>
    2dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2e00:	9901      	ldr	r1, [sp, #4]
    2e02:	b29a      	uxth	r2, r3
    2e04:	e7d9      	b.n	2dba <_fputwc_r+0x1a>
    2e06:	bf00      	nop

00002e08 <_malloc_trim_r>:
    2e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e0a:	4f24      	ldr	r7, [pc, #144]	; (2e9c <_malloc_trim_r+0x94>)
    2e0c:	460c      	mov	r4, r1
    2e0e:	4606      	mov	r6, r0
    2e10:	f000 ff7c 	bl	3d0c <__malloc_lock>
    2e14:	68bb      	ldr	r3, [r7, #8]
    2e16:	685d      	ldr	r5, [r3, #4]
    2e18:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    2e1c:	310f      	adds	r1, #15
    2e1e:	f025 0503 	bic.w	r5, r5, #3
    2e22:	4429      	add	r1, r5
    2e24:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    2e28:	f021 010f 	bic.w	r1, r1, #15
    2e2c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    2e30:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    2e34:	db07      	blt.n	2e46 <_malloc_trim_r+0x3e>
    2e36:	2100      	movs	r1, #0
    2e38:	4630      	mov	r0, r6
    2e3a:	f001 f919 	bl	4070 <_sbrk_r>
    2e3e:	68bb      	ldr	r3, [r7, #8]
    2e40:	442b      	add	r3, r5
    2e42:	4298      	cmp	r0, r3
    2e44:	d004      	beq.n	2e50 <_malloc_trim_r+0x48>
    2e46:	4630      	mov	r0, r6
    2e48:	f000 ff66 	bl	3d18 <__malloc_unlock>
    2e4c:	2000      	movs	r0, #0
    2e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e50:	4261      	negs	r1, r4
    2e52:	4630      	mov	r0, r6
    2e54:	f001 f90c 	bl	4070 <_sbrk_r>
    2e58:	3001      	adds	r0, #1
    2e5a:	d00d      	beq.n	2e78 <_malloc_trim_r+0x70>
    2e5c:	4b10      	ldr	r3, [pc, #64]	; (2ea0 <_malloc_trim_r+0x98>)
    2e5e:	68ba      	ldr	r2, [r7, #8]
    2e60:	6819      	ldr	r1, [r3, #0]
    2e62:	1b2d      	subs	r5, r5, r4
    2e64:	f045 0501 	orr.w	r5, r5, #1
    2e68:	4630      	mov	r0, r6
    2e6a:	1b09      	subs	r1, r1, r4
    2e6c:	6055      	str	r5, [r2, #4]
    2e6e:	6019      	str	r1, [r3, #0]
    2e70:	f000 ff52 	bl	3d18 <__malloc_unlock>
    2e74:	2001      	movs	r0, #1
    2e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e78:	2100      	movs	r1, #0
    2e7a:	4630      	mov	r0, r6
    2e7c:	f001 f8f8 	bl	4070 <_sbrk_r>
    2e80:	68ba      	ldr	r2, [r7, #8]
    2e82:	1a83      	subs	r3, r0, r2
    2e84:	2b0f      	cmp	r3, #15
    2e86:	ddde      	ble.n	2e46 <_malloc_trim_r+0x3e>
    2e88:	4c06      	ldr	r4, [pc, #24]	; (2ea4 <_malloc_trim_r+0x9c>)
    2e8a:	4905      	ldr	r1, [pc, #20]	; (2ea0 <_malloc_trim_r+0x98>)
    2e8c:	6824      	ldr	r4, [r4, #0]
    2e8e:	f043 0301 	orr.w	r3, r3, #1
    2e92:	1b00      	subs	r0, r0, r4
    2e94:	6053      	str	r3, [r2, #4]
    2e96:	6008      	str	r0, [r1, #0]
    2e98:	e7d5      	b.n	2e46 <_malloc_trim_r+0x3e>
    2e9a:	bf00      	nop
    2e9c:	200005d0 	.word	0x200005d0
    2ea0:	20000a08 	.word	0x20000a08
    2ea4:	200009d8 	.word	0x200009d8

00002ea8 <_free_r>:
    2ea8:	2900      	cmp	r1, #0
    2eaa:	d044      	beq.n	2f36 <_free_r+0x8e>
    2eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2eb0:	460d      	mov	r5, r1
    2eb2:	4680      	mov	r8, r0
    2eb4:	f000 ff2a 	bl	3d0c <__malloc_lock>
    2eb8:	f855 7c04 	ldr.w	r7, [r5, #-4]
    2ebc:	4969      	ldr	r1, [pc, #420]	; (3064 <_free_r+0x1bc>)
    2ebe:	f027 0301 	bic.w	r3, r7, #1
    2ec2:	f1a5 0408 	sub.w	r4, r5, #8
    2ec6:	18e2      	adds	r2, r4, r3
    2ec8:	688e      	ldr	r6, [r1, #8]
    2eca:	6850      	ldr	r0, [r2, #4]
    2ecc:	42b2      	cmp	r2, r6
    2ece:	f020 0003 	bic.w	r0, r0, #3
    2ed2:	d05e      	beq.n	2f92 <_free_r+0xea>
    2ed4:	07fe      	lsls	r6, r7, #31
    2ed6:	6050      	str	r0, [r2, #4]
    2ed8:	d40b      	bmi.n	2ef2 <_free_r+0x4a>
    2eda:	f855 7c08 	ldr.w	r7, [r5, #-8]
    2ede:	1be4      	subs	r4, r4, r7
    2ee0:	f101 0e08 	add.w	lr, r1, #8
    2ee4:	68a5      	ldr	r5, [r4, #8]
    2ee6:	4575      	cmp	r5, lr
    2ee8:	443b      	add	r3, r7
    2eea:	d06d      	beq.n	2fc8 <_free_r+0x120>
    2eec:	68e7      	ldr	r7, [r4, #12]
    2eee:	60ef      	str	r7, [r5, #12]
    2ef0:	60bd      	str	r5, [r7, #8]
    2ef2:	1815      	adds	r5, r2, r0
    2ef4:	686d      	ldr	r5, [r5, #4]
    2ef6:	07ed      	lsls	r5, r5, #31
    2ef8:	d53e      	bpl.n	2f78 <_free_r+0xd0>
    2efa:	f043 0201 	orr.w	r2, r3, #1
    2efe:	6062      	str	r2, [r4, #4]
    2f00:	50e3      	str	r3, [r4, r3]
    2f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2f06:	d217      	bcs.n	2f38 <_free_r+0x90>
    2f08:	08db      	lsrs	r3, r3, #3
    2f0a:	1c58      	adds	r0, r3, #1
    2f0c:	109a      	asrs	r2, r3, #2
    2f0e:	684d      	ldr	r5, [r1, #4]
    2f10:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
    2f14:	60a7      	str	r7, [r4, #8]
    2f16:	2301      	movs	r3, #1
    2f18:	4093      	lsls	r3, r2
    2f1a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    2f1e:	432b      	orrs	r3, r5
    2f20:	3a08      	subs	r2, #8
    2f22:	60e2      	str	r2, [r4, #12]
    2f24:	604b      	str	r3, [r1, #4]
    2f26:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
    2f2a:	60fc      	str	r4, [r7, #12]
    2f2c:	4640      	mov	r0, r8
    2f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2f32:	f000 bef1 	b.w	3d18 <__malloc_unlock>
    2f36:	4770      	bx	lr
    2f38:	0a5a      	lsrs	r2, r3, #9
    2f3a:	2a04      	cmp	r2, #4
    2f3c:	d852      	bhi.n	2fe4 <_free_r+0x13c>
    2f3e:	099a      	lsrs	r2, r3, #6
    2f40:	f102 0739 	add.w	r7, r2, #57	; 0x39
    2f44:	00ff      	lsls	r7, r7, #3
    2f46:	f102 0538 	add.w	r5, r2, #56	; 0x38
    2f4a:	19c8      	adds	r0, r1, r7
    2f4c:	59ca      	ldr	r2, [r1, r7]
    2f4e:	3808      	subs	r0, #8
    2f50:	4290      	cmp	r0, r2
    2f52:	d04f      	beq.n	2ff4 <_free_r+0x14c>
    2f54:	6851      	ldr	r1, [r2, #4]
    2f56:	f021 0103 	bic.w	r1, r1, #3
    2f5a:	428b      	cmp	r3, r1
    2f5c:	d232      	bcs.n	2fc4 <_free_r+0x11c>
    2f5e:	6892      	ldr	r2, [r2, #8]
    2f60:	4290      	cmp	r0, r2
    2f62:	d1f7      	bne.n	2f54 <_free_r+0xac>
    2f64:	68c3      	ldr	r3, [r0, #12]
    2f66:	60a0      	str	r0, [r4, #8]
    2f68:	60e3      	str	r3, [r4, #12]
    2f6a:	609c      	str	r4, [r3, #8]
    2f6c:	60c4      	str	r4, [r0, #12]
    2f6e:	4640      	mov	r0, r8
    2f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2f74:	f000 bed0 	b.w	3d18 <__malloc_unlock>
    2f78:	6895      	ldr	r5, [r2, #8]
    2f7a:	4f3b      	ldr	r7, [pc, #236]	; (3068 <_free_r+0x1c0>)
    2f7c:	42bd      	cmp	r5, r7
    2f7e:	4403      	add	r3, r0
    2f80:	d040      	beq.n	3004 <_free_r+0x15c>
    2f82:	68d0      	ldr	r0, [r2, #12]
    2f84:	60e8      	str	r0, [r5, #12]
    2f86:	f043 0201 	orr.w	r2, r3, #1
    2f8a:	6085      	str	r5, [r0, #8]
    2f8c:	6062      	str	r2, [r4, #4]
    2f8e:	50e3      	str	r3, [r4, r3]
    2f90:	e7b7      	b.n	2f02 <_free_r+0x5a>
    2f92:	07ff      	lsls	r7, r7, #31
    2f94:	4403      	add	r3, r0
    2f96:	d407      	bmi.n	2fa8 <_free_r+0x100>
    2f98:	f855 2c08 	ldr.w	r2, [r5, #-8]
    2f9c:	1aa4      	subs	r4, r4, r2
    2f9e:	4413      	add	r3, r2
    2fa0:	68a0      	ldr	r0, [r4, #8]
    2fa2:	68e2      	ldr	r2, [r4, #12]
    2fa4:	60c2      	str	r2, [r0, #12]
    2fa6:	6090      	str	r0, [r2, #8]
    2fa8:	4a30      	ldr	r2, [pc, #192]	; (306c <_free_r+0x1c4>)
    2faa:	6812      	ldr	r2, [r2, #0]
    2fac:	f043 0001 	orr.w	r0, r3, #1
    2fb0:	4293      	cmp	r3, r2
    2fb2:	6060      	str	r0, [r4, #4]
    2fb4:	608c      	str	r4, [r1, #8]
    2fb6:	d3b9      	bcc.n	2f2c <_free_r+0x84>
    2fb8:	4b2d      	ldr	r3, [pc, #180]	; (3070 <_free_r+0x1c8>)
    2fba:	4640      	mov	r0, r8
    2fbc:	6819      	ldr	r1, [r3, #0]
    2fbe:	f7ff ff23 	bl	2e08 <_malloc_trim_r>
    2fc2:	e7b3      	b.n	2f2c <_free_r+0x84>
    2fc4:	4610      	mov	r0, r2
    2fc6:	e7cd      	b.n	2f64 <_free_r+0xbc>
    2fc8:	1811      	adds	r1, r2, r0
    2fca:	6849      	ldr	r1, [r1, #4]
    2fcc:	07c9      	lsls	r1, r1, #31
    2fce:	d444      	bmi.n	305a <_free_r+0x1b2>
    2fd0:	6891      	ldr	r1, [r2, #8]
    2fd2:	68d2      	ldr	r2, [r2, #12]
    2fd4:	60ca      	str	r2, [r1, #12]
    2fd6:	4403      	add	r3, r0
    2fd8:	f043 0001 	orr.w	r0, r3, #1
    2fdc:	6091      	str	r1, [r2, #8]
    2fde:	6060      	str	r0, [r4, #4]
    2fe0:	50e3      	str	r3, [r4, r3]
    2fe2:	e7a3      	b.n	2f2c <_free_r+0x84>
    2fe4:	2a14      	cmp	r2, #20
    2fe6:	d816      	bhi.n	3016 <_free_r+0x16e>
    2fe8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    2fec:	00ff      	lsls	r7, r7, #3
    2fee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    2ff2:	e7aa      	b.n	2f4a <_free_r+0xa2>
    2ff4:	10aa      	asrs	r2, r5, #2
    2ff6:	2301      	movs	r3, #1
    2ff8:	684d      	ldr	r5, [r1, #4]
    2ffa:	4093      	lsls	r3, r2
    2ffc:	432b      	orrs	r3, r5
    2ffe:	604b      	str	r3, [r1, #4]
    3000:	4603      	mov	r3, r0
    3002:	e7b0      	b.n	2f66 <_free_r+0xbe>
    3004:	f043 0201 	orr.w	r2, r3, #1
    3008:	614c      	str	r4, [r1, #20]
    300a:	610c      	str	r4, [r1, #16]
    300c:	60e5      	str	r5, [r4, #12]
    300e:	60a5      	str	r5, [r4, #8]
    3010:	6062      	str	r2, [r4, #4]
    3012:	50e3      	str	r3, [r4, r3]
    3014:	e78a      	b.n	2f2c <_free_r+0x84>
    3016:	2a54      	cmp	r2, #84	; 0x54
    3018:	d806      	bhi.n	3028 <_free_r+0x180>
    301a:	0b1a      	lsrs	r2, r3, #12
    301c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    3020:	00ff      	lsls	r7, r7, #3
    3022:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    3026:	e790      	b.n	2f4a <_free_r+0xa2>
    3028:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    302c:	d806      	bhi.n	303c <_free_r+0x194>
    302e:	0bda      	lsrs	r2, r3, #15
    3030:	f102 0778 	add.w	r7, r2, #120	; 0x78
    3034:	00ff      	lsls	r7, r7, #3
    3036:	f102 0577 	add.w	r5, r2, #119	; 0x77
    303a:	e786      	b.n	2f4a <_free_r+0xa2>
    303c:	f240 5054 	movw	r0, #1364	; 0x554
    3040:	4282      	cmp	r2, r0
    3042:	d806      	bhi.n	3052 <_free_r+0x1aa>
    3044:	0c9a      	lsrs	r2, r3, #18
    3046:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    304a:	00ff      	lsls	r7, r7, #3
    304c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    3050:	e77b      	b.n	2f4a <_free_r+0xa2>
    3052:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
    3056:	257e      	movs	r5, #126	; 0x7e
    3058:	e777      	b.n	2f4a <_free_r+0xa2>
    305a:	f043 0101 	orr.w	r1, r3, #1
    305e:	6061      	str	r1, [r4, #4]
    3060:	6013      	str	r3, [r2, #0]
    3062:	e763      	b.n	2f2c <_free_r+0x84>
    3064:	200005d0 	.word	0x200005d0
    3068:	200005d8 	.word	0x200005d8
    306c:	200009dc 	.word	0x200009dc
    3070:	20000a38 	.word	0x20000a38

00003074 <__sfvwrite_r>:
    3074:	6893      	ldr	r3, [r2, #8]
    3076:	2b00      	cmp	r3, #0
    3078:	d073      	beq.n	3162 <__sfvwrite_r+0xee>
    307a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    307e:	898b      	ldrh	r3, [r1, #12]
    3080:	b083      	sub	sp, #12
    3082:	460c      	mov	r4, r1
    3084:	0719      	lsls	r1, r3, #28
    3086:	9000      	str	r0, [sp, #0]
    3088:	4616      	mov	r6, r2
    308a:	d526      	bpl.n	30da <__sfvwrite_r+0x66>
    308c:	6922      	ldr	r2, [r4, #16]
    308e:	b322      	cbz	r2, 30da <__sfvwrite_r+0x66>
    3090:	f013 0002 	ands.w	r0, r3, #2
    3094:	6835      	ldr	r5, [r6, #0]
    3096:	d02c      	beq.n	30f2 <__sfvwrite_r+0x7e>
    3098:	f04f 0900 	mov.w	r9, #0
    309c:	4fb0      	ldr	r7, [pc, #704]	; (3360 <__sfvwrite_r+0x2ec>)
    309e:	46c8      	mov	r8, r9
    30a0:	46b2      	mov	sl, r6
    30a2:	45b8      	cmp	r8, r7
    30a4:	4643      	mov	r3, r8
    30a6:	464a      	mov	r2, r9
    30a8:	bf28      	it	cs
    30aa:	463b      	movcs	r3, r7
    30ac:	9800      	ldr	r0, [sp, #0]
    30ae:	f1b8 0f00 	cmp.w	r8, #0
    30b2:	d050      	beq.n	3156 <__sfvwrite_r+0xe2>
    30b4:	69e1      	ldr	r1, [r4, #28]
    30b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    30b8:	47b0      	blx	r6
    30ba:	2800      	cmp	r0, #0
    30bc:	dd58      	ble.n	3170 <__sfvwrite_r+0xfc>
    30be:	f8da 3008 	ldr.w	r3, [sl, #8]
    30c2:	1a1b      	subs	r3, r3, r0
    30c4:	4481      	add	r9, r0
    30c6:	eba8 0800 	sub.w	r8, r8, r0
    30ca:	f8ca 3008 	str.w	r3, [sl, #8]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d1e7      	bne.n	30a2 <__sfvwrite_r+0x2e>
    30d2:	2000      	movs	r0, #0
    30d4:	b003      	add	sp, #12
    30d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30da:	4621      	mov	r1, r4
    30dc:	9800      	ldr	r0, [sp, #0]
    30de:	f7ff fc51 	bl	2984 <__swsetup_r>
    30e2:	2800      	cmp	r0, #0
    30e4:	f040 8133 	bne.w	334e <__sfvwrite_r+0x2da>
    30e8:	89a3      	ldrh	r3, [r4, #12]
    30ea:	6835      	ldr	r5, [r6, #0]
    30ec:	f013 0002 	ands.w	r0, r3, #2
    30f0:	d1d2      	bne.n	3098 <__sfvwrite_r+0x24>
    30f2:	f013 0901 	ands.w	r9, r3, #1
    30f6:	d145      	bne.n	3184 <__sfvwrite_r+0x110>
    30f8:	464f      	mov	r7, r9
    30fa:	9601      	str	r6, [sp, #4]
    30fc:	b337      	cbz	r7, 314c <__sfvwrite_r+0xd8>
    30fe:	059a      	lsls	r2, r3, #22
    3100:	f8d4 8008 	ldr.w	r8, [r4, #8]
    3104:	f140 8083 	bpl.w	320e <__sfvwrite_r+0x19a>
    3108:	4547      	cmp	r7, r8
    310a:	46c3      	mov	fp, r8
    310c:	f0c0 80ab 	bcc.w	3266 <__sfvwrite_r+0x1f2>
    3110:	f413 6f90 	tst.w	r3, #1152	; 0x480
    3114:	f040 80ac 	bne.w	3270 <__sfvwrite_r+0x1fc>
    3118:	6820      	ldr	r0, [r4, #0]
    311a:	46ba      	mov	sl, r7
    311c:	465a      	mov	r2, fp
    311e:	4649      	mov	r1, r9
    3120:	f000 fd90 	bl	3c44 <memmove>
    3124:	68a2      	ldr	r2, [r4, #8]
    3126:	6823      	ldr	r3, [r4, #0]
    3128:	eba2 0208 	sub.w	r2, r2, r8
    312c:	445b      	add	r3, fp
    312e:	60a2      	str	r2, [r4, #8]
    3130:	6023      	str	r3, [r4, #0]
    3132:	9a01      	ldr	r2, [sp, #4]
    3134:	6893      	ldr	r3, [r2, #8]
    3136:	eba3 030a 	sub.w	r3, r3, sl
    313a:	44d1      	add	r9, sl
    313c:	eba7 070a 	sub.w	r7, r7, sl
    3140:	6093      	str	r3, [r2, #8]
    3142:	2b00      	cmp	r3, #0
    3144:	d0c5      	beq.n	30d2 <__sfvwrite_r+0x5e>
    3146:	89a3      	ldrh	r3, [r4, #12]
    3148:	2f00      	cmp	r7, #0
    314a:	d1d8      	bne.n	30fe <__sfvwrite_r+0x8a>
    314c:	f8d5 9000 	ldr.w	r9, [r5]
    3150:	686f      	ldr	r7, [r5, #4]
    3152:	3508      	adds	r5, #8
    3154:	e7d2      	b.n	30fc <__sfvwrite_r+0x88>
    3156:	f8d5 9000 	ldr.w	r9, [r5]
    315a:	f8d5 8004 	ldr.w	r8, [r5, #4]
    315e:	3508      	adds	r5, #8
    3160:	e79f      	b.n	30a2 <__sfvwrite_r+0x2e>
    3162:	2000      	movs	r0, #0
    3164:	4770      	bx	lr
    3166:	4621      	mov	r1, r4
    3168:	9800      	ldr	r0, [sp, #0]
    316a:	f7ff fd1f 	bl	2bac <_fflush_r>
    316e:	b370      	cbz	r0, 31ce <__sfvwrite_r+0x15a>
    3170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3178:	f04f 30ff 	mov.w	r0, #4294967295
    317c:	81a3      	strh	r3, [r4, #12]
    317e:	b003      	add	sp, #12
    3180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3184:	4681      	mov	r9, r0
    3186:	4633      	mov	r3, r6
    3188:	464e      	mov	r6, r9
    318a:	46a8      	mov	r8, r5
    318c:	469a      	mov	sl, r3
    318e:	464d      	mov	r5, r9
    3190:	b34e      	cbz	r6, 31e6 <__sfvwrite_r+0x172>
    3192:	b380      	cbz	r0, 31f6 <__sfvwrite_r+0x182>
    3194:	6820      	ldr	r0, [r4, #0]
    3196:	6923      	ldr	r3, [r4, #16]
    3198:	6962      	ldr	r2, [r4, #20]
    319a:	45b1      	cmp	r9, r6
    319c:	46cb      	mov	fp, r9
    319e:	bf28      	it	cs
    31a0:	46b3      	movcs	fp, r6
    31a2:	4298      	cmp	r0, r3
    31a4:	465f      	mov	r7, fp
    31a6:	d904      	bls.n	31b2 <__sfvwrite_r+0x13e>
    31a8:	68a3      	ldr	r3, [r4, #8]
    31aa:	4413      	add	r3, r2
    31ac:	459b      	cmp	fp, r3
    31ae:	f300 80a6 	bgt.w	32fe <__sfvwrite_r+0x28a>
    31b2:	4593      	cmp	fp, r2
    31b4:	db4b      	blt.n	324e <__sfvwrite_r+0x1da>
    31b6:	4613      	mov	r3, r2
    31b8:	6a67      	ldr	r7, [r4, #36]	; 0x24
    31ba:	69e1      	ldr	r1, [r4, #28]
    31bc:	9800      	ldr	r0, [sp, #0]
    31be:	462a      	mov	r2, r5
    31c0:	47b8      	blx	r7
    31c2:	1e07      	subs	r7, r0, #0
    31c4:	ddd4      	ble.n	3170 <__sfvwrite_r+0xfc>
    31c6:	ebb9 0907 	subs.w	r9, r9, r7
    31ca:	d0cc      	beq.n	3166 <__sfvwrite_r+0xf2>
    31cc:	2001      	movs	r0, #1
    31ce:	f8da 3008 	ldr.w	r3, [sl, #8]
    31d2:	1bdb      	subs	r3, r3, r7
    31d4:	443d      	add	r5, r7
    31d6:	1bf6      	subs	r6, r6, r7
    31d8:	f8ca 3008 	str.w	r3, [sl, #8]
    31dc:	2b00      	cmp	r3, #0
    31de:	f43f af78 	beq.w	30d2 <__sfvwrite_r+0x5e>
    31e2:	2e00      	cmp	r6, #0
    31e4:	d1d5      	bne.n	3192 <__sfvwrite_r+0x11e>
    31e6:	f108 0308 	add.w	r3, r8, #8
    31ea:	e913 0060 	ldmdb	r3, {r5, r6}
    31ee:	4698      	mov	r8, r3
    31f0:	3308      	adds	r3, #8
    31f2:	2e00      	cmp	r6, #0
    31f4:	d0f9      	beq.n	31ea <__sfvwrite_r+0x176>
    31f6:	4632      	mov	r2, r6
    31f8:	210a      	movs	r1, #10
    31fa:	4628      	mov	r0, r5
    31fc:	f000 fc38 	bl	3a70 <memchr>
    3200:	2800      	cmp	r0, #0
    3202:	f000 80a1 	beq.w	3348 <__sfvwrite_r+0x2d4>
    3206:	3001      	adds	r0, #1
    3208:	eba0 0905 	sub.w	r9, r0, r5
    320c:	e7c2      	b.n	3194 <__sfvwrite_r+0x120>
    320e:	6820      	ldr	r0, [r4, #0]
    3210:	6923      	ldr	r3, [r4, #16]
    3212:	4298      	cmp	r0, r3
    3214:	d802      	bhi.n	321c <__sfvwrite_r+0x1a8>
    3216:	6963      	ldr	r3, [r4, #20]
    3218:	429f      	cmp	r7, r3
    321a:	d25d      	bcs.n	32d8 <__sfvwrite_r+0x264>
    321c:	45b8      	cmp	r8, r7
    321e:	bf28      	it	cs
    3220:	46b8      	movcs	r8, r7
    3222:	4642      	mov	r2, r8
    3224:	4649      	mov	r1, r9
    3226:	f000 fd0d 	bl	3c44 <memmove>
    322a:	68a3      	ldr	r3, [r4, #8]
    322c:	6822      	ldr	r2, [r4, #0]
    322e:	eba3 0308 	sub.w	r3, r3, r8
    3232:	4442      	add	r2, r8
    3234:	60a3      	str	r3, [r4, #8]
    3236:	6022      	str	r2, [r4, #0]
    3238:	b10b      	cbz	r3, 323e <__sfvwrite_r+0x1ca>
    323a:	46c2      	mov	sl, r8
    323c:	e779      	b.n	3132 <__sfvwrite_r+0xbe>
    323e:	4621      	mov	r1, r4
    3240:	9800      	ldr	r0, [sp, #0]
    3242:	f7ff fcb3 	bl	2bac <_fflush_r>
    3246:	2800      	cmp	r0, #0
    3248:	d192      	bne.n	3170 <__sfvwrite_r+0xfc>
    324a:	46c2      	mov	sl, r8
    324c:	e771      	b.n	3132 <__sfvwrite_r+0xbe>
    324e:	465a      	mov	r2, fp
    3250:	4629      	mov	r1, r5
    3252:	f000 fcf7 	bl	3c44 <memmove>
    3256:	68a2      	ldr	r2, [r4, #8]
    3258:	6823      	ldr	r3, [r4, #0]
    325a:	eba2 020b 	sub.w	r2, r2, fp
    325e:	445b      	add	r3, fp
    3260:	60a2      	str	r2, [r4, #8]
    3262:	6023      	str	r3, [r4, #0]
    3264:	e7af      	b.n	31c6 <__sfvwrite_r+0x152>
    3266:	6820      	ldr	r0, [r4, #0]
    3268:	46b8      	mov	r8, r7
    326a:	46ba      	mov	sl, r7
    326c:	46bb      	mov	fp, r7
    326e:	e755      	b.n	311c <__sfvwrite_r+0xa8>
    3270:	6962      	ldr	r2, [r4, #20]
    3272:	6820      	ldr	r0, [r4, #0]
    3274:	6921      	ldr	r1, [r4, #16]
    3276:	eb02 0842 	add.w	r8, r2, r2, lsl #1
    327a:	eba0 0a01 	sub.w	sl, r0, r1
    327e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    3282:	f10a 0001 	add.w	r0, sl, #1
    3286:	ea4f 0868 	mov.w	r8, r8, asr #1
    328a:	4438      	add	r0, r7
    328c:	4540      	cmp	r0, r8
    328e:	4642      	mov	r2, r8
    3290:	bf84      	itt	hi
    3292:	4680      	movhi	r8, r0
    3294:	4642      	movhi	r2, r8
    3296:	055b      	lsls	r3, r3, #21
    3298:	d544      	bpl.n	3324 <__sfvwrite_r+0x2b0>
    329a:	4611      	mov	r1, r2
    329c:	9800      	ldr	r0, [sp, #0]
    329e:	f000 f921 	bl	34e4 <_malloc_r>
    32a2:	4683      	mov	fp, r0
    32a4:	2800      	cmp	r0, #0
    32a6:	d055      	beq.n	3354 <__sfvwrite_r+0x2e0>
    32a8:	4652      	mov	r2, sl
    32aa:	6921      	ldr	r1, [r4, #16]
    32ac:	f000 fc30 	bl	3b10 <memcpy>
    32b0:	89a3      	ldrh	r3, [r4, #12]
    32b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    32b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    32ba:	81a3      	strh	r3, [r4, #12]
    32bc:	eb0b 000a 	add.w	r0, fp, sl
    32c0:	eba8 030a 	sub.w	r3, r8, sl
    32c4:	f8c4 b010 	str.w	fp, [r4, #16]
    32c8:	f8c4 8014 	str.w	r8, [r4, #20]
    32cc:	6020      	str	r0, [r4, #0]
    32ce:	60a3      	str	r3, [r4, #8]
    32d0:	46b8      	mov	r8, r7
    32d2:	46ba      	mov	sl, r7
    32d4:	46bb      	mov	fp, r7
    32d6:	e721      	b.n	311c <__sfvwrite_r+0xa8>
    32d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    32dc:	42b9      	cmp	r1, r7
    32de:	bf28      	it	cs
    32e0:	4639      	movcs	r1, r7
    32e2:	464a      	mov	r2, r9
    32e4:	fb91 f1f3 	sdiv	r1, r1, r3
    32e8:	9800      	ldr	r0, [sp, #0]
    32ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
    32ec:	fb03 f301 	mul.w	r3, r3, r1
    32f0:	69e1      	ldr	r1, [r4, #28]
    32f2:	47b0      	blx	r6
    32f4:	f1b0 0a00 	subs.w	sl, r0, #0
    32f8:	f73f af1b 	bgt.w	3132 <__sfvwrite_r+0xbe>
    32fc:	e738      	b.n	3170 <__sfvwrite_r+0xfc>
    32fe:	461a      	mov	r2, r3
    3300:	4629      	mov	r1, r5
    3302:	9301      	str	r3, [sp, #4]
    3304:	f000 fc9e 	bl	3c44 <memmove>
    3308:	6822      	ldr	r2, [r4, #0]
    330a:	9b01      	ldr	r3, [sp, #4]
    330c:	9800      	ldr	r0, [sp, #0]
    330e:	441a      	add	r2, r3
    3310:	6022      	str	r2, [r4, #0]
    3312:	4621      	mov	r1, r4
    3314:	f7ff fc4a 	bl	2bac <_fflush_r>
    3318:	9b01      	ldr	r3, [sp, #4]
    331a:	2800      	cmp	r0, #0
    331c:	f47f af28 	bne.w	3170 <__sfvwrite_r+0xfc>
    3320:	461f      	mov	r7, r3
    3322:	e750      	b.n	31c6 <__sfvwrite_r+0x152>
    3324:	9800      	ldr	r0, [sp, #0]
    3326:	f000 fcfd 	bl	3d24 <_realloc_r>
    332a:	4683      	mov	fp, r0
    332c:	2800      	cmp	r0, #0
    332e:	d1c5      	bne.n	32bc <__sfvwrite_r+0x248>
    3330:	9d00      	ldr	r5, [sp, #0]
    3332:	6921      	ldr	r1, [r4, #16]
    3334:	4628      	mov	r0, r5
    3336:	f7ff fdb7 	bl	2ea8 <_free_r>
    333a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    333e:	220c      	movs	r2, #12
    3340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3344:	602a      	str	r2, [r5, #0]
    3346:	e715      	b.n	3174 <__sfvwrite_r+0x100>
    3348:	f106 0901 	add.w	r9, r6, #1
    334c:	e722      	b.n	3194 <__sfvwrite_r+0x120>
    334e:	f04f 30ff 	mov.w	r0, #4294967295
    3352:	e6bf      	b.n	30d4 <__sfvwrite_r+0x60>
    3354:	9a00      	ldr	r2, [sp, #0]
    3356:	230c      	movs	r3, #12
    3358:	6013      	str	r3, [r2, #0]
    335a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    335e:	e709      	b.n	3174 <__sfvwrite_r+0x100>
    3360:	7ffffc00 	.word	0x7ffffc00

00003364 <_fwalk_reent>:
    3364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3368:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
    336c:	d01f      	beq.n	33ae <_fwalk_reent+0x4a>
    336e:	4688      	mov	r8, r1
    3370:	4606      	mov	r6, r0
    3372:	f04f 0900 	mov.w	r9, #0
    3376:	687d      	ldr	r5, [r7, #4]
    3378:	68bc      	ldr	r4, [r7, #8]
    337a:	3d01      	subs	r5, #1
    337c:	d411      	bmi.n	33a2 <_fwalk_reent+0x3e>
    337e:	89a3      	ldrh	r3, [r4, #12]
    3380:	2b01      	cmp	r3, #1
    3382:	f105 35ff 	add.w	r5, r5, #4294967295
    3386:	d908      	bls.n	339a <_fwalk_reent+0x36>
    3388:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    338c:	3301      	adds	r3, #1
    338e:	4621      	mov	r1, r4
    3390:	4630      	mov	r0, r6
    3392:	d002      	beq.n	339a <_fwalk_reent+0x36>
    3394:	47c0      	blx	r8
    3396:	ea49 0900 	orr.w	r9, r9, r0
    339a:	1c6b      	adds	r3, r5, #1
    339c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    33a0:	d1ed      	bne.n	337e <_fwalk_reent+0x1a>
    33a2:	683f      	ldr	r7, [r7, #0]
    33a4:	2f00      	cmp	r7, #0
    33a6:	d1e6      	bne.n	3376 <_fwalk_reent+0x12>
    33a8:	4648      	mov	r0, r9
    33aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33ae:	46b9      	mov	r9, r7
    33b0:	4648      	mov	r0, r9
    33b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33b6:	bf00      	nop

000033b8 <__locale_mb_cur_max>:
    33b8:	4b04      	ldr	r3, [pc, #16]	; (33cc <__locale_mb_cur_max+0x14>)
    33ba:	4a05      	ldr	r2, [pc, #20]	; (33d0 <__locale_mb_cur_max+0x18>)
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    33c0:	2b00      	cmp	r3, #0
    33c2:	bf08      	it	eq
    33c4:	4613      	moveq	r3, r2
    33c6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    33ca:	4770      	bx	lr
    33cc:	20000030 	.word	0x20000030
    33d0:	20000464 	.word	0x20000464

000033d4 <__retarget_lock_init_recursive>:
    33d4:	4770      	bx	lr
    33d6:	bf00      	nop

000033d8 <__retarget_lock_close_recursive>:
    33d8:	4770      	bx	lr
    33da:	bf00      	nop

000033dc <__retarget_lock_acquire_recursive>:
    33dc:	4770      	bx	lr
    33de:	bf00      	nop

000033e0 <__retarget_lock_release_recursive>:
    33e0:	4770      	bx	lr
    33e2:	bf00      	nop

000033e4 <__swhatbuf_r>:
    33e4:	b570      	push	{r4, r5, r6, lr}
    33e6:	460c      	mov	r4, r1
    33e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    33ec:	2900      	cmp	r1, #0
    33ee:	b090      	sub	sp, #64	; 0x40
    33f0:	4615      	mov	r5, r2
    33f2:	461e      	mov	r6, r3
    33f4:	db14      	blt.n	3420 <__swhatbuf_r+0x3c>
    33f6:	aa01      	add	r2, sp, #4
    33f8:	f001 f88c 	bl	4514 <_fstat_r>
    33fc:	2800      	cmp	r0, #0
    33fe:	db0f      	blt.n	3420 <__swhatbuf_r+0x3c>
    3400:	9a02      	ldr	r2, [sp, #8]
    3402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    3406:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    340a:	fab2 f282 	clz	r2, r2
    340e:	0952      	lsrs	r2, r2, #5
    3410:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3414:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3418:	6032      	str	r2, [r6, #0]
    341a:	602b      	str	r3, [r5, #0]
    341c:	b010      	add	sp, #64	; 0x40
    341e:	bd70      	pop	{r4, r5, r6, pc}
    3420:	89a2      	ldrh	r2, [r4, #12]
    3422:	2300      	movs	r3, #0
    3424:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    3428:	6033      	str	r3, [r6, #0]
    342a:	d004      	beq.n	3436 <__swhatbuf_r+0x52>
    342c:	2240      	movs	r2, #64	; 0x40
    342e:	4618      	mov	r0, r3
    3430:	602a      	str	r2, [r5, #0]
    3432:	b010      	add	sp, #64	; 0x40
    3434:	bd70      	pop	{r4, r5, r6, pc}
    3436:	f44f 6380 	mov.w	r3, #1024	; 0x400
    343a:	602b      	str	r3, [r5, #0]
    343c:	b010      	add	sp, #64	; 0x40
    343e:	bd70      	pop	{r4, r5, r6, pc}

00003440 <__smakebuf_r>:
    3440:	898a      	ldrh	r2, [r1, #12]
    3442:	0792      	lsls	r2, r2, #30
    3444:	460b      	mov	r3, r1
    3446:	d506      	bpl.n	3456 <__smakebuf_r+0x16>
    3448:	f101 0243 	add.w	r2, r1, #67	; 0x43
    344c:	2101      	movs	r1, #1
    344e:	601a      	str	r2, [r3, #0]
    3450:	611a      	str	r2, [r3, #16]
    3452:	6159      	str	r1, [r3, #20]
    3454:	4770      	bx	lr
    3456:	b5f0      	push	{r4, r5, r6, r7, lr}
    3458:	b083      	sub	sp, #12
    345a:	ab01      	add	r3, sp, #4
    345c:	466a      	mov	r2, sp
    345e:	460c      	mov	r4, r1
    3460:	4606      	mov	r6, r0
    3462:	f7ff ffbf 	bl	33e4 <__swhatbuf_r>
    3466:	9900      	ldr	r1, [sp, #0]
    3468:	4605      	mov	r5, r0
    346a:	4630      	mov	r0, r6
    346c:	f000 f83a 	bl	34e4 <_malloc_r>
    3470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3474:	b1d8      	cbz	r0, 34ae <__smakebuf_r+0x6e>
    3476:	9a01      	ldr	r2, [sp, #4]
    3478:	4f15      	ldr	r7, [pc, #84]	; (34d0 <__smakebuf_r+0x90>)
    347a:	9900      	ldr	r1, [sp, #0]
    347c:	63f7      	str	r7, [r6, #60]	; 0x3c
    347e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3482:	81a3      	strh	r3, [r4, #12]
    3484:	6020      	str	r0, [r4, #0]
    3486:	6120      	str	r0, [r4, #16]
    3488:	6161      	str	r1, [r4, #20]
    348a:	b91a      	cbnz	r2, 3494 <__smakebuf_r+0x54>
    348c:	432b      	orrs	r3, r5
    348e:	81a3      	strh	r3, [r4, #12]
    3490:	b003      	add	sp, #12
    3492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3494:	4630      	mov	r0, r6
    3496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    349a:	f001 f84f 	bl	453c <_isatty_r>
    349e:	b1a0      	cbz	r0, 34ca <__smakebuf_r+0x8a>
    34a0:	89a3      	ldrh	r3, [r4, #12]
    34a2:	f023 0303 	bic.w	r3, r3, #3
    34a6:	f043 0301 	orr.w	r3, r3, #1
    34aa:	b21b      	sxth	r3, r3
    34ac:	e7ee      	b.n	348c <__smakebuf_r+0x4c>
    34ae:	059a      	lsls	r2, r3, #22
    34b0:	d4ee      	bmi.n	3490 <__smakebuf_r+0x50>
    34b2:	f023 0303 	bic.w	r3, r3, #3
    34b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    34ba:	f043 0302 	orr.w	r3, r3, #2
    34be:	2101      	movs	r1, #1
    34c0:	81a3      	strh	r3, [r4, #12]
    34c2:	6022      	str	r2, [r4, #0]
    34c4:	6122      	str	r2, [r4, #16]
    34c6:	6161      	str	r1, [r4, #20]
    34c8:	e7e2      	b.n	3490 <__smakebuf_r+0x50>
    34ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    34ce:	e7dd      	b.n	348c <__smakebuf_r+0x4c>
    34d0:	00002c01 	.word	0x00002c01

000034d4 <malloc>:
    34d4:	4b02      	ldr	r3, [pc, #8]	; (34e0 <malloc+0xc>)
    34d6:	4601      	mov	r1, r0
    34d8:	6818      	ldr	r0, [r3, #0]
    34da:	f000 b803 	b.w	34e4 <_malloc_r>
    34de:	bf00      	nop
    34e0:	20000030 	.word	0x20000030

000034e4 <_malloc_r>:
    34e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34e8:	f101 060b 	add.w	r6, r1, #11
    34ec:	2e16      	cmp	r6, #22
    34ee:	b083      	sub	sp, #12
    34f0:	4605      	mov	r5, r0
    34f2:	f240 809e 	bls.w	3632 <_malloc_r+0x14e>
    34f6:	f036 0607 	bics.w	r6, r6, #7
    34fa:	f100 80bd 	bmi.w	3678 <_malloc_r+0x194>
    34fe:	42b1      	cmp	r1, r6
    3500:	f200 80ba 	bhi.w	3678 <_malloc_r+0x194>
    3504:	f000 fc02 	bl	3d0c <__malloc_lock>
    3508:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    350c:	f0c0 8293 	bcc.w	3a36 <_malloc_r+0x552>
    3510:	0a73      	lsrs	r3, r6, #9
    3512:	f000 80b8 	beq.w	3686 <_malloc_r+0x1a2>
    3516:	2b04      	cmp	r3, #4
    3518:	f200 8179 	bhi.w	380e <_malloc_r+0x32a>
    351c:	09b3      	lsrs	r3, r6, #6
    351e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    3522:	f103 0e38 	add.w	lr, r3, #56	; 0x38
    3526:	00c3      	lsls	r3, r0, #3
    3528:	4fbf      	ldr	r7, [pc, #764]	; (3828 <_malloc_r+0x344>)
    352a:	443b      	add	r3, r7
    352c:	f1a3 0108 	sub.w	r1, r3, #8
    3530:	685c      	ldr	r4, [r3, #4]
    3532:	42a1      	cmp	r1, r4
    3534:	d106      	bne.n	3544 <_malloc_r+0x60>
    3536:	e00c      	b.n	3552 <_malloc_r+0x6e>
    3538:	2a00      	cmp	r2, #0
    353a:	f280 80aa 	bge.w	3692 <_malloc_r+0x1ae>
    353e:	68e4      	ldr	r4, [r4, #12]
    3540:	42a1      	cmp	r1, r4
    3542:	d006      	beq.n	3552 <_malloc_r+0x6e>
    3544:	6863      	ldr	r3, [r4, #4]
    3546:	f023 0303 	bic.w	r3, r3, #3
    354a:	1b9a      	subs	r2, r3, r6
    354c:	2a0f      	cmp	r2, #15
    354e:	ddf3      	ble.n	3538 <_malloc_r+0x54>
    3550:	4670      	mov	r0, lr
    3552:	693c      	ldr	r4, [r7, #16]
    3554:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 383c <_malloc_r+0x358>
    3558:	4574      	cmp	r4, lr
    355a:	f000 81ab 	beq.w	38b4 <_malloc_r+0x3d0>
    355e:	6863      	ldr	r3, [r4, #4]
    3560:	f023 0303 	bic.w	r3, r3, #3
    3564:	1b9a      	subs	r2, r3, r6
    3566:	2a0f      	cmp	r2, #15
    3568:	f300 8190 	bgt.w	388c <_malloc_r+0x3a8>
    356c:	2a00      	cmp	r2, #0
    356e:	f8c7 e014 	str.w	lr, [r7, #20]
    3572:	f8c7 e010 	str.w	lr, [r7, #16]
    3576:	f280 809d 	bge.w	36b4 <_malloc_r+0x1d0>
    357a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    357e:	f080 8161 	bcs.w	3844 <_malloc_r+0x360>
    3582:	08db      	lsrs	r3, r3, #3
    3584:	f103 0c01 	add.w	ip, r3, #1
    3588:	1099      	asrs	r1, r3, #2
    358a:	687a      	ldr	r2, [r7, #4]
    358c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
    3590:	f8c4 8008 	str.w	r8, [r4, #8]
    3594:	2301      	movs	r3, #1
    3596:	408b      	lsls	r3, r1
    3598:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
    359c:	4313      	orrs	r3, r2
    359e:	3908      	subs	r1, #8
    35a0:	60e1      	str	r1, [r4, #12]
    35a2:	607b      	str	r3, [r7, #4]
    35a4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
    35a8:	f8c8 400c 	str.w	r4, [r8, #12]
    35ac:	1082      	asrs	r2, r0, #2
    35ae:	2401      	movs	r4, #1
    35b0:	4094      	lsls	r4, r2
    35b2:	429c      	cmp	r4, r3
    35b4:	f200 808b 	bhi.w	36ce <_malloc_r+0x1ea>
    35b8:	421c      	tst	r4, r3
    35ba:	d106      	bne.n	35ca <_malloc_r+0xe6>
    35bc:	f020 0003 	bic.w	r0, r0, #3
    35c0:	0064      	lsls	r4, r4, #1
    35c2:	421c      	tst	r4, r3
    35c4:	f100 0004 	add.w	r0, r0, #4
    35c8:	d0fa      	beq.n	35c0 <_malloc_r+0xdc>
    35ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    35ce:	46cc      	mov	ip, r9
    35d0:	4680      	mov	r8, r0
    35d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    35d6:	459c      	cmp	ip, r3
    35d8:	d107      	bne.n	35ea <_malloc_r+0x106>
    35da:	e16d      	b.n	38b8 <_malloc_r+0x3d4>
    35dc:	2a00      	cmp	r2, #0
    35de:	f280 817b 	bge.w	38d8 <_malloc_r+0x3f4>
    35e2:	68db      	ldr	r3, [r3, #12]
    35e4:	459c      	cmp	ip, r3
    35e6:	f000 8167 	beq.w	38b8 <_malloc_r+0x3d4>
    35ea:	6859      	ldr	r1, [r3, #4]
    35ec:	f021 0103 	bic.w	r1, r1, #3
    35f0:	1b8a      	subs	r2, r1, r6
    35f2:	2a0f      	cmp	r2, #15
    35f4:	ddf2      	ble.n	35dc <_malloc_r+0xf8>
    35f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    35fa:	f8d3 8008 	ldr.w	r8, [r3, #8]
    35fe:	9300      	str	r3, [sp, #0]
    3600:	199c      	adds	r4, r3, r6
    3602:	4628      	mov	r0, r5
    3604:	f046 0601 	orr.w	r6, r6, #1
    3608:	f042 0501 	orr.w	r5, r2, #1
    360c:	605e      	str	r6, [r3, #4]
    360e:	f8c8 c00c 	str.w	ip, [r8, #12]
    3612:	f8cc 8008 	str.w	r8, [ip, #8]
    3616:	617c      	str	r4, [r7, #20]
    3618:	613c      	str	r4, [r7, #16]
    361a:	f8c4 e00c 	str.w	lr, [r4, #12]
    361e:	f8c4 e008 	str.w	lr, [r4, #8]
    3622:	6065      	str	r5, [r4, #4]
    3624:	505a      	str	r2, [r3, r1]
    3626:	f000 fb77 	bl	3d18 <__malloc_unlock>
    362a:	9b00      	ldr	r3, [sp, #0]
    362c:	f103 0408 	add.w	r4, r3, #8
    3630:	e01e      	b.n	3670 <_malloc_r+0x18c>
    3632:	2910      	cmp	r1, #16
    3634:	d820      	bhi.n	3678 <_malloc_r+0x194>
    3636:	f000 fb69 	bl	3d0c <__malloc_lock>
    363a:	2610      	movs	r6, #16
    363c:	2318      	movs	r3, #24
    363e:	2002      	movs	r0, #2
    3640:	4f79      	ldr	r7, [pc, #484]	; (3828 <_malloc_r+0x344>)
    3642:	443b      	add	r3, r7
    3644:	f1a3 0208 	sub.w	r2, r3, #8
    3648:	685c      	ldr	r4, [r3, #4]
    364a:	4294      	cmp	r4, r2
    364c:	f000 813d 	beq.w	38ca <_malloc_r+0x3e6>
    3650:	6863      	ldr	r3, [r4, #4]
    3652:	68e1      	ldr	r1, [r4, #12]
    3654:	68a6      	ldr	r6, [r4, #8]
    3656:	f023 0303 	bic.w	r3, r3, #3
    365a:	4423      	add	r3, r4
    365c:	4628      	mov	r0, r5
    365e:	685a      	ldr	r2, [r3, #4]
    3660:	60f1      	str	r1, [r6, #12]
    3662:	f042 0201 	orr.w	r2, r2, #1
    3666:	608e      	str	r6, [r1, #8]
    3668:	605a      	str	r2, [r3, #4]
    366a:	f000 fb55 	bl	3d18 <__malloc_unlock>
    366e:	3408      	adds	r4, #8
    3670:	4620      	mov	r0, r4
    3672:	b003      	add	sp, #12
    3674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3678:	2400      	movs	r4, #0
    367a:	230c      	movs	r3, #12
    367c:	4620      	mov	r0, r4
    367e:	602b      	str	r3, [r5, #0]
    3680:	b003      	add	sp, #12
    3682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3686:	2040      	movs	r0, #64	; 0x40
    3688:	f44f 7300 	mov.w	r3, #512	; 0x200
    368c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    3690:	e74a      	b.n	3528 <_malloc_r+0x44>
    3692:	4423      	add	r3, r4
    3694:	68e1      	ldr	r1, [r4, #12]
    3696:	685a      	ldr	r2, [r3, #4]
    3698:	68a6      	ldr	r6, [r4, #8]
    369a:	f042 0201 	orr.w	r2, r2, #1
    369e:	60f1      	str	r1, [r6, #12]
    36a0:	4628      	mov	r0, r5
    36a2:	608e      	str	r6, [r1, #8]
    36a4:	605a      	str	r2, [r3, #4]
    36a6:	f000 fb37 	bl	3d18 <__malloc_unlock>
    36aa:	3408      	adds	r4, #8
    36ac:	4620      	mov	r0, r4
    36ae:	b003      	add	sp, #12
    36b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36b4:	4423      	add	r3, r4
    36b6:	4628      	mov	r0, r5
    36b8:	685a      	ldr	r2, [r3, #4]
    36ba:	f042 0201 	orr.w	r2, r2, #1
    36be:	605a      	str	r2, [r3, #4]
    36c0:	f000 fb2a 	bl	3d18 <__malloc_unlock>
    36c4:	3408      	adds	r4, #8
    36c6:	4620      	mov	r0, r4
    36c8:	b003      	add	sp, #12
    36ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36ce:	68bc      	ldr	r4, [r7, #8]
    36d0:	6863      	ldr	r3, [r4, #4]
    36d2:	f023 0803 	bic.w	r8, r3, #3
    36d6:	45b0      	cmp	r8, r6
    36d8:	d304      	bcc.n	36e4 <_malloc_r+0x200>
    36da:	eba8 0306 	sub.w	r3, r8, r6
    36de:	2b0f      	cmp	r3, #15
    36e0:	f300 8085 	bgt.w	37ee <_malloc_r+0x30a>
    36e4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3840 <_malloc_r+0x35c>
    36e8:	4b50      	ldr	r3, [pc, #320]	; (382c <_malloc_r+0x348>)
    36ea:	f8d9 2000 	ldr.w	r2, [r9]
    36ee:	681b      	ldr	r3, [r3, #0]
    36f0:	3201      	adds	r2, #1
    36f2:	4433      	add	r3, r6
    36f4:	eb04 0a08 	add.w	sl, r4, r8
    36f8:	f000 8155 	beq.w	39a6 <_malloc_r+0x4c2>
    36fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    3700:	330f      	adds	r3, #15
    3702:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
    3706:	f02b 0b0f 	bic.w	fp, fp, #15
    370a:	4659      	mov	r1, fp
    370c:	4628      	mov	r0, r5
    370e:	f000 fcaf 	bl	4070 <_sbrk_r>
    3712:	1c41      	adds	r1, r0, #1
    3714:	4602      	mov	r2, r0
    3716:	f000 80fc 	beq.w	3912 <_malloc_r+0x42e>
    371a:	4582      	cmp	sl, r0
    371c:	f200 80f7 	bhi.w	390e <_malloc_r+0x42a>
    3720:	4b43      	ldr	r3, [pc, #268]	; (3830 <_malloc_r+0x34c>)
    3722:	6819      	ldr	r1, [r3, #0]
    3724:	4459      	add	r1, fp
    3726:	6019      	str	r1, [r3, #0]
    3728:	f000 814d 	beq.w	39c6 <_malloc_r+0x4e2>
    372c:	f8d9 0000 	ldr.w	r0, [r9]
    3730:	3001      	adds	r0, #1
    3732:	bf1b      	ittet	ne
    3734:	eba2 0a0a 	subne.w	sl, r2, sl
    3738:	4451      	addne	r1, sl
    373a:	f8c9 2000 	streq.w	r2, [r9]
    373e:	6019      	strne	r1, [r3, #0]
    3740:	f012 0107 	ands.w	r1, r2, #7
    3744:	f000 8115 	beq.w	3972 <_malloc_r+0x48e>
    3748:	f1c1 0008 	rsb	r0, r1, #8
    374c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    3750:	4402      	add	r2, r0
    3752:	3108      	adds	r1, #8
    3754:	eb02 090b 	add.w	r9, r2, fp
    3758:	f3c9 090b 	ubfx	r9, r9, #0, #12
    375c:	eba1 0909 	sub.w	r9, r1, r9
    3760:	4649      	mov	r1, r9
    3762:	4628      	mov	r0, r5
    3764:	9301      	str	r3, [sp, #4]
    3766:	9200      	str	r2, [sp, #0]
    3768:	f000 fc82 	bl	4070 <_sbrk_r>
    376c:	1c43      	adds	r3, r0, #1
    376e:	e89d 000c 	ldmia.w	sp, {r2, r3}
    3772:	f000 8143 	beq.w	39fc <_malloc_r+0x518>
    3776:	1a80      	subs	r0, r0, r2
    3778:	4448      	add	r0, r9
    377a:	f040 0001 	orr.w	r0, r0, #1
    377e:	6819      	ldr	r1, [r3, #0]
    3780:	60ba      	str	r2, [r7, #8]
    3782:	4449      	add	r1, r9
    3784:	42bc      	cmp	r4, r7
    3786:	6050      	str	r0, [r2, #4]
    3788:	6019      	str	r1, [r3, #0]
    378a:	d017      	beq.n	37bc <_malloc_r+0x2d8>
    378c:	f1b8 0f0f 	cmp.w	r8, #15
    3790:	f240 80fb 	bls.w	398a <_malloc_r+0x4a6>
    3794:	6860      	ldr	r0, [r4, #4]
    3796:	f1a8 020c 	sub.w	r2, r8, #12
    379a:	f022 0207 	bic.w	r2, r2, #7
    379e:	eb04 0e02 	add.w	lr, r4, r2
    37a2:	f000 0001 	and.w	r0, r0, #1
    37a6:	f04f 0c05 	mov.w	ip, #5
    37aa:	4310      	orrs	r0, r2
    37ac:	2a0f      	cmp	r2, #15
    37ae:	6060      	str	r0, [r4, #4]
    37b0:	f8ce c004 	str.w	ip, [lr, #4]
    37b4:	f8ce c008 	str.w	ip, [lr, #8]
    37b8:	f200 8117 	bhi.w	39ea <_malloc_r+0x506>
    37bc:	4b1d      	ldr	r3, [pc, #116]	; (3834 <_malloc_r+0x350>)
    37be:	68bc      	ldr	r4, [r7, #8]
    37c0:	681a      	ldr	r2, [r3, #0]
    37c2:	4291      	cmp	r1, r2
    37c4:	bf88      	it	hi
    37c6:	6019      	strhi	r1, [r3, #0]
    37c8:	4b1b      	ldr	r3, [pc, #108]	; (3838 <_malloc_r+0x354>)
    37ca:	681a      	ldr	r2, [r3, #0]
    37cc:	4291      	cmp	r1, r2
    37ce:	6862      	ldr	r2, [r4, #4]
    37d0:	bf88      	it	hi
    37d2:	6019      	strhi	r1, [r3, #0]
    37d4:	f022 0203 	bic.w	r2, r2, #3
    37d8:	4296      	cmp	r6, r2
    37da:	eba2 0306 	sub.w	r3, r2, r6
    37de:	d801      	bhi.n	37e4 <_malloc_r+0x300>
    37e0:	2b0f      	cmp	r3, #15
    37e2:	dc04      	bgt.n	37ee <_malloc_r+0x30a>
    37e4:	4628      	mov	r0, r5
    37e6:	f000 fa97 	bl	3d18 <__malloc_unlock>
    37ea:	2400      	movs	r4, #0
    37ec:	e740      	b.n	3670 <_malloc_r+0x18c>
    37ee:	19a2      	adds	r2, r4, r6
    37f0:	f043 0301 	orr.w	r3, r3, #1
    37f4:	f046 0601 	orr.w	r6, r6, #1
    37f8:	6066      	str	r6, [r4, #4]
    37fa:	4628      	mov	r0, r5
    37fc:	60ba      	str	r2, [r7, #8]
    37fe:	6053      	str	r3, [r2, #4]
    3800:	f000 fa8a 	bl	3d18 <__malloc_unlock>
    3804:	3408      	adds	r4, #8
    3806:	4620      	mov	r0, r4
    3808:	b003      	add	sp, #12
    380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    380e:	2b14      	cmp	r3, #20
    3810:	d971      	bls.n	38f6 <_malloc_r+0x412>
    3812:	2b54      	cmp	r3, #84	; 0x54
    3814:	f200 80a3 	bhi.w	395e <_malloc_r+0x47a>
    3818:	0b33      	lsrs	r3, r6, #12
    381a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    381e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
    3822:	00c3      	lsls	r3, r0, #3
    3824:	e680      	b.n	3528 <_malloc_r+0x44>
    3826:	bf00      	nop
    3828:	200005d0 	.word	0x200005d0
    382c:	20000a38 	.word	0x20000a38
    3830:	20000a08 	.word	0x20000a08
    3834:	20000a30 	.word	0x20000a30
    3838:	20000a34 	.word	0x20000a34
    383c:	200005d8 	.word	0x200005d8
    3840:	200009d8 	.word	0x200009d8
    3844:	0a5a      	lsrs	r2, r3, #9
    3846:	2a04      	cmp	r2, #4
    3848:	d95b      	bls.n	3902 <_malloc_r+0x41e>
    384a:	2a14      	cmp	r2, #20
    384c:	f200 80ae 	bhi.w	39ac <_malloc_r+0x4c8>
    3850:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    3854:	00c9      	lsls	r1, r1, #3
    3856:	325b      	adds	r2, #91	; 0x5b
    3858:	eb07 0c01 	add.w	ip, r7, r1
    385c:	5879      	ldr	r1, [r7, r1]
    385e:	f1ac 0c08 	sub.w	ip, ip, #8
    3862:	458c      	cmp	ip, r1
    3864:	f000 8088 	beq.w	3978 <_malloc_r+0x494>
    3868:	684a      	ldr	r2, [r1, #4]
    386a:	f022 0203 	bic.w	r2, r2, #3
    386e:	4293      	cmp	r3, r2
    3870:	d273      	bcs.n	395a <_malloc_r+0x476>
    3872:	6889      	ldr	r1, [r1, #8]
    3874:	458c      	cmp	ip, r1
    3876:	d1f7      	bne.n	3868 <_malloc_r+0x384>
    3878:	f8dc 200c 	ldr.w	r2, [ip, #12]
    387c:	687b      	ldr	r3, [r7, #4]
    387e:	60e2      	str	r2, [r4, #12]
    3880:	f8c4 c008 	str.w	ip, [r4, #8]
    3884:	6094      	str	r4, [r2, #8]
    3886:	f8cc 400c 	str.w	r4, [ip, #12]
    388a:	e68f      	b.n	35ac <_malloc_r+0xc8>
    388c:	19a1      	adds	r1, r4, r6
    388e:	f046 0c01 	orr.w	ip, r6, #1
    3892:	f042 0601 	orr.w	r6, r2, #1
    3896:	f8c4 c004 	str.w	ip, [r4, #4]
    389a:	4628      	mov	r0, r5
    389c:	6179      	str	r1, [r7, #20]
    389e:	6139      	str	r1, [r7, #16]
    38a0:	f8c1 e00c 	str.w	lr, [r1, #12]
    38a4:	f8c1 e008 	str.w	lr, [r1, #8]
    38a8:	604e      	str	r6, [r1, #4]
    38aa:	50e2      	str	r2, [r4, r3]
    38ac:	f000 fa34 	bl	3d18 <__malloc_unlock>
    38b0:	3408      	adds	r4, #8
    38b2:	e6dd      	b.n	3670 <_malloc_r+0x18c>
    38b4:	687b      	ldr	r3, [r7, #4]
    38b6:	e679      	b.n	35ac <_malloc_r+0xc8>
    38b8:	f108 0801 	add.w	r8, r8, #1
    38bc:	f018 0f03 	tst.w	r8, #3
    38c0:	f10c 0c08 	add.w	ip, ip, #8
    38c4:	f47f ae85 	bne.w	35d2 <_malloc_r+0xee>
    38c8:	e02d      	b.n	3926 <_malloc_r+0x442>
    38ca:	68dc      	ldr	r4, [r3, #12]
    38cc:	42a3      	cmp	r3, r4
    38ce:	bf08      	it	eq
    38d0:	3002      	addeq	r0, #2
    38d2:	f43f ae3e 	beq.w	3552 <_malloc_r+0x6e>
    38d6:	e6bb      	b.n	3650 <_malloc_r+0x16c>
    38d8:	4419      	add	r1, r3
    38da:	461c      	mov	r4, r3
    38dc:	684a      	ldr	r2, [r1, #4]
    38de:	68db      	ldr	r3, [r3, #12]
    38e0:	f854 6f08 	ldr.w	r6, [r4, #8]!
    38e4:	f042 0201 	orr.w	r2, r2, #1
    38e8:	604a      	str	r2, [r1, #4]
    38ea:	4628      	mov	r0, r5
    38ec:	60f3      	str	r3, [r6, #12]
    38ee:	609e      	str	r6, [r3, #8]
    38f0:	f000 fa12 	bl	3d18 <__malloc_unlock>
    38f4:	e6bc      	b.n	3670 <_malloc_r+0x18c>
    38f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    38fa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
    38fe:	00c3      	lsls	r3, r0, #3
    3900:	e612      	b.n	3528 <_malloc_r+0x44>
    3902:	099a      	lsrs	r2, r3, #6
    3904:	f102 0139 	add.w	r1, r2, #57	; 0x39
    3908:	00c9      	lsls	r1, r1, #3
    390a:	3238      	adds	r2, #56	; 0x38
    390c:	e7a4      	b.n	3858 <_malloc_r+0x374>
    390e:	42bc      	cmp	r4, r7
    3910:	d054      	beq.n	39bc <_malloc_r+0x4d8>
    3912:	68bc      	ldr	r4, [r7, #8]
    3914:	6862      	ldr	r2, [r4, #4]
    3916:	f022 0203 	bic.w	r2, r2, #3
    391a:	e75d      	b.n	37d8 <_malloc_r+0x2f4>
    391c:	f859 3908 	ldr.w	r3, [r9], #-8
    3920:	4599      	cmp	r9, r3
    3922:	f040 8086 	bne.w	3a32 <_malloc_r+0x54e>
    3926:	f010 0f03 	tst.w	r0, #3
    392a:	f100 30ff 	add.w	r0, r0, #4294967295
    392e:	d1f5      	bne.n	391c <_malloc_r+0x438>
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	ea23 0304 	bic.w	r3, r3, r4
    3936:	607b      	str	r3, [r7, #4]
    3938:	0064      	lsls	r4, r4, #1
    393a:	429c      	cmp	r4, r3
    393c:	f63f aec7 	bhi.w	36ce <_malloc_r+0x1ea>
    3940:	2c00      	cmp	r4, #0
    3942:	f43f aec4 	beq.w	36ce <_malloc_r+0x1ea>
    3946:	421c      	tst	r4, r3
    3948:	4640      	mov	r0, r8
    394a:	f47f ae3e 	bne.w	35ca <_malloc_r+0xe6>
    394e:	0064      	lsls	r4, r4, #1
    3950:	421c      	tst	r4, r3
    3952:	f100 0004 	add.w	r0, r0, #4
    3956:	d0fa      	beq.n	394e <_malloc_r+0x46a>
    3958:	e637      	b.n	35ca <_malloc_r+0xe6>
    395a:	468c      	mov	ip, r1
    395c:	e78c      	b.n	3878 <_malloc_r+0x394>
    395e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3962:	d815      	bhi.n	3990 <_malloc_r+0x4ac>
    3964:	0bf3      	lsrs	r3, r6, #15
    3966:	f103 0078 	add.w	r0, r3, #120	; 0x78
    396a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
    396e:	00c3      	lsls	r3, r0, #3
    3970:	e5da      	b.n	3528 <_malloc_r+0x44>
    3972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3976:	e6ed      	b.n	3754 <_malloc_r+0x270>
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	1092      	asrs	r2, r2, #2
    397c:	2101      	movs	r1, #1
    397e:	fa01 f202 	lsl.w	r2, r1, r2
    3982:	4313      	orrs	r3, r2
    3984:	607b      	str	r3, [r7, #4]
    3986:	4662      	mov	r2, ip
    3988:	e779      	b.n	387e <_malloc_r+0x39a>
    398a:	2301      	movs	r3, #1
    398c:	6053      	str	r3, [r2, #4]
    398e:	e729      	b.n	37e4 <_malloc_r+0x300>
    3990:	f240 5254 	movw	r2, #1364	; 0x554
    3994:	4293      	cmp	r3, r2
    3996:	d822      	bhi.n	39de <_malloc_r+0x4fa>
    3998:	0cb3      	lsrs	r3, r6, #18
    399a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    399e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
    39a2:	00c3      	lsls	r3, r0, #3
    39a4:	e5c0      	b.n	3528 <_malloc_r+0x44>
    39a6:	f103 0b10 	add.w	fp, r3, #16
    39aa:	e6ae      	b.n	370a <_malloc_r+0x226>
    39ac:	2a54      	cmp	r2, #84	; 0x54
    39ae:	d829      	bhi.n	3a04 <_malloc_r+0x520>
    39b0:	0b1a      	lsrs	r2, r3, #12
    39b2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    39b6:	00c9      	lsls	r1, r1, #3
    39b8:	326e      	adds	r2, #110	; 0x6e
    39ba:	e74d      	b.n	3858 <_malloc_r+0x374>
    39bc:	4b20      	ldr	r3, [pc, #128]	; (3a40 <_malloc_r+0x55c>)
    39be:	6819      	ldr	r1, [r3, #0]
    39c0:	4459      	add	r1, fp
    39c2:	6019      	str	r1, [r3, #0]
    39c4:	e6b2      	b.n	372c <_malloc_r+0x248>
    39c6:	f3ca 000b 	ubfx	r0, sl, #0, #12
    39ca:	2800      	cmp	r0, #0
    39cc:	f47f aeae 	bne.w	372c <_malloc_r+0x248>
    39d0:	eb08 030b 	add.w	r3, r8, fp
    39d4:	68ba      	ldr	r2, [r7, #8]
    39d6:	f043 0301 	orr.w	r3, r3, #1
    39da:	6053      	str	r3, [r2, #4]
    39dc:	e6ee      	b.n	37bc <_malloc_r+0x2d8>
    39de:	207f      	movs	r0, #127	; 0x7f
    39e0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    39e4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
    39e8:	e59e      	b.n	3528 <_malloc_r+0x44>
    39ea:	f104 0108 	add.w	r1, r4, #8
    39ee:	4628      	mov	r0, r5
    39f0:	9300      	str	r3, [sp, #0]
    39f2:	f7ff fa59 	bl	2ea8 <_free_r>
    39f6:	9b00      	ldr	r3, [sp, #0]
    39f8:	6819      	ldr	r1, [r3, #0]
    39fa:	e6df      	b.n	37bc <_malloc_r+0x2d8>
    39fc:	2001      	movs	r0, #1
    39fe:	f04f 0900 	mov.w	r9, #0
    3a02:	e6bc      	b.n	377e <_malloc_r+0x29a>
    3a04:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3a08:	d805      	bhi.n	3a16 <_malloc_r+0x532>
    3a0a:	0bda      	lsrs	r2, r3, #15
    3a0c:	f102 0178 	add.w	r1, r2, #120	; 0x78
    3a10:	00c9      	lsls	r1, r1, #3
    3a12:	3277      	adds	r2, #119	; 0x77
    3a14:	e720      	b.n	3858 <_malloc_r+0x374>
    3a16:	f240 5154 	movw	r1, #1364	; 0x554
    3a1a:	428a      	cmp	r2, r1
    3a1c:	d805      	bhi.n	3a2a <_malloc_r+0x546>
    3a1e:	0c9a      	lsrs	r2, r3, #18
    3a20:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    3a24:	00c9      	lsls	r1, r1, #3
    3a26:	327c      	adds	r2, #124	; 0x7c
    3a28:	e716      	b.n	3858 <_malloc_r+0x374>
    3a2a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    3a2e:	227e      	movs	r2, #126	; 0x7e
    3a30:	e712      	b.n	3858 <_malloc_r+0x374>
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	e780      	b.n	3938 <_malloc_r+0x454>
    3a36:	08f0      	lsrs	r0, r6, #3
    3a38:	f106 0308 	add.w	r3, r6, #8
    3a3c:	e600      	b.n	3640 <_malloc_r+0x15c>
    3a3e:	bf00      	nop
    3a40:	20000a08 	.word	0x20000a08

00003a44 <__ascii_mbtowc>:
    3a44:	b082      	sub	sp, #8
    3a46:	b149      	cbz	r1, 3a5c <__ascii_mbtowc+0x18>
    3a48:	b15a      	cbz	r2, 3a62 <__ascii_mbtowc+0x1e>
    3a4a:	b16b      	cbz	r3, 3a68 <__ascii_mbtowc+0x24>
    3a4c:	7813      	ldrb	r3, [r2, #0]
    3a4e:	600b      	str	r3, [r1, #0]
    3a50:	7812      	ldrb	r2, [r2, #0]
    3a52:	1c10      	adds	r0, r2, #0
    3a54:	bf18      	it	ne
    3a56:	2001      	movne	r0, #1
    3a58:	b002      	add	sp, #8
    3a5a:	4770      	bx	lr
    3a5c:	a901      	add	r1, sp, #4
    3a5e:	2a00      	cmp	r2, #0
    3a60:	d1f3      	bne.n	3a4a <__ascii_mbtowc+0x6>
    3a62:	4610      	mov	r0, r2
    3a64:	b002      	add	sp, #8
    3a66:	4770      	bx	lr
    3a68:	f06f 0001 	mvn.w	r0, #1
    3a6c:	e7f4      	b.n	3a58 <__ascii_mbtowc+0x14>
    3a6e:	bf00      	nop

00003a70 <memchr>:
    3a70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3a74:	2a10      	cmp	r2, #16
    3a76:	db2b      	blt.n	3ad0 <memchr+0x60>
    3a78:	f010 0f07 	tst.w	r0, #7
    3a7c:	d008      	beq.n	3a90 <memchr+0x20>
    3a7e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3a82:	3a01      	subs	r2, #1
    3a84:	428b      	cmp	r3, r1
    3a86:	d02d      	beq.n	3ae4 <memchr+0x74>
    3a88:	f010 0f07 	tst.w	r0, #7
    3a8c:	b342      	cbz	r2, 3ae0 <memchr+0x70>
    3a8e:	d1f6      	bne.n	3a7e <memchr+0xe>
    3a90:	b4f0      	push	{r4, r5, r6, r7}
    3a92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3a96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    3a9a:	f022 0407 	bic.w	r4, r2, #7
    3a9e:	f07f 0700 	mvns.w	r7, #0
    3aa2:	2300      	movs	r3, #0
    3aa4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3aa8:	3c08      	subs	r4, #8
    3aaa:	ea85 0501 	eor.w	r5, r5, r1
    3aae:	ea86 0601 	eor.w	r6, r6, r1
    3ab2:	fa85 f547 	uadd8	r5, r5, r7
    3ab6:	faa3 f587 	sel	r5, r3, r7
    3aba:	fa86 f647 	uadd8	r6, r6, r7
    3abe:	faa5 f687 	sel	r6, r5, r7
    3ac2:	b98e      	cbnz	r6, 3ae8 <memchr+0x78>
    3ac4:	d1ee      	bne.n	3aa4 <memchr+0x34>
    3ac6:	bcf0      	pop	{r4, r5, r6, r7}
    3ac8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3acc:	f002 0207 	and.w	r2, r2, #7
    3ad0:	b132      	cbz	r2, 3ae0 <memchr+0x70>
    3ad2:	f810 3b01 	ldrb.w	r3, [r0], #1
    3ad6:	3a01      	subs	r2, #1
    3ad8:	ea83 0301 	eor.w	r3, r3, r1
    3adc:	b113      	cbz	r3, 3ae4 <memchr+0x74>
    3ade:	d1f8      	bne.n	3ad2 <memchr+0x62>
    3ae0:	2000      	movs	r0, #0
    3ae2:	4770      	bx	lr
    3ae4:	3801      	subs	r0, #1
    3ae6:	4770      	bx	lr
    3ae8:	2d00      	cmp	r5, #0
    3aea:	bf06      	itte	eq
    3aec:	4635      	moveq	r5, r6
    3aee:	3803      	subeq	r0, #3
    3af0:	3807      	subne	r0, #7
    3af2:	f015 0f01 	tst.w	r5, #1
    3af6:	d107      	bne.n	3b08 <memchr+0x98>
    3af8:	3001      	adds	r0, #1
    3afa:	f415 7f80 	tst.w	r5, #256	; 0x100
    3afe:	bf02      	ittt	eq
    3b00:	3001      	addeq	r0, #1
    3b02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3b06:	3001      	addeq	r0, #1
    3b08:	bcf0      	pop	{r4, r5, r6, r7}
    3b0a:	3801      	subs	r0, #1
    3b0c:	4770      	bx	lr
    3b0e:	bf00      	nop

00003b10 <memcpy>:
    3b10:	4684      	mov	ip, r0
    3b12:	ea41 0300 	orr.w	r3, r1, r0
    3b16:	f013 0303 	ands.w	r3, r3, #3
    3b1a:	d16d      	bne.n	3bf8 <memcpy+0xe8>
    3b1c:	3a40      	subs	r2, #64	; 0x40
    3b1e:	d341      	bcc.n	3ba4 <memcpy+0x94>
    3b20:	f851 3b04 	ldr.w	r3, [r1], #4
    3b24:	f840 3b04 	str.w	r3, [r0], #4
    3b28:	f851 3b04 	ldr.w	r3, [r1], #4
    3b2c:	f840 3b04 	str.w	r3, [r0], #4
    3b30:	f851 3b04 	ldr.w	r3, [r1], #4
    3b34:	f840 3b04 	str.w	r3, [r0], #4
    3b38:	f851 3b04 	ldr.w	r3, [r1], #4
    3b3c:	f840 3b04 	str.w	r3, [r0], #4
    3b40:	f851 3b04 	ldr.w	r3, [r1], #4
    3b44:	f840 3b04 	str.w	r3, [r0], #4
    3b48:	f851 3b04 	ldr.w	r3, [r1], #4
    3b4c:	f840 3b04 	str.w	r3, [r0], #4
    3b50:	f851 3b04 	ldr.w	r3, [r1], #4
    3b54:	f840 3b04 	str.w	r3, [r0], #4
    3b58:	f851 3b04 	ldr.w	r3, [r1], #4
    3b5c:	f840 3b04 	str.w	r3, [r0], #4
    3b60:	f851 3b04 	ldr.w	r3, [r1], #4
    3b64:	f840 3b04 	str.w	r3, [r0], #4
    3b68:	f851 3b04 	ldr.w	r3, [r1], #4
    3b6c:	f840 3b04 	str.w	r3, [r0], #4
    3b70:	f851 3b04 	ldr.w	r3, [r1], #4
    3b74:	f840 3b04 	str.w	r3, [r0], #4
    3b78:	f851 3b04 	ldr.w	r3, [r1], #4
    3b7c:	f840 3b04 	str.w	r3, [r0], #4
    3b80:	f851 3b04 	ldr.w	r3, [r1], #4
    3b84:	f840 3b04 	str.w	r3, [r0], #4
    3b88:	f851 3b04 	ldr.w	r3, [r1], #4
    3b8c:	f840 3b04 	str.w	r3, [r0], #4
    3b90:	f851 3b04 	ldr.w	r3, [r1], #4
    3b94:	f840 3b04 	str.w	r3, [r0], #4
    3b98:	f851 3b04 	ldr.w	r3, [r1], #4
    3b9c:	f840 3b04 	str.w	r3, [r0], #4
    3ba0:	3a40      	subs	r2, #64	; 0x40
    3ba2:	d2bd      	bcs.n	3b20 <memcpy+0x10>
    3ba4:	3230      	adds	r2, #48	; 0x30
    3ba6:	d311      	bcc.n	3bcc <memcpy+0xbc>
    3ba8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bac:	f840 3b04 	str.w	r3, [r0], #4
    3bb0:	f851 3b04 	ldr.w	r3, [r1], #4
    3bb4:	f840 3b04 	str.w	r3, [r0], #4
    3bb8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bbc:	f840 3b04 	str.w	r3, [r0], #4
    3bc0:	f851 3b04 	ldr.w	r3, [r1], #4
    3bc4:	f840 3b04 	str.w	r3, [r0], #4
    3bc8:	3a10      	subs	r2, #16
    3bca:	d2ed      	bcs.n	3ba8 <memcpy+0x98>
    3bcc:	320c      	adds	r2, #12
    3bce:	d305      	bcc.n	3bdc <memcpy+0xcc>
    3bd0:	f851 3b04 	ldr.w	r3, [r1], #4
    3bd4:	f840 3b04 	str.w	r3, [r0], #4
    3bd8:	3a04      	subs	r2, #4
    3bda:	d2f9      	bcs.n	3bd0 <memcpy+0xc0>
    3bdc:	3204      	adds	r2, #4
    3bde:	d008      	beq.n	3bf2 <memcpy+0xe2>
    3be0:	07d2      	lsls	r2, r2, #31
    3be2:	bf1c      	itt	ne
    3be4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3be8:	f800 3b01 	strbne.w	r3, [r0], #1
    3bec:	d301      	bcc.n	3bf2 <memcpy+0xe2>
    3bee:	880b      	ldrh	r3, [r1, #0]
    3bf0:	8003      	strh	r3, [r0, #0]
    3bf2:	4660      	mov	r0, ip
    3bf4:	4770      	bx	lr
    3bf6:	bf00      	nop
    3bf8:	2a08      	cmp	r2, #8
    3bfa:	d313      	bcc.n	3c24 <memcpy+0x114>
    3bfc:	078b      	lsls	r3, r1, #30
    3bfe:	d08d      	beq.n	3b1c <memcpy+0xc>
    3c00:	f010 0303 	ands.w	r3, r0, #3
    3c04:	d08a      	beq.n	3b1c <memcpy+0xc>
    3c06:	f1c3 0304 	rsb	r3, r3, #4
    3c0a:	1ad2      	subs	r2, r2, r3
    3c0c:	07db      	lsls	r3, r3, #31
    3c0e:	bf1c      	itt	ne
    3c10:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3c14:	f800 3b01 	strbne.w	r3, [r0], #1
    3c18:	d380      	bcc.n	3b1c <memcpy+0xc>
    3c1a:	f831 3b02 	ldrh.w	r3, [r1], #2
    3c1e:	f820 3b02 	strh.w	r3, [r0], #2
    3c22:	e77b      	b.n	3b1c <memcpy+0xc>
    3c24:	3a04      	subs	r2, #4
    3c26:	d3d9      	bcc.n	3bdc <memcpy+0xcc>
    3c28:	3a01      	subs	r2, #1
    3c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
    3c2e:	f800 3b01 	strb.w	r3, [r0], #1
    3c32:	d2f9      	bcs.n	3c28 <memcpy+0x118>
    3c34:	780b      	ldrb	r3, [r1, #0]
    3c36:	7003      	strb	r3, [r0, #0]
    3c38:	784b      	ldrb	r3, [r1, #1]
    3c3a:	7043      	strb	r3, [r0, #1]
    3c3c:	788b      	ldrb	r3, [r1, #2]
    3c3e:	7083      	strb	r3, [r0, #2]
    3c40:	4660      	mov	r0, ip
    3c42:	4770      	bx	lr

00003c44 <memmove>:
    3c44:	4288      	cmp	r0, r1
    3c46:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c48:	d90d      	bls.n	3c66 <memmove+0x22>
    3c4a:	188b      	adds	r3, r1, r2
    3c4c:	4298      	cmp	r0, r3
    3c4e:	d20a      	bcs.n	3c66 <memmove+0x22>
    3c50:	1884      	adds	r4, r0, r2
    3c52:	2a00      	cmp	r2, #0
    3c54:	d051      	beq.n	3cfa <memmove+0xb6>
    3c56:	4622      	mov	r2, r4
    3c58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    3c5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
    3c60:	4299      	cmp	r1, r3
    3c62:	d1f9      	bne.n	3c58 <memmove+0x14>
    3c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c66:	2a0f      	cmp	r2, #15
    3c68:	d948      	bls.n	3cfc <memmove+0xb8>
    3c6a:	ea41 0300 	orr.w	r3, r1, r0
    3c6e:	079b      	lsls	r3, r3, #30
    3c70:	d146      	bne.n	3d00 <memmove+0xbc>
    3c72:	f100 0410 	add.w	r4, r0, #16
    3c76:	f101 0310 	add.w	r3, r1, #16
    3c7a:	4615      	mov	r5, r2
    3c7c:	f853 6c10 	ldr.w	r6, [r3, #-16]
    3c80:	f844 6c10 	str.w	r6, [r4, #-16]
    3c84:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    3c88:	f844 6c0c 	str.w	r6, [r4, #-12]
    3c8c:	f853 6c08 	ldr.w	r6, [r3, #-8]
    3c90:	f844 6c08 	str.w	r6, [r4, #-8]
    3c94:	3d10      	subs	r5, #16
    3c96:	f853 6c04 	ldr.w	r6, [r3, #-4]
    3c9a:	f844 6c04 	str.w	r6, [r4, #-4]
    3c9e:	2d0f      	cmp	r5, #15
    3ca0:	f103 0310 	add.w	r3, r3, #16
    3ca4:	f104 0410 	add.w	r4, r4, #16
    3ca8:	d8e8      	bhi.n	3c7c <memmove+0x38>
    3caa:	f1a2 0310 	sub.w	r3, r2, #16
    3cae:	f023 030f 	bic.w	r3, r3, #15
    3cb2:	f002 0e0f 	and.w	lr, r2, #15
    3cb6:	3310      	adds	r3, #16
    3cb8:	f1be 0f03 	cmp.w	lr, #3
    3cbc:	4419      	add	r1, r3
    3cbe:	4403      	add	r3, r0
    3cc0:	d921      	bls.n	3d06 <memmove+0xc2>
    3cc2:	1f1e      	subs	r6, r3, #4
    3cc4:	460d      	mov	r5, r1
    3cc6:	4674      	mov	r4, lr
    3cc8:	3c04      	subs	r4, #4
    3cca:	f855 7b04 	ldr.w	r7, [r5], #4
    3cce:	f846 7f04 	str.w	r7, [r6, #4]!
    3cd2:	2c03      	cmp	r4, #3
    3cd4:	d8f8      	bhi.n	3cc8 <memmove+0x84>
    3cd6:	f1ae 0404 	sub.w	r4, lr, #4
    3cda:	f024 0403 	bic.w	r4, r4, #3
    3cde:	3404      	adds	r4, #4
    3ce0:	4421      	add	r1, r4
    3ce2:	4423      	add	r3, r4
    3ce4:	f002 0203 	and.w	r2, r2, #3
    3ce8:	b162      	cbz	r2, 3d04 <memmove+0xc0>
    3cea:	3b01      	subs	r3, #1
    3cec:	440a      	add	r2, r1
    3cee:	f811 4b01 	ldrb.w	r4, [r1], #1
    3cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
    3cf6:	428a      	cmp	r2, r1
    3cf8:	d1f9      	bne.n	3cee <memmove+0xaa>
    3cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cfc:	4603      	mov	r3, r0
    3cfe:	e7f3      	b.n	3ce8 <memmove+0xa4>
    3d00:	4603      	mov	r3, r0
    3d02:	e7f2      	b.n	3cea <memmove+0xa6>
    3d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d06:	4672      	mov	r2, lr
    3d08:	e7ee      	b.n	3ce8 <memmove+0xa4>
    3d0a:	bf00      	nop

00003d0c <__malloc_lock>:
    3d0c:	4801      	ldr	r0, [pc, #4]	; (3d14 <__malloc_lock+0x8>)
    3d0e:	f7ff bb65 	b.w	33dc <__retarget_lock_acquire_recursive>
    3d12:	bf00      	nop
    3d14:	20000a74 	.word	0x20000a74

00003d18 <__malloc_unlock>:
    3d18:	4801      	ldr	r0, [pc, #4]	; (3d20 <__malloc_unlock+0x8>)
    3d1a:	f7ff bb61 	b.w	33e0 <__retarget_lock_release_recursive>
    3d1e:	bf00      	nop
    3d20:	20000a74 	.word	0x20000a74

00003d24 <_realloc_r>:
    3d24:	2900      	cmp	r1, #0
    3d26:	f000 8095 	beq.w	3e54 <_realloc_r+0x130>
    3d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d2e:	460d      	mov	r5, r1
    3d30:	4616      	mov	r6, r2
    3d32:	b083      	sub	sp, #12
    3d34:	4680      	mov	r8, r0
    3d36:	f106 070b 	add.w	r7, r6, #11
    3d3a:	f7ff ffe7 	bl	3d0c <__malloc_lock>
    3d3e:	f855 ec04 	ldr.w	lr, [r5, #-4]
    3d42:	2f16      	cmp	r7, #22
    3d44:	f02e 0403 	bic.w	r4, lr, #3
    3d48:	f1a5 0908 	sub.w	r9, r5, #8
    3d4c:	d83c      	bhi.n	3dc8 <_realloc_r+0xa4>
    3d4e:	2210      	movs	r2, #16
    3d50:	4617      	mov	r7, r2
    3d52:	42be      	cmp	r6, r7
    3d54:	d83d      	bhi.n	3dd2 <_realloc_r+0xae>
    3d56:	4294      	cmp	r4, r2
    3d58:	da43      	bge.n	3de2 <_realloc_r+0xbe>
    3d5a:	4bc4      	ldr	r3, [pc, #784]	; (406c <_realloc_r+0x348>)
    3d5c:	6899      	ldr	r1, [r3, #8]
    3d5e:	eb09 0004 	add.w	r0, r9, r4
    3d62:	4288      	cmp	r0, r1
    3d64:	f000 80b4 	beq.w	3ed0 <_realloc_r+0x1ac>
    3d68:	6843      	ldr	r3, [r0, #4]
    3d6a:	f023 0101 	bic.w	r1, r3, #1
    3d6e:	4401      	add	r1, r0
    3d70:	6849      	ldr	r1, [r1, #4]
    3d72:	07c9      	lsls	r1, r1, #31
    3d74:	d54c      	bpl.n	3e10 <_realloc_r+0xec>
    3d76:	f01e 0f01 	tst.w	lr, #1
    3d7a:	f000 809b 	beq.w	3eb4 <_realloc_r+0x190>
    3d7e:	4631      	mov	r1, r6
    3d80:	4640      	mov	r0, r8
    3d82:	f7ff fbaf 	bl	34e4 <_malloc_r>
    3d86:	4606      	mov	r6, r0
    3d88:	2800      	cmp	r0, #0
    3d8a:	d03a      	beq.n	3e02 <_realloc_r+0xde>
    3d8c:	f855 3c04 	ldr.w	r3, [r5, #-4]
    3d90:	f023 0301 	bic.w	r3, r3, #1
    3d94:	444b      	add	r3, r9
    3d96:	f1a0 0208 	sub.w	r2, r0, #8
    3d9a:	429a      	cmp	r2, r3
    3d9c:	f000 8121 	beq.w	3fe2 <_realloc_r+0x2be>
    3da0:	1f22      	subs	r2, r4, #4
    3da2:	2a24      	cmp	r2, #36	; 0x24
    3da4:	f200 8107 	bhi.w	3fb6 <_realloc_r+0x292>
    3da8:	2a13      	cmp	r2, #19
    3daa:	f200 80db 	bhi.w	3f64 <_realloc_r+0x240>
    3dae:	4603      	mov	r3, r0
    3db0:	462a      	mov	r2, r5
    3db2:	6811      	ldr	r1, [r2, #0]
    3db4:	6019      	str	r1, [r3, #0]
    3db6:	6851      	ldr	r1, [r2, #4]
    3db8:	6059      	str	r1, [r3, #4]
    3dba:	6892      	ldr	r2, [r2, #8]
    3dbc:	609a      	str	r2, [r3, #8]
    3dbe:	4629      	mov	r1, r5
    3dc0:	4640      	mov	r0, r8
    3dc2:	f7ff f871 	bl	2ea8 <_free_r>
    3dc6:	e01c      	b.n	3e02 <_realloc_r+0xde>
    3dc8:	f027 0707 	bic.w	r7, r7, #7
    3dcc:	2f00      	cmp	r7, #0
    3dce:	463a      	mov	r2, r7
    3dd0:	dabf      	bge.n	3d52 <_realloc_r+0x2e>
    3dd2:	2600      	movs	r6, #0
    3dd4:	230c      	movs	r3, #12
    3dd6:	4630      	mov	r0, r6
    3dd8:	f8c8 3000 	str.w	r3, [r8]
    3ddc:	b003      	add	sp, #12
    3dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3de2:	462e      	mov	r6, r5
    3de4:	1be3      	subs	r3, r4, r7
    3de6:	2b0f      	cmp	r3, #15
    3de8:	d81e      	bhi.n	3e28 <_realloc_r+0x104>
    3dea:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3dee:	f003 0301 	and.w	r3, r3, #1
    3df2:	4323      	orrs	r3, r4
    3df4:	444c      	add	r4, r9
    3df6:	f8c9 3004 	str.w	r3, [r9, #4]
    3dfa:	6863      	ldr	r3, [r4, #4]
    3dfc:	f043 0301 	orr.w	r3, r3, #1
    3e00:	6063      	str	r3, [r4, #4]
    3e02:	4640      	mov	r0, r8
    3e04:	f7ff ff88 	bl	3d18 <__malloc_unlock>
    3e08:	4630      	mov	r0, r6
    3e0a:	b003      	add	sp, #12
    3e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e10:	f023 0303 	bic.w	r3, r3, #3
    3e14:	18e1      	adds	r1, r4, r3
    3e16:	4291      	cmp	r1, r2
    3e18:	db1f      	blt.n	3e5a <_realloc_r+0x136>
    3e1a:	68c3      	ldr	r3, [r0, #12]
    3e1c:	6882      	ldr	r2, [r0, #8]
    3e1e:	462e      	mov	r6, r5
    3e20:	60d3      	str	r3, [r2, #12]
    3e22:	460c      	mov	r4, r1
    3e24:	609a      	str	r2, [r3, #8]
    3e26:	e7dd      	b.n	3de4 <_realloc_r+0xc0>
    3e28:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3e2c:	eb09 0107 	add.w	r1, r9, r7
    3e30:	f002 0201 	and.w	r2, r2, #1
    3e34:	444c      	add	r4, r9
    3e36:	f043 0301 	orr.w	r3, r3, #1
    3e3a:	4317      	orrs	r7, r2
    3e3c:	f8c9 7004 	str.w	r7, [r9, #4]
    3e40:	604b      	str	r3, [r1, #4]
    3e42:	6863      	ldr	r3, [r4, #4]
    3e44:	f043 0301 	orr.w	r3, r3, #1
    3e48:	3108      	adds	r1, #8
    3e4a:	6063      	str	r3, [r4, #4]
    3e4c:	4640      	mov	r0, r8
    3e4e:	f7ff f82b 	bl	2ea8 <_free_r>
    3e52:	e7d6      	b.n	3e02 <_realloc_r+0xde>
    3e54:	4611      	mov	r1, r2
    3e56:	f7ff bb45 	b.w	34e4 <_malloc_r>
    3e5a:	f01e 0f01 	tst.w	lr, #1
    3e5e:	d18e      	bne.n	3d7e <_realloc_r+0x5a>
    3e60:	f855 1c08 	ldr.w	r1, [r5, #-8]
    3e64:	eba9 0a01 	sub.w	sl, r9, r1
    3e68:	f8da 1004 	ldr.w	r1, [sl, #4]
    3e6c:	f021 0103 	bic.w	r1, r1, #3
    3e70:	440b      	add	r3, r1
    3e72:	4423      	add	r3, r4
    3e74:	4293      	cmp	r3, r2
    3e76:	db25      	blt.n	3ec4 <_realloc_r+0x1a0>
    3e78:	68c2      	ldr	r2, [r0, #12]
    3e7a:	6881      	ldr	r1, [r0, #8]
    3e7c:	4656      	mov	r6, sl
    3e7e:	60ca      	str	r2, [r1, #12]
    3e80:	6091      	str	r1, [r2, #8]
    3e82:	f8da 100c 	ldr.w	r1, [sl, #12]
    3e86:	f856 0f08 	ldr.w	r0, [r6, #8]!
    3e8a:	1f22      	subs	r2, r4, #4
    3e8c:	2a24      	cmp	r2, #36	; 0x24
    3e8e:	60c1      	str	r1, [r0, #12]
    3e90:	6088      	str	r0, [r1, #8]
    3e92:	f200 8094 	bhi.w	3fbe <_realloc_r+0x29a>
    3e96:	2a13      	cmp	r2, #19
    3e98:	d96f      	bls.n	3f7a <_realloc_r+0x256>
    3e9a:	6829      	ldr	r1, [r5, #0]
    3e9c:	f8ca 1008 	str.w	r1, [sl, #8]
    3ea0:	6869      	ldr	r1, [r5, #4]
    3ea2:	f8ca 100c 	str.w	r1, [sl, #12]
    3ea6:	2a1b      	cmp	r2, #27
    3ea8:	f200 80a2 	bhi.w	3ff0 <_realloc_r+0x2cc>
    3eac:	3508      	adds	r5, #8
    3eae:	f10a 0210 	add.w	r2, sl, #16
    3eb2:	e063      	b.n	3f7c <_realloc_r+0x258>
    3eb4:	f855 3c08 	ldr.w	r3, [r5, #-8]
    3eb8:	eba9 0a03 	sub.w	sl, r9, r3
    3ebc:	f8da 1004 	ldr.w	r1, [sl, #4]
    3ec0:	f021 0103 	bic.w	r1, r1, #3
    3ec4:	1863      	adds	r3, r4, r1
    3ec6:	4293      	cmp	r3, r2
    3ec8:	f6ff af59 	blt.w	3d7e <_realloc_r+0x5a>
    3ecc:	4656      	mov	r6, sl
    3ece:	e7d8      	b.n	3e82 <_realloc_r+0x15e>
    3ed0:	6841      	ldr	r1, [r0, #4]
    3ed2:	f021 0b03 	bic.w	fp, r1, #3
    3ed6:	44a3      	add	fp, r4
    3ed8:	f107 0010 	add.w	r0, r7, #16
    3edc:	4583      	cmp	fp, r0
    3ede:	da56      	bge.n	3f8e <_realloc_r+0x26a>
    3ee0:	f01e 0f01 	tst.w	lr, #1
    3ee4:	f47f af4b 	bne.w	3d7e <_realloc_r+0x5a>
    3ee8:	f855 1c08 	ldr.w	r1, [r5, #-8]
    3eec:	eba9 0a01 	sub.w	sl, r9, r1
    3ef0:	f8da 1004 	ldr.w	r1, [sl, #4]
    3ef4:	f021 0103 	bic.w	r1, r1, #3
    3ef8:	448b      	add	fp, r1
    3efa:	4558      	cmp	r0, fp
    3efc:	dce2      	bgt.n	3ec4 <_realloc_r+0x1a0>
    3efe:	4656      	mov	r6, sl
    3f00:	f8da 100c 	ldr.w	r1, [sl, #12]
    3f04:	f856 0f08 	ldr.w	r0, [r6, #8]!
    3f08:	1f22      	subs	r2, r4, #4
    3f0a:	2a24      	cmp	r2, #36	; 0x24
    3f0c:	60c1      	str	r1, [r0, #12]
    3f0e:	6088      	str	r0, [r1, #8]
    3f10:	f200 808f 	bhi.w	4032 <_realloc_r+0x30e>
    3f14:	2a13      	cmp	r2, #19
    3f16:	f240 808a 	bls.w	402e <_realloc_r+0x30a>
    3f1a:	6829      	ldr	r1, [r5, #0]
    3f1c:	f8ca 1008 	str.w	r1, [sl, #8]
    3f20:	6869      	ldr	r1, [r5, #4]
    3f22:	f8ca 100c 	str.w	r1, [sl, #12]
    3f26:	2a1b      	cmp	r2, #27
    3f28:	f200 808a 	bhi.w	4040 <_realloc_r+0x31c>
    3f2c:	3508      	adds	r5, #8
    3f2e:	f10a 0210 	add.w	r2, sl, #16
    3f32:	6829      	ldr	r1, [r5, #0]
    3f34:	6011      	str	r1, [r2, #0]
    3f36:	6869      	ldr	r1, [r5, #4]
    3f38:	6051      	str	r1, [r2, #4]
    3f3a:	68a9      	ldr	r1, [r5, #8]
    3f3c:	6091      	str	r1, [r2, #8]
    3f3e:	eb0a 0107 	add.w	r1, sl, r7
    3f42:	ebab 0207 	sub.w	r2, fp, r7
    3f46:	f042 0201 	orr.w	r2, r2, #1
    3f4a:	6099      	str	r1, [r3, #8]
    3f4c:	604a      	str	r2, [r1, #4]
    3f4e:	f8da 3004 	ldr.w	r3, [sl, #4]
    3f52:	f003 0301 	and.w	r3, r3, #1
    3f56:	431f      	orrs	r7, r3
    3f58:	4640      	mov	r0, r8
    3f5a:	f8ca 7004 	str.w	r7, [sl, #4]
    3f5e:	f7ff fedb 	bl	3d18 <__malloc_unlock>
    3f62:	e751      	b.n	3e08 <_realloc_r+0xe4>
    3f64:	682b      	ldr	r3, [r5, #0]
    3f66:	6003      	str	r3, [r0, #0]
    3f68:	686b      	ldr	r3, [r5, #4]
    3f6a:	6043      	str	r3, [r0, #4]
    3f6c:	2a1b      	cmp	r2, #27
    3f6e:	d82d      	bhi.n	3fcc <_realloc_r+0x2a8>
    3f70:	f100 0308 	add.w	r3, r0, #8
    3f74:	f105 0208 	add.w	r2, r5, #8
    3f78:	e71b      	b.n	3db2 <_realloc_r+0x8e>
    3f7a:	4632      	mov	r2, r6
    3f7c:	6829      	ldr	r1, [r5, #0]
    3f7e:	6011      	str	r1, [r2, #0]
    3f80:	6869      	ldr	r1, [r5, #4]
    3f82:	6051      	str	r1, [r2, #4]
    3f84:	68a9      	ldr	r1, [r5, #8]
    3f86:	6091      	str	r1, [r2, #8]
    3f88:	461c      	mov	r4, r3
    3f8a:	46d1      	mov	r9, sl
    3f8c:	e72a      	b.n	3de4 <_realloc_r+0xc0>
    3f8e:	eb09 0107 	add.w	r1, r9, r7
    3f92:	ebab 0b07 	sub.w	fp, fp, r7
    3f96:	f04b 0201 	orr.w	r2, fp, #1
    3f9a:	6099      	str	r1, [r3, #8]
    3f9c:	604a      	str	r2, [r1, #4]
    3f9e:	f855 3c04 	ldr.w	r3, [r5, #-4]
    3fa2:	f003 0301 	and.w	r3, r3, #1
    3fa6:	431f      	orrs	r7, r3
    3fa8:	4640      	mov	r0, r8
    3faa:	f845 7c04 	str.w	r7, [r5, #-4]
    3fae:	f7ff feb3 	bl	3d18 <__malloc_unlock>
    3fb2:	462e      	mov	r6, r5
    3fb4:	e728      	b.n	3e08 <_realloc_r+0xe4>
    3fb6:	4629      	mov	r1, r5
    3fb8:	f7ff fe44 	bl	3c44 <memmove>
    3fbc:	e6ff      	b.n	3dbe <_realloc_r+0x9a>
    3fbe:	4629      	mov	r1, r5
    3fc0:	4630      	mov	r0, r6
    3fc2:	461c      	mov	r4, r3
    3fc4:	46d1      	mov	r9, sl
    3fc6:	f7ff fe3d 	bl	3c44 <memmove>
    3fca:	e70b      	b.n	3de4 <_realloc_r+0xc0>
    3fcc:	68ab      	ldr	r3, [r5, #8]
    3fce:	6083      	str	r3, [r0, #8]
    3fd0:	68eb      	ldr	r3, [r5, #12]
    3fd2:	60c3      	str	r3, [r0, #12]
    3fd4:	2a24      	cmp	r2, #36	; 0x24
    3fd6:	d017      	beq.n	4008 <_realloc_r+0x2e4>
    3fd8:	f100 0310 	add.w	r3, r0, #16
    3fdc:	f105 0210 	add.w	r2, r5, #16
    3fe0:	e6e7      	b.n	3db2 <_realloc_r+0x8e>
    3fe2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3fe6:	f023 0303 	bic.w	r3, r3, #3
    3fea:	441c      	add	r4, r3
    3fec:	462e      	mov	r6, r5
    3fee:	e6f9      	b.n	3de4 <_realloc_r+0xc0>
    3ff0:	68a9      	ldr	r1, [r5, #8]
    3ff2:	f8ca 1010 	str.w	r1, [sl, #16]
    3ff6:	68e9      	ldr	r1, [r5, #12]
    3ff8:	f8ca 1014 	str.w	r1, [sl, #20]
    3ffc:	2a24      	cmp	r2, #36	; 0x24
    3ffe:	d00c      	beq.n	401a <_realloc_r+0x2f6>
    4000:	3510      	adds	r5, #16
    4002:	f10a 0218 	add.w	r2, sl, #24
    4006:	e7b9      	b.n	3f7c <_realloc_r+0x258>
    4008:	692b      	ldr	r3, [r5, #16]
    400a:	6103      	str	r3, [r0, #16]
    400c:	696b      	ldr	r3, [r5, #20]
    400e:	6143      	str	r3, [r0, #20]
    4010:	f105 0218 	add.w	r2, r5, #24
    4014:	f100 0318 	add.w	r3, r0, #24
    4018:	e6cb      	b.n	3db2 <_realloc_r+0x8e>
    401a:	692a      	ldr	r2, [r5, #16]
    401c:	f8ca 2018 	str.w	r2, [sl, #24]
    4020:	696a      	ldr	r2, [r5, #20]
    4022:	f8ca 201c 	str.w	r2, [sl, #28]
    4026:	3518      	adds	r5, #24
    4028:	f10a 0220 	add.w	r2, sl, #32
    402c:	e7a6      	b.n	3f7c <_realloc_r+0x258>
    402e:	4632      	mov	r2, r6
    4030:	e77f      	b.n	3f32 <_realloc_r+0x20e>
    4032:	4629      	mov	r1, r5
    4034:	4630      	mov	r0, r6
    4036:	9301      	str	r3, [sp, #4]
    4038:	f7ff fe04 	bl	3c44 <memmove>
    403c:	9b01      	ldr	r3, [sp, #4]
    403e:	e77e      	b.n	3f3e <_realloc_r+0x21a>
    4040:	68a9      	ldr	r1, [r5, #8]
    4042:	f8ca 1010 	str.w	r1, [sl, #16]
    4046:	68e9      	ldr	r1, [r5, #12]
    4048:	f8ca 1014 	str.w	r1, [sl, #20]
    404c:	2a24      	cmp	r2, #36	; 0x24
    404e:	d003      	beq.n	4058 <_realloc_r+0x334>
    4050:	3510      	adds	r5, #16
    4052:	f10a 0218 	add.w	r2, sl, #24
    4056:	e76c      	b.n	3f32 <_realloc_r+0x20e>
    4058:	692a      	ldr	r2, [r5, #16]
    405a:	f8ca 2018 	str.w	r2, [sl, #24]
    405e:	696a      	ldr	r2, [r5, #20]
    4060:	f8ca 201c 	str.w	r2, [sl, #28]
    4064:	3518      	adds	r5, #24
    4066:	f10a 0220 	add.w	r2, sl, #32
    406a:	e762      	b.n	3f32 <_realloc_r+0x20e>
    406c:	200005d0 	.word	0x200005d0

00004070 <_sbrk_r>:
    4070:	b538      	push	{r3, r4, r5, lr}
    4072:	4c07      	ldr	r4, [pc, #28]	; (4090 <_sbrk_r+0x20>)
    4074:	2300      	movs	r3, #0
    4076:	4605      	mov	r5, r0
    4078:	4608      	mov	r0, r1
    407a:	6023      	str	r3, [r4, #0]
    407c:	f7fd fb18 	bl	16b0 <_sbrk>
    4080:	1c43      	adds	r3, r0, #1
    4082:	d000      	beq.n	4086 <_sbrk_r+0x16>
    4084:	bd38      	pop	{r3, r4, r5, pc}
    4086:	6823      	ldr	r3, [r4, #0]
    4088:	2b00      	cmp	r3, #0
    408a:	d0fb      	beq.n	4084 <_sbrk_r+0x14>
    408c:	602b      	str	r3, [r5, #0]
    408e:	bd38      	pop	{r3, r4, r5, pc}
    4090:	20000a88 	.word	0x20000a88

00004094 <__sread>:
    4094:	b510      	push	{r4, lr}
    4096:	460c      	mov	r4, r1
    4098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    409c:	f000 fa76 	bl	458c <_read_r>
    40a0:	2800      	cmp	r0, #0
    40a2:	db03      	blt.n	40ac <__sread+0x18>
    40a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    40a6:	4403      	add	r3, r0
    40a8:	6523      	str	r3, [r4, #80]	; 0x50
    40aa:	bd10      	pop	{r4, pc}
    40ac:	89a3      	ldrh	r3, [r4, #12]
    40ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    40b2:	81a3      	strh	r3, [r4, #12]
    40b4:	bd10      	pop	{r4, pc}
    40b6:	bf00      	nop

000040b8 <__swrite>:
    40b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40bc:	4616      	mov	r6, r2
    40be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    40c2:	461f      	mov	r7, r3
    40c4:	05d3      	lsls	r3, r2, #23
    40c6:	460c      	mov	r4, r1
    40c8:	4605      	mov	r5, r0
    40ca:	d507      	bpl.n	40dc <__swrite+0x24>
    40cc:	2200      	movs	r2, #0
    40ce:	2302      	movs	r3, #2
    40d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    40d4:	f000 fa44 	bl	4560 <_lseek_r>
    40d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    40dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    40e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    40e4:	81a2      	strh	r2, [r4, #12]
    40e6:	463b      	mov	r3, r7
    40e8:	4632      	mov	r2, r6
    40ea:	4628      	mov	r0, r5
    40ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    40f0:	f000 b924 	b.w	433c <_write_r>

000040f4 <__sseek>:
    40f4:	b510      	push	{r4, lr}
    40f6:	460c      	mov	r4, r1
    40f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    40fc:	f000 fa30 	bl	4560 <_lseek_r>
    4100:	89a3      	ldrh	r3, [r4, #12]
    4102:	1c42      	adds	r2, r0, #1
    4104:	bf0e      	itee	eq
    4106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    410a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    410e:	6520      	strne	r0, [r4, #80]	; 0x50
    4110:	81a3      	strh	r3, [r4, #12]
    4112:	bd10      	pop	{r4, pc}

00004114 <__sclose>:
    4114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4118:	f000 b988 	b.w	442c <_close_r>
	...

00004140 <strlen>:
    4140:	f890 f000 	pld	[r0]
    4144:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    4148:	f020 0107 	bic.w	r1, r0, #7
    414c:	f06f 0c00 	mvn.w	ip, #0
    4150:	f010 0407 	ands.w	r4, r0, #7
    4154:	f891 f020 	pld	[r1, #32]
    4158:	f040 8049 	bne.w	41ee <strlen+0xae>
    415c:	f04f 0400 	mov.w	r4, #0
    4160:	f06f 0007 	mvn.w	r0, #7
    4164:	e9d1 2300 	ldrd	r2, r3, [r1]
    4168:	f891 f040 	pld	[r1, #64]	; 0x40
    416c:	f100 0008 	add.w	r0, r0, #8
    4170:	fa82 f24c 	uadd8	r2, r2, ip
    4174:	faa4 f28c 	sel	r2, r4, ip
    4178:	fa83 f34c 	uadd8	r3, r3, ip
    417c:	faa2 f38c 	sel	r3, r2, ip
    4180:	bb4b      	cbnz	r3, 41d6 <strlen+0x96>
    4182:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4186:	fa82 f24c 	uadd8	r2, r2, ip
    418a:	f100 0008 	add.w	r0, r0, #8
    418e:	faa4 f28c 	sel	r2, r4, ip
    4192:	fa83 f34c 	uadd8	r3, r3, ip
    4196:	faa2 f38c 	sel	r3, r2, ip
    419a:	b9e3      	cbnz	r3, 41d6 <strlen+0x96>
    419c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    41a0:	fa82 f24c 	uadd8	r2, r2, ip
    41a4:	f100 0008 	add.w	r0, r0, #8
    41a8:	faa4 f28c 	sel	r2, r4, ip
    41ac:	fa83 f34c 	uadd8	r3, r3, ip
    41b0:	faa2 f38c 	sel	r3, r2, ip
    41b4:	b97b      	cbnz	r3, 41d6 <strlen+0x96>
    41b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    41ba:	f101 0120 	add.w	r1, r1, #32
    41be:	fa82 f24c 	uadd8	r2, r2, ip
    41c2:	f100 0008 	add.w	r0, r0, #8
    41c6:	faa4 f28c 	sel	r2, r4, ip
    41ca:	fa83 f34c 	uadd8	r3, r3, ip
    41ce:	faa2 f38c 	sel	r3, r2, ip
    41d2:	2b00      	cmp	r3, #0
    41d4:	d0c6      	beq.n	4164 <strlen+0x24>
    41d6:	2a00      	cmp	r2, #0
    41d8:	bf04      	itt	eq
    41da:	3004      	addeq	r0, #4
    41dc:	461a      	moveq	r2, r3
    41de:	ba12      	rev	r2, r2
    41e0:	fab2 f282 	clz	r2, r2
    41e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    41e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    41ec:	4770      	bx	lr
    41ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    41f2:	f004 0503 	and.w	r5, r4, #3
    41f6:	f1c4 0000 	rsb	r0, r4, #0
    41fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    41fe:	f014 0f04 	tst.w	r4, #4
    4202:	f891 f040 	pld	[r1, #64]	; 0x40
    4206:	fa0c f505 	lsl.w	r5, ip, r5
    420a:	ea62 0205 	orn	r2, r2, r5
    420e:	bf1c      	itt	ne
    4210:	ea63 0305 	ornne	r3, r3, r5
    4214:	4662      	movne	r2, ip
    4216:	f04f 0400 	mov.w	r4, #0
    421a:	e7a9      	b.n	4170 <strlen+0x30>

0000421c <__swbuf_r>:
    421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    421e:	460d      	mov	r5, r1
    4220:	4614      	mov	r4, r2
    4222:	4606      	mov	r6, r0
    4224:	b110      	cbz	r0, 422c <__swbuf_r+0x10>
    4226:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4228:	2b00      	cmp	r3, #0
    422a:	d04b      	beq.n	42c4 <__swbuf_r+0xa8>
    422c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    4230:	69a3      	ldr	r3, [r4, #24]
    4232:	60a3      	str	r3, [r4, #8]
    4234:	b291      	uxth	r1, r2
    4236:	0708      	lsls	r0, r1, #28
    4238:	d539      	bpl.n	42ae <__swbuf_r+0x92>
    423a:	6923      	ldr	r3, [r4, #16]
    423c:	2b00      	cmp	r3, #0
    423e:	d036      	beq.n	42ae <__swbuf_r+0x92>
    4240:	b2ed      	uxtb	r5, r5
    4242:	0489      	lsls	r1, r1, #18
    4244:	462f      	mov	r7, r5
    4246:	d515      	bpl.n	4274 <__swbuf_r+0x58>
    4248:	6822      	ldr	r2, [r4, #0]
    424a:	6961      	ldr	r1, [r4, #20]
    424c:	1ad3      	subs	r3, r2, r3
    424e:	428b      	cmp	r3, r1
    4250:	da1c      	bge.n	428c <__swbuf_r+0x70>
    4252:	3301      	adds	r3, #1
    4254:	68a1      	ldr	r1, [r4, #8]
    4256:	1c50      	adds	r0, r2, #1
    4258:	3901      	subs	r1, #1
    425a:	60a1      	str	r1, [r4, #8]
    425c:	6020      	str	r0, [r4, #0]
    425e:	7015      	strb	r5, [r2, #0]
    4260:	6962      	ldr	r2, [r4, #20]
    4262:	429a      	cmp	r2, r3
    4264:	d01a      	beq.n	429c <__swbuf_r+0x80>
    4266:	89a3      	ldrh	r3, [r4, #12]
    4268:	07db      	lsls	r3, r3, #31
    426a:	d501      	bpl.n	4270 <__swbuf_r+0x54>
    426c:	2d0a      	cmp	r5, #10
    426e:	d015      	beq.n	429c <__swbuf_r+0x80>
    4270:	4638      	mov	r0, r7
    4272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4274:	6e61      	ldr	r1, [r4, #100]	; 0x64
    4276:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    427a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
    427e:	81a2      	strh	r2, [r4, #12]
    4280:	6822      	ldr	r2, [r4, #0]
    4282:	6661      	str	r1, [r4, #100]	; 0x64
    4284:	6961      	ldr	r1, [r4, #20]
    4286:	1ad3      	subs	r3, r2, r3
    4288:	428b      	cmp	r3, r1
    428a:	dbe2      	blt.n	4252 <__swbuf_r+0x36>
    428c:	4621      	mov	r1, r4
    428e:	4630      	mov	r0, r6
    4290:	f7fe fc8c 	bl	2bac <_fflush_r>
    4294:	b940      	cbnz	r0, 42a8 <__swbuf_r+0x8c>
    4296:	6822      	ldr	r2, [r4, #0]
    4298:	2301      	movs	r3, #1
    429a:	e7db      	b.n	4254 <__swbuf_r+0x38>
    429c:	4621      	mov	r1, r4
    429e:	4630      	mov	r0, r6
    42a0:	f7fe fc84 	bl	2bac <_fflush_r>
    42a4:	2800      	cmp	r0, #0
    42a6:	d0e3      	beq.n	4270 <__swbuf_r+0x54>
    42a8:	f04f 37ff 	mov.w	r7, #4294967295
    42ac:	e7e0      	b.n	4270 <__swbuf_r+0x54>
    42ae:	4621      	mov	r1, r4
    42b0:	4630      	mov	r0, r6
    42b2:	f7fe fb67 	bl	2984 <__swsetup_r>
    42b6:	2800      	cmp	r0, #0
    42b8:	d1f6      	bne.n	42a8 <__swbuf_r+0x8c>
    42ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    42be:	6923      	ldr	r3, [r4, #16]
    42c0:	b291      	uxth	r1, r2
    42c2:	e7bd      	b.n	4240 <__swbuf_r+0x24>
    42c4:	f7fe fcca 	bl	2c5c <__sinit>
    42c8:	e7b0      	b.n	422c <__swbuf_r+0x10>
    42ca:	bf00      	nop

000042cc <_wcrtomb_r>:
    42cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ce:	4606      	mov	r6, r0
    42d0:	b085      	sub	sp, #20
    42d2:	461f      	mov	r7, r3
    42d4:	b189      	cbz	r1, 42fa <_wcrtomb_r+0x2e>
    42d6:	4c10      	ldr	r4, [pc, #64]	; (4318 <_wcrtomb_r+0x4c>)
    42d8:	4d10      	ldr	r5, [pc, #64]	; (431c <_wcrtomb_r+0x50>)
    42da:	6824      	ldr	r4, [r4, #0]
    42dc:	6b64      	ldr	r4, [r4, #52]	; 0x34
    42de:	2c00      	cmp	r4, #0
    42e0:	bf08      	it	eq
    42e2:	462c      	moveq	r4, r5
    42e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
    42e8:	47a0      	blx	r4
    42ea:	1c43      	adds	r3, r0, #1
    42ec:	d103      	bne.n	42f6 <_wcrtomb_r+0x2a>
    42ee:	2200      	movs	r2, #0
    42f0:	238a      	movs	r3, #138	; 0x8a
    42f2:	603a      	str	r2, [r7, #0]
    42f4:	6033      	str	r3, [r6, #0]
    42f6:	b005      	add	sp, #20
    42f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42fa:	460c      	mov	r4, r1
    42fc:	4906      	ldr	r1, [pc, #24]	; (4318 <_wcrtomb_r+0x4c>)
    42fe:	4a07      	ldr	r2, [pc, #28]	; (431c <_wcrtomb_r+0x50>)
    4300:	6809      	ldr	r1, [r1, #0]
    4302:	6b49      	ldr	r1, [r1, #52]	; 0x34
    4304:	2900      	cmp	r1, #0
    4306:	bf08      	it	eq
    4308:	4611      	moveq	r1, r2
    430a:	4622      	mov	r2, r4
    430c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
    4310:	a901      	add	r1, sp, #4
    4312:	47a0      	blx	r4
    4314:	e7e9      	b.n	42ea <_wcrtomb_r+0x1e>
    4316:	bf00      	nop
    4318:	20000030 	.word	0x20000030
    431c:	20000464 	.word	0x20000464

00004320 <__ascii_wctomb>:
    4320:	b121      	cbz	r1, 432c <__ascii_wctomb+0xc>
    4322:	2aff      	cmp	r2, #255	; 0xff
    4324:	d804      	bhi.n	4330 <__ascii_wctomb+0x10>
    4326:	700a      	strb	r2, [r1, #0]
    4328:	2001      	movs	r0, #1
    432a:	4770      	bx	lr
    432c:	4608      	mov	r0, r1
    432e:	4770      	bx	lr
    4330:	238a      	movs	r3, #138	; 0x8a
    4332:	6003      	str	r3, [r0, #0]
    4334:	f04f 30ff 	mov.w	r0, #4294967295
    4338:	4770      	bx	lr
    433a:	bf00      	nop

0000433c <_write_r>:
    433c:	b570      	push	{r4, r5, r6, lr}
    433e:	460d      	mov	r5, r1
    4340:	4c08      	ldr	r4, [pc, #32]	; (4364 <_write_r+0x28>)
    4342:	4611      	mov	r1, r2
    4344:	4606      	mov	r6, r0
    4346:	461a      	mov	r2, r3
    4348:	4628      	mov	r0, r5
    434a:	2300      	movs	r3, #0
    434c:	6023      	str	r3, [r4, #0]
    434e:	f7fc f911 	bl	574 <_write>
    4352:	1c43      	adds	r3, r0, #1
    4354:	d000      	beq.n	4358 <_write_r+0x1c>
    4356:	bd70      	pop	{r4, r5, r6, pc}
    4358:	6823      	ldr	r3, [r4, #0]
    435a:	2b00      	cmp	r3, #0
    435c:	d0fb      	beq.n	4356 <_write_r+0x1a>
    435e:	6033      	str	r3, [r6, #0]
    4360:	bd70      	pop	{r4, r5, r6, pc}
    4362:	bf00      	nop
    4364:	20000a88 	.word	0x20000a88

00004368 <__register_exitproc>:
    4368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    436c:	4d2c      	ldr	r5, [pc, #176]	; (4420 <__register_exitproc+0xb8>)
    436e:	4606      	mov	r6, r0
    4370:	6828      	ldr	r0, [r5, #0]
    4372:	4698      	mov	r8, r3
    4374:	460f      	mov	r7, r1
    4376:	4691      	mov	r9, r2
    4378:	f7ff f830 	bl	33dc <__retarget_lock_acquire_recursive>
    437c:	4b29      	ldr	r3, [pc, #164]	; (4424 <__register_exitproc+0xbc>)
    437e:	681c      	ldr	r4, [r3, #0]
    4380:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    4384:	2b00      	cmp	r3, #0
    4386:	d03e      	beq.n	4406 <__register_exitproc+0x9e>
    4388:	685a      	ldr	r2, [r3, #4]
    438a:	2a1f      	cmp	r2, #31
    438c:	dc1c      	bgt.n	43c8 <__register_exitproc+0x60>
    438e:	f102 0e01 	add.w	lr, r2, #1
    4392:	b176      	cbz	r6, 43b2 <__register_exitproc+0x4a>
    4394:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    4398:	2401      	movs	r4, #1
    439a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    439e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    43a2:	4094      	lsls	r4, r2
    43a4:	4320      	orrs	r0, r4
    43a6:	2e02      	cmp	r6, #2
    43a8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    43ac:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    43b0:	d023      	beq.n	43fa <__register_exitproc+0x92>
    43b2:	3202      	adds	r2, #2
    43b4:	f8c3 e004 	str.w	lr, [r3, #4]
    43b8:	6828      	ldr	r0, [r5, #0]
    43ba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    43be:	f7ff f80f 	bl	33e0 <__retarget_lock_release_recursive>
    43c2:	2000      	movs	r0, #0
    43c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43c8:	4b17      	ldr	r3, [pc, #92]	; (4428 <__register_exitproc+0xc0>)
    43ca:	b30b      	cbz	r3, 4410 <__register_exitproc+0xa8>
    43cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    43d0:	f7ff f880 	bl	34d4 <malloc>
    43d4:	4603      	mov	r3, r0
    43d6:	b1d8      	cbz	r0, 4410 <__register_exitproc+0xa8>
    43d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    43dc:	6002      	str	r2, [r0, #0]
    43de:	2100      	movs	r1, #0
    43e0:	6041      	str	r1, [r0, #4]
    43e2:	460a      	mov	r2, r1
    43e4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    43e8:	f04f 0e01 	mov.w	lr, #1
    43ec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    43f0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    43f4:	2e00      	cmp	r6, #0
    43f6:	d0dc      	beq.n	43b2 <__register_exitproc+0x4a>
    43f8:	e7cc      	b.n	4394 <__register_exitproc+0x2c>
    43fa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    43fe:	430c      	orrs	r4, r1
    4400:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    4404:	e7d5      	b.n	43b2 <__register_exitproc+0x4a>
    4406:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    440a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    440e:	e7bb      	b.n	4388 <__register_exitproc+0x20>
    4410:	6828      	ldr	r0, [r5, #0]
    4412:	f7fe ffe5 	bl	33e0 <__retarget_lock_release_recursive>
    4416:	f04f 30ff 	mov.w	r0, #4294967295
    441a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    441e:	bf00      	nop
    4420:	20000460 	.word	0x20000460
    4424:	00004a24 	.word	0x00004a24
    4428:	000034d5 	.word	0x000034d5

0000442c <_close_r>:
    442c:	b538      	push	{r3, r4, r5, lr}
    442e:	4c07      	ldr	r4, [pc, #28]	; (444c <_close_r+0x20>)
    4430:	2300      	movs	r3, #0
    4432:	4605      	mov	r5, r0
    4434:	4608      	mov	r0, r1
    4436:	6023      	str	r3, [r4, #0]
    4438:	f7fd f956 	bl	16e8 <_close>
    443c:	1c43      	adds	r3, r0, #1
    443e:	d000      	beq.n	4442 <_close_r+0x16>
    4440:	bd38      	pop	{r3, r4, r5, pc}
    4442:	6823      	ldr	r3, [r4, #0]
    4444:	2b00      	cmp	r3, #0
    4446:	d0fb      	beq.n	4440 <_close_r+0x14>
    4448:	602b      	str	r3, [r5, #0]
    444a:	bd38      	pop	{r3, r4, r5, pc}
    444c:	20000a88 	.word	0x20000a88

00004450 <_fclose_r>:
    4450:	b570      	push	{r4, r5, r6, lr}
    4452:	b159      	cbz	r1, 446c <_fclose_r+0x1c>
    4454:	4605      	mov	r5, r0
    4456:	460c      	mov	r4, r1
    4458:	b110      	cbz	r0, 4460 <_fclose_r+0x10>
    445a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    445c:	2b00      	cmp	r3, #0
    445e:	d03c      	beq.n	44da <_fclose_r+0x8a>
    4460:	6e63      	ldr	r3, [r4, #100]	; 0x64
    4462:	07d8      	lsls	r0, r3, #31
    4464:	d505      	bpl.n	4472 <_fclose_r+0x22>
    4466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    446a:	b92b      	cbnz	r3, 4478 <_fclose_r+0x28>
    446c:	2600      	movs	r6, #0
    446e:	4630      	mov	r0, r6
    4470:	bd70      	pop	{r4, r5, r6, pc}
    4472:	89a3      	ldrh	r3, [r4, #12]
    4474:	0599      	lsls	r1, r3, #22
    4476:	d53c      	bpl.n	44f2 <_fclose_r+0xa2>
    4478:	4621      	mov	r1, r4
    447a:	4628      	mov	r0, r5
    447c:	f7fe faf6 	bl	2a6c <__sflush_r>
    4480:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4482:	4606      	mov	r6, r0
    4484:	b133      	cbz	r3, 4494 <_fclose_r+0x44>
    4486:	69e1      	ldr	r1, [r4, #28]
    4488:	4628      	mov	r0, r5
    448a:	4798      	blx	r3
    448c:	2800      	cmp	r0, #0
    448e:	bfb8      	it	lt
    4490:	f04f 36ff 	movlt.w	r6, #4294967295
    4494:	89a3      	ldrh	r3, [r4, #12]
    4496:	061a      	lsls	r2, r3, #24
    4498:	d422      	bmi.n	44e0 <_fclose_r+0x90>
    449a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    449c:	b141      	cbz	r1, 44b0 <_fclose_r+0x60>
    449e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    44a2:	4299      	cmp	r1, r3
    44a4:	d002      	beq.n	44ac <_fclose_r+0x5c>
    44a6:	4628      	mov	r0, r5
    44a8:	f7fe fcfe 	bl	2ea8 <_free_r>
    44ac:	2300      	movs	r3, #0
    44ae:	6323      	str	r3, [r4, #48]	; 0x30
    44b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    44b2:	b121      	cbz	r1, 44be <_fclose_r+0x6e>
    44b4:	4628      	mov	r0, r5
    44b6:	f7fe fcf7 	bl	2ea8 <_free_r>
    44ba:	2300      	movs	r3, #0
    44bc:	6463      	str	r3, [r4, #68]	; 0x44
    44be:	f7fe fbf9 	bl	2cb4 <__sfp_lock_acquire>
    44c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    44c4:	2200      	movs	r2, #0
    44c6:	07db      	lsls	r3, r3, #31
    44c8:	81a2      	strh	r2, [r4, #12]
    44ca:	d50e      	bpl.n	44ea <_fclose_r+0x9a>
    44cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    44ce:	f7fe ff83 	bl	33d8 <__retarget_lock_close_recursive>
    44d2:	f7fe fbf5 	bl	2cc0 <__sfp_lock_release>
    44d6:	4630      	mov	r0, r6
    44d8:	bd70      	pop	{r4, r5, r6, pc}
    44da:	f7fe fbbf 	bl	2c5c <__sinit>
    44de:	e7bf      	b.n	4460 <_fclose_r+0x10>
    44e0:	6921      	ldr	r1, [r4, #16]
    44e2:	4628      	mov	r0, r5
    44e4:	f7fe fce0 	bl	2ea8 <_free_r>
    44e8:	e7d7      	b.n	449a <_fclose_r+0x4a>
    44ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
    44ec:	f7fe ff78 	bl	33e0 <__retarget_lock_release_recursive>
    44f0:	e7ec      	b.n	44cc <_fclose_r+0x7c>
    44f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    44f4:	f7fe ff72 	bl	33dc <__retarget_lock_acquire_recursive>
    44f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d1bb      	bne.n	4478 <_fclose_r+0x28>
    4500:	6e66      	ldr	r6, [r4, #100]	; 0x64
    4502:	f016 0601 	ands.w	r6, r6, #1
    4506:	d1b1      	bne.n	446c <_fclose_r+0x1c>
    4508:	6da0      	ldr	r0, [r4, #88]	; 0x58
    450a:	f7fe ff69 	bl	33e0 <__retarget_lock_release_recursive>
    450e:	4630      	mov	r0, r6
    4510:	bd70      	pop	{r4, r5, r6, pc}
    4512:	bf00      	nop

00004514 <_fstat_r>:
    4514:	b538      	push	{r3, r4, r5, lr}
    4516:	460b      	mov	r3, r1
    4518:	4c07      	ldr	r4, [pc, #28]	; (4538 <_fstat_r+0x24>)
    451a:	4605      	mov	r5, r0
    451c:	4611      	mov	r1, r2
    451e:	4618      	mov	r0, r3
    4520:	2300      	movs	r3, #0
    4522:	6023      	str	r3, [r4, #0]
    4524:	f7fd f8e3 	bl	16ee <_fstat>
    4528:	1c43      	adds	r3, r0, #1
    452a:	d000      	beq.n	452e <_fstat_r+0x1a>
    452c:	bd38      	pop	{r3, r4, r5, pc}
    452e:	6823      	ldr	r3, [r4, #0]
    4530:	2b00      	cmp	r3, #0
    4532:	d0fb      	beq.n	452c <_fstat_r+0x18>
    4534:	602b      	str	r3, [r5, #0]
    4536:	bd38      	pop	{r3, r4, r5, pc}
    4538:	20000a88 	.word	0x20000a88

0000453c <_isatty_r>:
    453c:	b538      	push	{r3, r4, r5, lr}
    453e:	4c07      	ldr	r4, [pc, #28]	; (455c <_isatty_r+0x20>)
    4540:	2300      	movs	r3, #0
    4542:	4605      	mov	r5, r0
    4544:	4608      	mov	r0, r1
    4546:	6023      	str	r3, [r4, #0]
    4548:	f7fd f8d6 	bl	16f8 <_isatty>
    454c:	1c43      	adds	r3, r0, #1
    454e:	d000      	beq.n	4552 <_isatty_r+0x16>
    4550:	bd38      	pop	{r3, r4, r5, pc}
    4552:	6823      	ldr	r3, [r4, #0]
    4554:	2b00      	cmp	r3, #0
    4556:	d0fb      	beq.n	4550 <_isatty_r+0x14>
    4558:	602b      	str	r3, [r5, #0]
    455a:	bd38      	pop	{r3, r4, r5, pc}
    455c:	20000a88 	.word	0x20000a88

00004560 <_lseek_r>:
    4560:	b570      	push	{r4, r5, r6, lr}
    4562:	460d      	mov	r5, r1
    4564:	4c08      	ldr	r4, [pc, #32]	; (4588 <_lseek_r+0x28>)
    4566:	4611      	mov	r1, r2
    4568:	4606      	mov	r6, r0
    456a:	461a      	mov	r2, r3
    456c:	4628      	mov	r0, r5
    456e:	2300      	movs	r3, #0
    4570:	6023      	str	r3, [r4, #0]
    4572:	f7fd f8c3 	bl	16fc <_lseek>
    4576:	1c43      	adds	r3, r0, #1
    4578:	d000      	beq.n	457c <_lseek_r+0x1c>
    457a:	bd70      	pop	{r4, r5, r6, pc}
    457c:	6823      	ldr	r3, [r4, #0]
    457e:	2b00      	cmp	r3, #0
    4580:	d0fb      	beq.n	457a <_lseek_r+0x1a>
    4582:	6033      	str	r3, [r6, #0]
    4584:	bd70      	pop	{r4, r5, r6, pc}
    4586:	bf00      	nop
    4588:	20000a88 	.word	0x20000a88

0000458c <_read_r>:
    458c:	b570      	push	{r4, r5, r6, lr}
    458e:	460d      	mov	r5, r1
    4590:	4c08      	ldr	r4, [pc, #32]	; (45b4 <_read_r+0x28>)
    4592:	4611      	mov	r1, r2
    4594:	4606      	mov	r6, r0
    4596:	461a      	mov	r2, r3
    4598:	4628      	mov	r0, r5
    459a:	2300      	movs	r3, #0
    459c:	6023      	str	r3, [r4, #0]
    459e:	f7fb fe25 	bl	1ec <_read>
    45a2:	1c43      	adds	r3, r0, #1
    45a4:	d000      	beq.n	45a8 <_read_r+0x1c>
    45a6:	bd70      	pop	{r4, r5, r6, pc}
    45a8:	6823      	ldr	r3, [r4, #0]
    45aa:	2b00      	cmp	r3, #0
    45ac:	d0fb      	beq.n	45a6 <_read_r+0x1a>
    45ae:	6033      	str	r3, [r6, #0]
    45b0:	bd70      	pop	{r4, r5, r6, pc}
    45b2:	bf00      	nop
    45b4:	20000a88 	.word	0x20000a88

000045b8 <__aeabi_uldivmod>:
    45b8:	b953      	cbnz	r3, 45d0 <__aeabi_uldivmod+0x18>
    45ba:	b94a      	cbnz	r2, 45d0 <__aeabi_uldivmod+0x18>
    45bc:	2900      	cmp	r1, #0
    45be:	bf08      	it	eq
    45c0:	2800      	cmpeq	r0, #0
    45c2:	bf1c      	itt	ne
    45c4:	f04f 31ff 	movne.w	r1, #4294967295
    45c8:	f04f 30ff 	movne.w	r0, #4294967295
    45cc:	f000 b97a 	b.w	48c4 <__aeabi_idiv0>
    45d0:	f1ad 0c08 	sub.w	ip, sp, #8
    45d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    45d8:	f000 f806 	bl	45e8 <__udivmoddi4>
    45dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    45e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    45e4:	b004      	add	sp, #16
    45e6:	4770      	bx	lr

000045e8 <__udivmoddi4>:
    45e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45ec:	468c      	mov	ip, r1
    45ee:	460d      	mov	r5, r1
    45f0:	4604      	mov	r4, r0
    45f2:	9e08      	ldr	r6, [sp, #32]
    45f4:	2b00      	cmp	r3, #0
    45f6:	d151      	bne.n	469c <__udivmoddi4+0xb4>
    45f8:	428a      	cmp	r2, r1
    45fa:	4617      	mov	r7, r2
    45fc:	d96d      	bls.n	46da <__udivmoddi4+0xf2>
    45fe:	fab2 fe82 	clz	lr, r2
    4602:	f1be 0f00 	cmp.w	lr, #0
    4606:	d00b      	beq.n	4620 <__udivmoddi4+0x38>
    4608:	f1ce 0c20 	rsb	ip, lr, #32
    460c:	fa01 f50e 	lsl.w	r5, r1, lr
    4610:	fa20 fc0c 	lsr.w	ip, r0, ip
    4614:	fa02 f70e 	lsl.w	r7, r2, lr
    4618:	ea4c 0c05 	orr.w	ip, ip, r5
    461c:	fa00 f40e 	lsl.w	r4, r0, lr
    4620:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    4624:	0c25      	lsrs	r5, r4, #16
    4626:	fbbc f8fa 	udiv	r8, ip, sl
    462a:	fa1f f987 	uxth.w	r9, r7
    462e:	fb0a cc18 	mls	ip, sl, r8, ip
    4632:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    4636:	fb08 f309 	mul.w	r3, r8, r9
    463a:	42ab      	cmp	r3, r5
    463c:	d90a      	bls.n	4654 <__udivmoddi4+0x6c>
    463e:	19ed      	adds	r5, r5, r7
    4640:	f108 32ff 	add.w	r2, r8, #4294967295
    4644:	f080 8123 	bcs.w	488e <__udivmoddi4+0x2a6>
    4648:	42ab      	cmp	r3, r5
    464a:	f240 8120 	bls.w	488e <__udivmoddi4+0x2a6>
    464e:	f1a8 0802 	sub.w	r8, r8, #2
    4652:	443d      	add	r5, r7
    4654:	1aed      	subs	r5, r5, r3
    4656:	b2a4      	uxth	r4, r4
    4658:	fbb5 f0fa 	udiv	r0, r5, sl
    465c:	fb0a 5510 	mls	r5, sl, r0, r5
    4660:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    4664:	fb00 f909 	mul.w	r9, r0, r9
    4668:	45a1      	cmp	r9, r4
    466a:	d909      	bls.n	4680 <__udivmoddi4+0x98>
    466c:	19e4      	adds	r4, r4, r7
    466e:	f100 33ff 	add.w	r3, r0, #4294967295
    4672:	f080 810a 	bcs.w	488a <__udivmoddi4+0x2a2>
    4676:	45a1      	cmp	r9, r4
    4678:	f240 8107 	bls.w	488a <__udivmoddi4+0x2a2>
    467c:	3802      	subs	r0, #2
    467e:	443c      	add	r4, r7
    4680:	eba4 0409 	sub.w	r4, r4, r9
    4684:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4688:	2100      	movs	r1, #0
    468a:	2e00      	cmp	r6, #0
    468c:	d061      	beq.n	4752 <__udivmoddi4+0x16a>
    468e:	fa24 f40e 	lsr.w	r4, r4, lr
    4692:	2300      	movs	r3, #0
    4694:	6034      	str	r4, [r6, #0]
    4696:	6073      	str	r3, [r6, #4]
    4698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    469c:	428b      	cmp	r3, r1
    469e:	d907      	bls.n	46b0 <__udivmoddi4+0xc8>
    46a0:	2e00      	cmp	r6, #0
    46a2:	d054      	beq.n	474e <__udivmoddi4+0x166>
    46a4:	2100      	movs	r1, #0
    46a6:	e886 0021 	stmia.w	r6, {r0, r5}
    46aa:	4608      	mov	r0, r1
    46ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46b0:	fab3 f183 	clz	r1, r3
    46b4:	2900      	cmp	r1, #0
    46b6:	f040 808e 	bne.w	47d6 <__udivmoddi4+0x1ee>
    46ba:	42ab      	cmp	r3, r5
    46bc:	d302      	bcc.n	46c4 <__udivmoddi4+0xdc>
    46be:	4282      	cmp	r2, r0
    46c0:	f200 80fa 	bhi.w	48b8 <__udivmoddi4+0x2d0>
    46c4:	1a84      	subs	r4, r0, r2
    46c6:	eb65 0503 	sbc.w	r5, r5, r3
    46ca:	2001      	movs	r0, #1
    46cc:	46ac      	mov	ip, r5
    46ce:	2e00      	cmp	r6, #0
    46d0:	d03f      	beq.n	4752 <__udivmoddi4+0x16a>
    46d2:	e886 1010 	stmia.w	r6, {r4, ip}
    46d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46da:	b912      	cbnz	r2, 46e2 <__udivmoddi4+0xfa>
    46dc:	2701      	movs	r7, #1
    46de:	fbb7 f7f2 	udiv	r7, r7, r2
    46e2:	fab7 fe87 	clz	lr, r7
    46e6:	f1be 0f00 	cmp.w	lr, #0
    46ea:	d134      	bne.n	4756 <__udivmoddi4+0x16e>
    46ec:	1beb      	subs	r3, r5, r7
    46ee:	0c3a      	lsrs	r2, r7, #16
    46f0:	fa1f fc87 	uxth.w	ip, r7
    46f4:	2101      	movs	r1, #1
    46f6:	fbb3 f8f2 	udiv	r8, r3, r2
    46fa:	0c25      	lsrs	r5, r4, #16
    46fc:	fb02 3318 	mls	r3, r2, r8, r3
    4700:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4704:	fb0c f308 	mul.w	r3, ip, r8
    4708:	42ab      	cmp	r3, r5
    470a:	d907      	bls.n	471c <__udivmoddi4+0x134>
    470c:	19ed      	adds	r5, r5, r7
    470e:	f108 30ff 	add.w	r0, r8, #4294967295
    4712:	d202      	bcs.n	471a <__udivmoddi4+0x132>
    4714:	42ab      	cmp	r3, r5
    4716:	f200 80d1 	bhi.w	48bc <__udivmoddi4+0x2d4>
    471a:	4680      	mov	r8, r0
    471c:	1aed      	subs	r5, r5, r3
    471e:	b2a3      	uxth	r3, r4
    4720:	fbb5 f0f2 	udiv	r0, r5, r2
    4724:	fb02 5510 	mls	r5, r2, r0, r5
    4728:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    472c:	fb0c fc00 	mul.w	ip, ip, r0
    4730:	45a4      	cmp	ip, r4
    4732:	d907      	bls.n	4744 <__udivmoddi4+0x15c>
    4734:	19e4      	adds	r4, r4, r7
    4736:	f100 33ff 	add.w	r3, r0, #4294967295
    473a:	d202      	bcs.n	4742 <__udivmoddi4+0x15a>
    473c:	45a4      	cmp	ip, r4
    473e:	f200 80b8 	bhi.w	48b2 <__udivmoddi4+0x2ca>
    4742:	4618      	mov	r0, r3
    4744:	eba4 040c 	sub.w	r4, r4, ip
    4748:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    474c:	e79d      	b.n	468a <__udivmoddi4+0xa2>
    474e:	4631      	mov	r1, r6
    4750:	4630      	mov	r0, r6
    4752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4756:	f1ce 0420 	rsb	r4, lr, #32
    475a:	fa05 f30e 	lsl.w	r3, r5, lr
    475e:	fa07 f70e 	lsl.w	r7, r7, lr
    4762:	fa20 f804 	lsr.w	r8, r0, r4
    4766:	0c3a      	lsrs	r2, r7, #16
    4768:	fa25 f404 	lsr.w	r4, r5, r4
    476c:	ea48 0803 	orr.w	r8, r8, r3
    4770:	fbb4 f1f2 	udiv	r1, r4, r2
    4774:	ea4f 4518 	mov.w	r5, r8, lsr #16
    4778:	fb02 4411 	mls	r4, r2, r1, r4
    477c:	fa1f fc87 	uxth.w	ip, r7
    4780:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    4784:	fb01 f30c 	mul.w	r3, r1, ip
    4788:	42ab      	cmp	r3, r5
    478a:	fa00 f40e 	lsl.w	r4, r0, lr
    478e:	d909      	bls.n	47a4 <__udivmoddi4+0x1bc>
    4790:	19ed      	adds	r5, r5, r7
    4792:	f101 30ff 	add.w	r0, r1, #4294967295
    4796:	f080 808a 	bcs.w	48ae <__udivmoddi4+0x2c6>
    479a:	42ab      	cmp	r3, r5
    479c:	f240 8087 	bls.w	48ae <__udivmoddi4+0x2c6>
    47a0:	3902      	subs	r1, #2
    47a2:	443d      	add	r5, r7
    47a4:	1aeb      	subs	r3, r5, r3
    47a6:	fa1f f588 	uxth.w	r5, r8
    47aa:	fbb3 f0f2 	udiv	r0, r3, r2
    47ae:	fb02 3310 	mls	r3, r2, r0, r3
    47b2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    47b6:	fb00 f30c 	mul.w	r3, r0, ip
    47ba:	42ab      	cmp	r3, r5
    47bc:	d907      	bls.n	47ce <__udivmoddi4+0x1e6>
    47be:	19ed      	adds	r5, r5, r7
    47c0:	f100 38ff 	add.w	r8, r0, #4294967295
    47c4:	d26f      	bcs.n	48a6 <__udivmoddi4+0x2be>
    47c6:	42ab      	cmp	r3, r5
    47c8:	d96d      	bls.n	48a6 <__udivmoddi4+0x2be>
    47ca:	3802      	subs	r0, #2
    47cc:	443d      	add	r5, r7
    47ce:	1aeb      	subs	r3, r5, r3
    47d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    47d4:	e78f      	b.n	46f6 <__udivmoddi4+0x10e>
    47d6:	f1c1 0720 	rsb	r7, r1, #32
    47da:	fa22 f807 	lsr.w	r8, r2, r7
    47de:	408b      	lsls	r3, r1
    47e0:	fa05 f401 	lsl.w	r4, r5, r1
    47e4:	ea48 0303 	orr.w	r3, r8, r3
    47e8:	fa20 fe07 	lsr.w	lr, r0, r7
    47ec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    47f0:	40fd      	lsrs	r5, r7
    47f2:	ea4e 0e04 	orr.w	lr, lr, r4
    47f6:	fbb5 f9fc 	udiv	r9, r5, ip
    47fa:	ea4f 441e 	mov.w	r4, lr, lsr #16
    47fe:	fb0c 5519 	mls	r5, ip, r9, r5
    4802:	fa1f f883 	uxth.w	r8, r3
    4806:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    480a:	fb09 f408 	mul.w	r4, r9, r8
    480e:	42ac      	cmp	r4, r5
    4810:	fa02 f201 	lsl.w	r2, r2, r1
    4814:	fa00 fa01 	lsl.w	sl, r0, r1
    4818:	d908      	bls.n	482c <__udivmoddi4+0x244>
    481a:	18ed      	adds	r5, r5, r3
    481c:	f109 30ff 	add.w	r0, r9, #4294967295
    4820:	d243      	bcs.n	48aa <__udivmoddi4+0x2c2>
    4822:	42ac      	cmp	r4, r5
    4824:	d941      	bls.n	48aa <__udivmoddi4+0x2c2>
    4826:	f1a9 0902 	sub.w	r9, r9, #2
    482a:	441d      	add	r5, r3
    482c:	1b2d      	subs	r5, r5, r4
    482e:	fa1f fe8e 	uxth.w	lr, lr
    4832:	fbb5 f0fc 	udiv	r0, r5, ip
    4836:	fb0c 5510 	mls	r5, ip, r0, r5
    483a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    483e:	fb00 f808 	mul.w	r8, r0, r8
    4842:	45a0      	cmp	r8, r4
    4844:	d907      	bls.n	4856 <__udivmoddi4+0x26e>
    4846:	18e4      	adds	r4, r4, r3
    4848:	f100 35ff 	add.w	r5, r0, #4294967295
    484c:	d229      	bcs.n	48a2 <__udivmoddi4+0x2ba>
    484e:	45a0      	cmp	r8, r4
    4850:	d927      	bls.n	48a2 <__udivmoddi4+0x2ba>
    4852:	3802      	subs	r0, #2
    4854:	441c      	add	r4, r3
    4856:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    485a:	eba4 0408 	sub.w	r4, r4, r8
    485e:	fba0 8902 	umull	r8, r9, r0, r2
    4862:	454c      	cmp	r4, r9
    4864:	46c6      	mov	lr, r8
    4866:	464d      	mov	r5, r9
    4868:	d315      	bcc.n	4896 <__udivmoddi4+0x2ae>
    486a:	d012      	beq.n	4892 <__udivmoddi4+0x2aa>
    486c:	b156      	cbz	r6, 4884 <__udivmoddi4+0x29c>
    486e:	ebba 030e 	subs.w	r3, sl, lr
    4872:	eb64 0405 	sbc.w	r4, r4, r5
    4876:	fa04 f707 	lsl.w	r7, r4, r7
    487a:	40cb      	lsrs	r3, r1
    487c:	431f      	orrs	r7, r3
    487e:	40cc      	lsrs	r4, r1
    4880:	6037      	str	r7, [r6, #0]
    4882:	6074      	str	r4, [r6, #4]
    4884:	2100      	movs	r1, #0
    4886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    488a:	4618      	mov	r0, r3
    488c:	e6f8      	b.n	4680 <__udivmoddi4+0x98>
    488e:	4690      	mov	r8, r2
    4890:	e6e0      	b.n	4654 <__udivmoddi4+0x6c>
    4892:	45c2      	cmp	sl, r8
    4894:	d2ea      	bcs.n	486c <__udivmoddi4+0x284>
    4896:	ebb8 0e02 	subs.w	lr, r8, r2
    489a:	eb69 0503 	sbc.w	r5, r9, r3
    489e:	3801      	subs	r0, #1
    48a0:	e7e4      	b.n	486c <__udivmoddi4+0x284>
    48a2:	4628      	mov	r0, r5
    48a4:	e7d7      	b.n	4856 <__udivmoddi4+0x26e>
    48a6:	4640      	mov	r0, r8
    48a8:	e791      	b.n	47ce <__udivmoddi4+0x1e6>
    48aa:	4681      	mov	r9, r0
    48ac:	e7be      	b.n	482c <__udivmoddi4+0x244>
    48ae:	4601      	mov	r1, r0
    48b0:	e778      	b.n	47a4 <__udivmoddi4+0x1bc>
    48b2:	3802      	subs	r0, #2
    48b4:	443c      	add	r4, r7
    48b6:	e745      	b.n	4744 <__udivmoddi4+0x15c>
    48b8:	4608      	mov	r0, r1
    48ba:	e708      	b.n	46ce <__udivmoddi4+0xe6>
    48bc:	f1a8 0802 	sub.w	r8, r8, #2
    48c0:	443d      	add	r5, r7
    48c2:	e72b      	b.n	471c <__udivmoddi4+0x134>

000048c4 <__aeabi_idiv0>:
    48c4:	4770      	bx	lr
    48c6:	bf00      	nop
    48c8:	666e6f43 	.word	0x666e6f43
    48cc:	72756769 	.word	0x72756769
    48d0:	43542065 	.word	0x43542065
    48d4:	63206425 	.word	0x63206425
    48d8:	6e6e6168 	.word	0x6e6e6168
    48dc:	25206c65 	.word	0x25206c65
    48e0:	73612064 	.word	0x73612064
    48e4:	76617720 	.word	0x76617720
    48e8:	726f6665 	.word	0x726f6665
    48ec:	706f206d 	.word	0x706f206d
    48f0:	74617265 	.word	0x74617265
    48f4:	20676e69 	.word	0x20676e69
    48f8:	65646f6d 	.word	0x65646f6d
    48fc:	000d0a20 	.word	0x000d0a20
    4900:	72617453 	.word	0x72617453
    4904:	61772074 	.word	0x61772074
    4908:	6f666576 	.word	0x6f666576
    490c:	203a6d72 	.word	0x203a6d72
    4910:	71657246 	.word	0x71657246
    4914:	636e6575 	.word	0x636e6575
    4918:	203d2079 	.word	0x203d2079
    491c:	48206425 	.word	0x48206425
    4920:	75442c7a 	.word	0x75442c7a
    4924:	43207974 	.word	0x43207974
    4928:	656c6379 	.word	0x656c6379
    492c:	25203d20 	.word	0x25203d20
    4930:	25256432 	.word	0x25256432
    4934:	00000d0a 	.word	0x00000d0a
    4938:	666e6f43 	.word	0x666e6f43
    493c:	72756769 	.word	0x72756769
    4940:	43542065 	.word	0x43542065
    4944:	63206425 	.word	0x63206425
    4948:	6e6e6168 	.word	0x6e6e6168
    494c:	25206c65 	.word	0x25206c65
    4950:	73612064 	.word	0x73612064
    4954:	70616320 	.word	0x70616320
    4958:	65727574 	.word	0x65727574
    495c:	65706f20 	.word	0x65706f20
    4960:	69746172 	.word	0x69746172
    4964:	6d20676e 	.word	0x6d20676e
    4968:	2065646f 	.word	0x2065646f
    496c:	00000d0a 	.word	0x00000d0a
    4970:	495b0a0d 	.word	0x495b0a0d
    4974:	5d4f464e 	.word	0x5d4f464e
    4978:	616f4220 	.word	0x616f4220
    497c:	69206472 	.word	0x69206472
    4980:	6974696e 	.word	0x6974696e
    4984:	7a696c61 	.word	0x7a696c61
    4988:	6f697461 	.word	0x6f697461
    498c:	6f63206e 	.word	0x6f63206e
    4990:	656c706d 	.word	0x656c706d
    4994:	0a0d6574 	.word	0x0a0d6574
    4998:	00000000 	.word	0x00000000
    499c:	54202d2d 	.word	0x54202d2d
    49a0:	61632043 	.word	0x61632043
    49a4:	72757470 	.word	0x72757470
    49a8:	61772065 	.word	0x61772065
    49ac:	6f666576 	.word	0x6f666576
    49b0:	45206d72 	.word	0x45206d72
    49b4:	706d6178 	.word	0x706d6178
    49b8:	2d20656c 	.word	0x2d20656c
    49bc:	000a0d2d 	.word	0x000a0d2d
    49c0:	344d4153 	.word	0x344d4153
    49c4:	7058204c 	.word	0x7058204c
    49c8:	6e69616c 	.word	0x6e69616c
    49cc:	50206465 	.word	0x50206465
    49d0:	00006f72 	.word	0x00006f72
    49d4:	25202d2d 	.word	0x25202d2d
    49d8:	000d0a73 	.word	0x000d0a73
    49dc:	343a3231 	.word	0x343a3231
    49e0:	34343a34 	.word	0x34343a34
    49e4:	00000000 	.word	0x00000000
    49e8:	206e614a 	.word	0x206e614a
    49ec:	32203120 	.word	0x32203120
    49f0:	00383130 	.word	0x00383130
    49f4:	43202d2d 	.word	0x43202d2d
    49f8:	69706d6f 	.word	0x69706d6f
    49fc:	3a64656c 	.word	0x3a64656c
    4a00:	20732520 	.word	0x20732520
    4a04:	2d207325 	.word	0x2d207325
    4a08:	000d0a2d 	.word	0x000d0a2d
    4a0c:	75520a0d 	.word	0x75520a0d
    4a10:	616d206e 	.word	0x616d206e
    4a14:	6c206e69 	.word	0x6c206e69
    4a18:	20706f6f 	.word	0x20706f6f
    4a1c:	0a0d6425 	.word	0x0a0d6425
    4a20:	00000000 	.word	0x00000000

00004a24 <_global_impure_ptr>:
    4a24:	20000038 33323130 37363534 42413938     8.. 0123456789AB
    4a34:	46454443 00000000 33323130 37363534     CDEF....01234567
    4a44:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
    4a54:	0000296c                                l)..

00004a58 <blanks.7217>:
    4a58:	20202020 20202020 20202020 20202020                     

00004a68 <zeroes.7218>:
    4a68:	30303030 30303030 30303030 30303030     0000000000000000
    4a78:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00004a88 <_ctype_>:
    4a88:	20202000 20202020 28282020 20282828     .         ((((( 
    4a98:	20202020 20202020 20202020 20202020                     
    4aa8:	10108820 10101010 10101010 10101010      ...............
    4ab8:	04040410 04040404 10040404 10101010     ................
    4ac8:	41411010 41414141 01010101 01010101     ..AAAAAA........
    4ad8:	01010101 01010101 01010101 10101010     ................
    4ae8:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4af8:	02020202 02020202 02020202 10101010     ................
    4b08:	00000020 00000000 00000000 00000000      ...............
	...

00004b8c <_init>:
    4b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b8e:	bf00      	nop
    4b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b92:	bc08      	pop	{r3}
    4b94:	469e      	mov	lr, r3
    4b96:	4770      	bx	lr

00004b98 <__init_array_start>:
    4b98:	00002a4d 	.word	0x00002a4d

00004b9c <__frame_dummy_init_array_entry>:
    4b9c:	000001a5                                ....

00004ba0 <_fini>:
    4ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ba2:	bf00      	nop
    4ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4ba6:	bc08      	pop	{r3}
    4ba8:	469e      	mov	lr, r3
    4baa:	4770      	bx	lr

00004bac <__fini_array_start>:
    4bac:	00000181 	.word	0x00000181

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
	BPM_UNLOCK(PMCON);
20000000:	4a07      	ldr	r2, [pc, #28]	; (20000020 <bpm_ps_no_halt_exec+0x20>)
20000002:	4b08      	ldr	r3, [pc, #32]	; (20000024 <bpm_ps_no_halt_exec+0x24>)
20000004:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000006:	61c1      	str	r1, [r0, #28]
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000008:	4619      	mov	r1, r3
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000a:	4a07      	ldr	r2, [pc, #28]	; (20000028 <bpm_ps_no_halt_exec+0x28>)
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000000c:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000e:	6813      	ldr	r3, [r2, #0]
20000010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000014:	f010 0001 	ands.w	r0, r0, #1
20000018:	d101      	bne.n	2000001e <bpm_ps_no_halt_exec+0x1e>
2000001a:	2b00      	cmp	r3, #0
2000001c:	d0f6      	beq.n	2000000c <bpm_ps_no_halt_exec+0xc>
}
2000001e:	4770      	bx	lr
20000020:	aa00001c 	.word	0xaa00001c
20000024:	400f0000 	.word	0x400f0000
20000028:	e000e010 	.word	0xe000e010

2000002c <g_interrupt_enabled>:
2000002c:	00000001                                ....

20000030 <_impure_ptr>:
20000030:	20000038 00000000                       8.. ....

20000038 <impure_data>:
20000038:	00000000 20000324 2000038c 200003f4     ....$.. ... ... 
	...
200000e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200000f0:	0005deec 0000000b 00000000 00000000     ................
	...

20000460 <__atexit_recursive_mutex>:
20000460:	20000a64                                d.. 

20000464 <__global_locale>:
20000464:	00000043 00000000 00000000 00000000     C...............
	...
20000484:	00000043 00000000 00000000 00000000     C...............
	...
200004a4:	00000043 00000000 00000000 00000000     C...............
	...
200004c4:	00000043 00000000 00000000 00000000     C...............
	...
200004e4:	00000043 00000000 00000000 00000000     C...............
	...
20000504:	00000043 00000000 00000000 00000000     C...............
	...
20000524:	00000043 00000000 00000000 00000000     C...............
	...
20000544:	00004321 00003a45 00000000 00004a88     !C..E:.......J..
20000554:	00004a84 00004a20 00004a20 00004a20     .J.. J.. J.. J..
20000564:	00004a20 00004a20 00004a20 00004a20      J.. J.. J.. J..
20000574:	00004a20 00004a20 ffffffff ffffffff      J.. J..........
20000584:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200005ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200005d0 <__malloc_av_>:
	...
200005d8:	200005d0 200005d0 200005d8 200005d8     ... ... ... ... 
200005e8:	200005e0 200005e0 200005e8 200005e8     ... ... ... ... 
200005f8:	200005f0 200005f0 200005f8 200005f8     ... ... ... ... 
20000608:	20000600 20000600 20000608 20000608     ... ... ... ... 
20000618:	20000610 20000610 20000618 20000618     ... ... ... ... 
20000628:	20000620 20000620 20000628 20000628      ..  .. (.. (.. 
20000638:	20000630 20000630 20000638 20000638     0.. 0.. 8.. 8.. 
20000648:	20000640 20000640 20000648 20000648     @.. @.. H.. H.. 
20000658:	20000650 20000650 20000658 20000658     P.. P.. X.. X.. 
20000668:	20000660 20000660 20000668 20000668     `.. `.. h.. h.. 
20000678:	20000670 20000670 20000678 20000678     p.. p.. x.. x.. 
20000688:	20000680 20000680 20000688 20000688     ... ... ... ... 
20000698:	20000690 20000690 20000698 20000698     ... ... ... ... 
200006a8:	200006a0 200006a0 200006a8 200006a8     ... ... ... ... 
200006b8:	200006b0 200006b0 200006b8 200006b8     ... ... ... ... 
200006c8:	200006c0 200006c0 200006c8 200006c8     ... ... ... ... 
200006d8:	200006d0 200006d0 200006d8 200006d8     ... ... ... ... 
200006e8:	200006e0 200006e0 200006e8 200006e8     ... ... ... ... 
200006f8:	200006f0 200006f0 200006f8 200006f8     ... ... ... ... 
20000708:	20000700 20000700 20000708 20000708     ... ... ... ... 
20000718:	20000710 20000710 20000718 20000718     ... ... ... ... 
20000728:	20000720 20000720 20000728 20000728      ..  .. (.. (.. 
20000738:	20000730 20000730 20000738 20000738     0.. 0.. 8.. 8.. 
20000748:	20000740 20000740 20000748 20000748     @.. @.. H.. H.. 
20000758:	20000750 20000750 20000758 20000758     P.. P.. X.. X.. 
20000768:	20000760 20000760 20000768 20000768     `.. `.. h.. h.. 
20000778:	20000770 20000770 20000778 20000778     p.. p.. x.. x.. 
20000788:	20000780 20000780 20000788 20000788     ... ... ... ... 
20000798:	20000790 20000790 20000798 20000798     ... ... ... ... 
200007a8:	200007a0 200007a0 200007a8 200007a8     ... ... ... ... 
200007b8:	200007b0 200007b0 200007b8 200007b8     ... ... ... ... 
200007c8:	200007c0 200007c0 200007c8 200007c8     ... ... ... ... 
200007d8:	200007d0 200007d0 200007d8 200007d8     ... ... ... ... 
200007e8:	200007e0 200007e0 200007e8 200007e8     ... ... ... ... 
200007f8:	200007f0 200007f0 200007f8 200007f8     ... ... ... ... 
20000808:	20000800 20000800 20000808 20000808     ... ... ... ... 
20000818:	20000810 20000810 20000818 20000818     ... ... ... ... 
20000828:	20000820 20000820 20000828 20000828      ..  .. (.. (.. 
20000838:	20000830 20000830 20000838 20000838     0.. 0.. 8.. 8.. 
20000848:	20000840 20000840 20000848 20000848     @.. @.. H.. H.. 
20000858:	20000850 20000850 20000858 20000858     P.. P.. X.. X.. 
20000868:	20000860 20000860 20000868 20000868     `.. `.. h.. h.. 
20000878:	20000870 20000870 20000878 20000878     p.. p.. x.. x.. 
20000888:	20000880 20000880 20000888 20000888     ... ... ... ... 
20000898:	20000890 20000890 20000898 20000898     ... ... ... ... 
200008a8:	200008a0 200008a0 200008a8 200008a8     ... ... ... ... 
200008b8:	200008b0 200008b0 200008b8 200008b8     ... ... ... ... 
200008c8:	200008c0 200008c0 200008c8 200008c8     ... ... ... ... 
200008d8:	200008d0 200008d0 200008d8 200008d8     ... ... ... ... 
200008e8:	200008e0 200008e0 200008e8 200008e8     ... ... ... ... 
200008f8:	200008f0 200008f0 200008f8 200008f8     ... ... ... ... 
20000908:	20000900 20000900 20000908 20000908     ... ... ... ... 
20000918:	20000910 20000910 20000918 20000918     ... ... ... ... 
20000928:	20000920 20000920 20000928 20000928      ..  .. (.. (.. 
20000938:	20000930 20000930 20000938 20000938     0.. 0.. 8.. 8.. 
20000948:	20000940 20000940 20000948 20000948     @.. @.. H.. H.. 
20000958:	20000950 20000950 20000958 20000958     P.. P.. X.. X.. 
20000968:	20000960 20000960 20000968 20000968     `.. `.. h.. h.. 
20000978:	20000970 20000970 20000978 20000978     p.. p.. x.. x.. 
20000988:	20000980 20000980 20000988 20000988     ... ... ... ... 
20000998:	20000990 20000990 20000998 20000998     ... ... ... ... 
200009a8:	200009a0 200009a0 200009a8 200009a8     ... ... ... ... 
200009b8:	200009b0 200009b0 200009b8 200009b8     ... ... ... ... 
200009c8:	200009c0 200009c0 200009c8 200009c8     ... ... ... ... 

200009d8 <__malloc_sbrk_base>:
200009d8:	ffffffff                                ....

200009dc <__malloc_trim_threshold>:
200009dc:	00020000                                ....
